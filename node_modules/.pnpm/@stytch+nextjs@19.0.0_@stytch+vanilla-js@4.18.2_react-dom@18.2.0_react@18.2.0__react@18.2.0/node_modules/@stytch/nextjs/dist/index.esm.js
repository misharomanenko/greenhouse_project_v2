import React, { useRef, useState, useEffect, useCallback, createContext, useContext, useMemo, useLayoutEffect } from 'react';

const createDeepEqual = ({ KEYS_TO_EXCLUDE = [] } = {}) => {
    // If comparing functions, this may need some work. Not sure the
    // best path for this: compare instance (what it currently does),
    // stringify and compare, etc.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const deepEqual = (a, b) => {
        // Ensures type is the same
        if (typeof a !== typeof b)
            return false;
        // arrays, null, and objects all have type 'object'
        if (a === null || b === null)
            return a === b;
        if (typeof a === 'object') {
            if (Object.keys(a).length !== Object.keys(b).length || Object.keys(a).some((k) => !(k in b)))
                return false;
            return Object.entries(a)
                .filter(([k]) => !KEYS_TO_EXCLUDE.includes(k))
                .every(([k, v]) => deepEqual(v, b[k]));
        }
        // boolean, string, number, undefined
        return a === b;
    };
    return deepEqual;
};

const deepEqual = createDeepEqual();
/**
 * Returns a version of `newValue` whose properties that are deeply equal to
 * those in `oldValue` are replaced with those from `oldValue`. This provides a
 * limited form of "structural sharing" that provides a stable reference for
 * unchanged slices of the object.
 *
 * If `oldValue` and `newValue` are referentially equal, the same value is
 * returned.
 *
 * @param oldValue The old value
 * @param newValue The new value
 */
const mergeWithStableProps = (oldValue, newValue) => {
    // If the values are already referentially the same, just return the new value
    if (oldValue === newValue) {
        return newValue;
    }
    return Object.keys(oldValue).reduce((acc, key) => {
        if (key in newValue && deepEqual(oldValue[key], newValue[key])) {
            acc[key] = oldValue[key];
        }
        return acc;
    }, Object.assign({}, newValue));
};

const noProviderError = (item, provider = 'StytchProvider') => `${item} can only be used inside <${provider}>.`;
const noHeadlessClientError = `Tried to create a Stytch Login UI element using the Stytch Headless SDK.
You must use the UI SDK to use UI elements.
Please make sure you are importing createStytchHeadlessClient from @stytch/nextjs/ui and not from @stytch/nextjs/headless.`;

// eslint-disable-next-line @typescript-eslint/no-explicit-any
function invariant(cond, message) {
    if (!cond)
        throw new Error(message);
}

// useState can cause memory leaks if it is set after the component unmounted. For example, if it is
// set after `await`, or in a `then`, `catch`, or `finally`, or in a setTimout/setInterval.
const useAsyncState = (initialState) => {
    const isMounted = useRef(true);
    const [state, setState] = useState(initialState);
    useEffect(() => {
        isMounted.current = true;
        return () => {
            isMounted.current = false;
        };
    }, []);
    const setStateAction = useCallback((newState) => {
        isMounted.current && setState(newState);
    }, []);
    return [state, setStateAction];
};

const SSRStubKey = Symbol('__stytch_SSRStubKey');
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const isStytchSSRProxy = (proxy) => {
    return !!proxy[SSRStubKey];
};

const initialUser = {
    user: null,
    fromCache: false,
    isInitialized: false,
};
const initialSession = {
    session: null,
    fromCache: false,
    isInitialized: false,
};
const StytchContext = createContext({ isMounted: false });
const StytchUserContext = createContext(initialUser);
const StytchSessionContext = createContext(initialSession);
const useIsMounted__INTERNAL = () => useContext(StytchContext).isMounted;
const isUIClient = (client) => {
    return client.mountLogin !== undefined;
};
/**
 * Returns the active User.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the session data is from persistent storage.
 * See Next's {@link https://nextjs.org/docs/authentication#authenticating-statically-generated-pages documentation} for more.
 * @example
 * const {user, isInitialized, fromCache} = useStytchUser();
 * if (!isInitialized) {
 *     return <p>Loading...</p>;
 * }
 * return (<h1>Welcome, {user.name.first_name}</h1>);
 */
const useStytchUser = () => {
    invariant(useIsMounted__INTERNAL(), noProviderError('useStytchUser'));
    return useContext(StytchUserContext);
};
/**
 * Returns the user's active Stytch session.
 * The Stytch SDKs are used for client-side authentication and session management.
 * Check the isInitialized property to determine if the SDK has completed initialization.
 * Check the fromCache property to determine if the session data is from persistent storage.
 * See Next's {@link https://nextjs.org/docs/authentication#authenticating-statically-generated-pages documentation} for more.
 * @example
 * const {session, isInitialized, fromCache} = useStytchSession();
 * useEffect(() => {
 *   if (!isInitialized) {
 *     return;
 *   }
 *   if (!session) {
 *     router.replace('/login')
 *   }
 * }, [session, isInitialized]);
 */
const useStytchSession = () => {
    invariant(useIsMounted__INTERNAL(), noProviderError('useStytchSession'));
    return useContext(StytchSessionContext);
};
/**
 * Returns the Stytch client stored in the Stytch context.
 *
 * @example
 * const stytch = useStytch();
 * useEffect(() => {
 *   stytch.magicLinks.authenticate('...')
 * }, [stytch]);
 */
const useStytch = () => {
    const ctx = useContext(StytchContext);
    invariant(ctx.isMounted, noProviderError('useStytch'));
    return ctx.client;
};
const withStytch = (Component) => {
    const WithStytch = (props) => {
        invariant(useIsMounted__INTERNAL(), noProviderError('withStytch'));
        return React.createElement(Component, Object.assign({}, props, { stytch: useStytch() }));
    };
    WithStytch.displayName = `withStytch(${Component.displayName || Component.name || 'Component'})`;
    return WithStytch;
};
const withStytchUser = (Component) => {
    const WithStytchUser = (props) => {
        invariant(useIsMounted__INTERNAL(), noProviderError('withStytchUser'));
        const { user, isInitialized, fromCache } = useStytchUser();
        return (React.createElement(Component, Object.assign({}, props, { stytchUser: user, stytchUserIsInitialized: isInitialized, stytchUserIsFromCache: fromCache })));
    };
    WithStytchUser.displayName = `withStytchUser(${Component.displayName || Component.name || 'Component'})`;
    return WithStytchUser;
};
const withStytchSession = (Component) => {
    const WithStytchSession = (props) => {
        invariant(useIsMounted__INTERNAL(), noProviderError('withStytchSession'));
        const { session, isInitialized, fromCache } = useStytchSession();
        return (React.createElement(Component, Object.assign({}, props, { stytchSession: session, stytchSessionIsInitialized: isInitialized, stytchSessionIsFromCache: fromCache })));
    };
    WithStytchSession.displayName = `withStytchSession(${Component.displayName || Component.name || 'Component'})`;
    return WithStytchSession;
};
/**
 * The Stytch Context Provider.
 * Wrap your application with this component in `_app.js` in order to use Stytch everywhere in your app.
 * @example
 * const stytch = createStytchHeadlessClient('public-token-<find yours in the stytch dashboard>')
 *
 * return (
 *   <StytchProvider stytch={stytch}>
 *     <App />
 *   </StytchProvider>
 * )
 */
const StytchProvider = ({ stytch, children }) => {
    const ctx = useMemo(() => ({ client: stytch, isMounted: true }), [stytch]);
    const [{ user, session }, setClientState] = useAsyncState({
        session: initialSession,
        user: initialUser,
    });
    useEffect(() => {
        if (isStytchSSRProxy(stytch)) {
            return;
        }
        setClientState({
            session: Object.assign(Object.assign({}, stytch.session.getInfo()), { isInitialized: true }),
            user: Object.assign(Object.assign({}, stytch.user.getInfo()), { isInitialized: true }),
        });
        return stytch.onStateChange(() => {
            setClientState((oldState) => {
                const newState = {
                    session: Object.assign(Object.assign({}, stytch.session.getInfo()), { isInitialized: true }),
                    user: Object.assign(Object.assign({}, stytch.user.getInfo()), { isInitialized: true }),
                };
                return mergeWithStableProps(oldState, newState);
            });
        });
    }, [setClientState, stytch]);
    return (React.createElement(StytchContext.Provider, { value: ctx },
        React.createElement(StytchUserContext.Provider, { value: user },
            React.createElement(StytchSessionContext.Provider, { value: session }, children))));
};

// cc https://medium.com/@alexandereardon/uselayouteffect-and-ssr-192986cdcf7a
const useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;

/**
 * The Stytch Login Screen component.
 * This component can only be used with the Stytch UI Client - use {@link createStytchUIClient}
 * in your `_app.jsx` file.
 *
 * See the {@link https://stytch.com/docs/sdks/javascript-sdk online reference}
 * and {@link https://storybook.stytch.com interactive examples} for more.
 *
 * @example
 * <StytchLogin
 *   config={{
 *     products: ['emailMagicLinks', 'oauth'],
 *     emailMagicLinksOptions: {
 *       loginRedirectURL: 'https://example.com/authenticate',
 *       signupRedirectURL: 'https://example.com/authenticate',
 *     },
 *     oauthOptions: {
 *      providers: [{ type: OAuthProviders.Google }, { type: OAuthProviders.Microsoft }],
 *    },
 *   }}
 *   styles={{
 *     fontFamily: '"Helvetica New", Helvetica, sans-serif',
 *     primaryColor: '#0577CA',
 *     width: '321px',
 *   }}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 *
 * @param config - A {@link StytchLoginConfig} object
 * @param styles - An optional {@link StyleConfig} to customize the look and feel of the screen.
 * @param callbacks - An optional {@link Callbacks} object
 */
const StytchLogin = ({ config, styles, callbacks }) => {
    invariant(useIsMounted__INTERNAL(), noProviderError('<StytchLogin />'));
    const stytchClient = useStytch();
    const containerEl = useRef(null);
    useIsomorphicLayoutEffect(() => {
        if (!isUIClient(stytchClient)) {
            throw Error(noHeadlessClientError);
        }
        if (!containerEl.current) {
            return;
        }
        if (!containerEl.current.id) {
            const randId = Math.floor(Math.random() * 1e6);
            containerEl.current.id = `stytch-magic-link-${randId}`;
        }
        stytchClient.mountLogin({
            config,
            callbacks,
            elementId: `#${containerEl.current.id}`,
            styles,
        });
    }, [stytchClient, config, styles, callbacks]);
    return React.createElement("div", { ref: containerEl });
};
/**
 * The Stytch Reset Password component.
 * This component can only be used with a {@link StytchUIClient} client constructor
 * passed into the {@link StytchProvider}
 *
 * See the {@link https://stytch.com/docs/sdks/javascript-sdk online reference}
 * and {@link https://storybook.stytch.com interactive examples} for more.
 *
 * @example
 * <StytchPasswordReset
 *   config={{
 *     products: ['emailMagicLinks', 'oauth'],
 *     emailMagicLinksOptions: {
 *       loginRedirectURL: 'https://example.com/authenticate',
 *       signupRedirectURL: 'https://example.com/authenticate',
 *     },
 *     oauthOptions: {
 *      providers: [{ type: OAuthProviders.Google }, { type: OAuthProviders.Microsoft }],
 *    },
 *   }}
 *   passwordResetToken="PvC5UudZ7TPZbELt95yXAQ-8MeEUCRob8bUQ-g52fIJs"
 *   styles={{
 *     fontFamily: '"Helvetica New", Helvetica, sans-serif',
 *     primaryColor: '#0577CA',
 *     width: '321px',
 *   }}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 *
 * @param config - A {@link StytchLoginConfig} object
 * @param passwordResetToken - A Stytch password reset token
 * @param styles - An optional {@link StyleConfig} to customize the look and feel of the screen.
 * @param callbacks - An optional {@link Callbacks} object
 */
const StytchPasswordReset = ({ config, styles, callbacks, passwordResetToken }) => {
    invariant(useIsMounted__INTERNAL(), noProviderError('<StytchResetPassword />'));
    const stytchClient = useStytch();
    const containerEl = useRef(null);
    useIsomorphicLayoutEffect(() => {
        if (!isUIClient(stytchClient)) {
            throw Error(noHeadlessClientError);
        }
        if (!containerEl.current) {
            return;
        }
        if (!containerEl.current.id) {
            const randId = Math.floor(Math.random() * 1e6);
            containerEl.current.id = `stytch-reset-password-${randId}`;
        }
        if (passwordResetToken) {
            stytchClient.mountResetPassword({
                config,
                callbacks,
                elementId: `#${containerEl.current.id}`,
                styles,
                passwordResetToken,
            });
        }
    }, [stytchClient, config, styles, callbacks, passwordResetToken]);
    return React.createElement("div", { ref: containerEl });
};
/**
 * The Stytch Passkey Registration component.
 * This component can only be used with a {@link StytchUIClient} client constructor
 * passed into the {@link StytchProvider}
 *
 * See the {@link https://stytch.com/docs/sdks/javascript-sdk online reference}
 * and {@link https://storybook.stytch.com interactive examples} for more.
 *
 * @example
 * const styles = {
 *     container: {
 *       backgroundColor: '#e11e1e',
 *     },
 *     colors: {
 *       primary: '#ff00f7',
 *       secondary: '#5C727D',
 *     },
 *    }
 *
 * <StytchPasskeyRegistration
 *   styles={styles}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 * />
 *
 * @param styles - An optional {@link StyleConfig} to customize the look and feel of the screen.
 * @param callbacks - An optional {@link Callbacks} object
 */
const StytchPasskeyRegistration = ({ config, styles, callbacks }) => {
    invariant(useIsMounted__INTERNAL(), noProviderError('<StytchPasskeyRegistration />'));
    const stytchClient = useStytch();
    const containerEl = useRef(null);
    const user = useStytchUser();
    useIsomorphicLayoutEffect(() => {
        if (!isUIClient(stytchClient)) {
            throw Error(noHeadlessClientError);
        }
        if (!containerEl.current) {
            return;
        }
        if (!containerEl.current.id) {
            const randId = Math.floor(Math.random() * 1e6);
            containerEl.current.id = `stytch-passkey-registration-${randId}`;
        }
        stytchClient.mountPasskeyRegistration({
            config,
            callbacks,
            elementId: `#${containerEl.current.id}`,
            styles,
        });
    }, [stytchClient, config, styles, callbacks, user]);
    return React.createElement("div", { ref: containerEl });
};

export { StytchLogin, StytchPasskeyRegistration, StytchPasswordReset, StytchProvider, useStytch, useStytchSession, useStytchUser, withStytch, withStytchSession, withStytchUser };
