import * as React from 'react';
import { Wallets } from '@stytch/core/public';
type ProviderRequest = ({ method, params, }: {
    method: 'eth_requestAccounts' | 'personal_sign';
    params?: string[];
}) => string[] | string;
type ETHProvider = {
    isMetaMask?: boolean;
    isCoinbaseWallet?: boolean;
    request: ProviderRequest;
};
declare global {
    interface Window {
        solana: {
            isPhantom?: boolean;
            connect: () => {
                publicKey: {
                    toString: () => string;
                };
            };
            request: ({ method, params, }: {
                method: 'signMessage';
                params: Record<string, any>;
            }) => {
                signature: Uint8Array;
            };
        };
        ethereum: {
            isMetaMask?: boolean;
            isCoinbaseWallet?: boolean;
            request?: ({ method, params }: {
                method: string;
                params?: string[];
            }) => string[] | string;
            providers?: ETHProvider[];
        };
        BinanceChain: {
            request: ProviderRequest;
        };
        vessel: {
            ethereum: {
                request: ProviderRequest;
            };
        };
    }
}
export declare const WalletToIcon: Record<Wallets, React.FC>;
export declare const WalletToText: Record<Wallets, string>;
export declare const isWalletVisible: (wallet: Wallets) => boolean;
export declare const connectWithWallet: ({ wallet }: {
    wallet: Wallets;
}) => Promise<string>;
export declare const signMessageWithWallet: ({ wallet, message, address, }: {
    wallet: Wallets;
    message: string;
    address: string;
}) => Promise<string>;
export declare const isSolanaWallet: (wallet: Wallets) => boolean;
export declare const isEthereumWallet: (wallet: Wallets) => boolean;
export {};
