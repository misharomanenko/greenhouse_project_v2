import React from 'react';
export interface IReactWebComponent<P> extends HTMLElement {
    render(props: P): void;
}
type IReactWebComponentConstructor<P> = new (params: P) => IReactWebComponent<P>;
/**
 * An opinionated React Component to Web Component binder.
 * High-level points:
 * - All React props are passed as props on the div, no attributes involved
 * - No support for incremental updates of props
 */
export declare function CreateWebComponent<P extends React.JSX.IntrinsicAttributes & object>(ReactComponent: React.ComponentType<P>, webComponentName: string): IReactWebComponentConstructor<P>;
export declare function CreateShadowWebComponent<P extends React.JSX.IntrinsicAttributes & object>(ReactComponent: React.ComponentType<P>, webComponentName: string): IReactWebComponentConstructor<P>;
/**
 * Web Components aren't really isomorphic at all
 * but it's important to delay the construction & definition of the WC class until we are on the clientside
 * because the HTMLElement we extend from, and the customElement registry we modify, don't exist on the server
 */
export declare function CreateSSRSafeWebComponent<P extends React.JSX.IntrinsicAttributes & object>(ReactComponent: React.ComponentType<P>, webComponentName: string): (props: P) => IReactWebComponent<P>;
export {};
