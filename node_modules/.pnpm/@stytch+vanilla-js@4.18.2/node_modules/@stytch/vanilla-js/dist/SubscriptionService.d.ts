import { StytchClientOptions, SessionTokens, UnsubscribeFunction, ConsumerState, B2BState, User, Member, SessionTokensUpdate, Organization } from '@stytch/core/public';
import { IConsumerSubscriptionService, IB2BSubscriptionService, ISubscriptionService } from '@stytch/core';
import Cookies from 'js-cookie';
type SubscriberFunction<T> = (value: T | null) => void;
type Subscribers<T> = Record<string, SubscriberFunction<T>>;
export declare class SubscriptionDataLayer<T extends ConsumerState | B2BState> {
    publicToken: string;
    state: T | null;
    private readonly stateKeysUpdated;
    private readonly _opaqueTokenCookieName;
    private readonly _jwtCookieName;
    private readonly _cookiePath;
    private readonly _domain;
    private readonly _cookieAvailableToSubdomains;
    private readonly _istCookieName;
    subscriptions: Subscribers<T>;
    constructor(publicToken: string, options?: StytchClientOptions);
    protected get opaqueTokenCookieName(): string;
    protected get jwtCookieName(): string;
    protected get istCookieName(): string;
    readSessionCookie(): {
        session_token: string | undefined;
        session_jwt: string | undefined;
    };
    readIntermediateSessionTokenCookie(): string | undefined;
    writeSessionCookie(stateDiff: StateWithTokensLoggedIn<T>): void;
    writeIntermediateSessionTokenCookie(IST: string): void;
    removeSessionCookie(): void;
    removeISTCookie(): void;
    removeCookies(cookiesToRemove: string[]): void;
    syncToLocalStorage(): void;
    getItem(key: string): string | null;
    setItem(key: string, value: string): void;
    removeItem(key: string): void;
    browserSessionStorage: {
        getItem: (key: string) => string | null;
        setItem: (key: string, value: string) => void;
        removeItem: (key: string) => void;
    };
    static generateCookieOpts({ path, domain, availableToSubdomains, expiresAt, }: {
        path: string | null;
        domain: string | null;
        availableToSubdomains: boolean;
        expiresAt: string;
    }): Cookies.CookieAttributes;
}
export declare class ConsumerSubscriptionDataLayer extends SubscriptionDataLayer<ConsumerState> {
}
export declare class B2BSubscriptionDataLayer extends SubscriptionDataLayer<B2BState> {
}
export declare const __clearConsumerDataLayerCache: () => void;
export declare const __clearB2BDataLayerCache: () => void;
export declare const getConsumerDataLayer: (publicToken: string, options?: StytchClientOptions) => ConsumerSubscriptionDataLayer;
export declare const getB2BDataLayer: (publicToken: string, options?: StytchClientOptions) => B2BSubscriptionDataLayer;
type StateWithTokensLoggedIn<T> = {
    state: T | null;
    session_token: string;
    session_jwt: string;
    intermediate_session_token: null;
};
type StateWithTokensLoggedOut = {
    state: null;
    session_token: null;
    session_jwt: null;
    intermediate_session_token: null;
};
type StateWithIntermediateSessionToken = {
    state: null;
    session_token: null;
    session_jwt: null;
    intermediate_session_token: string;
};
type StateWithTokensDiff<T> = StateWithTokensLoggedIn<T> | StateWithTokensLoggedOut | StateWithIntermediateSessionToken;
export declare class BaseSubscriptionService<T extends ConsumerState | B2BState> implements ISubscriptionService<T> {
    private _publicToken;
    private _datalayer;
    /**
     * Whether the state was retrieved from the cache and is awaiting a refresh
     */
    private fromCache;
    constructor(_publicToken: string, _datalayer: SubscriptionDataLayer<T>);
    private _listen;
    getTokens(): SessionTokens | null;
    getIntermediateSessionToken(): string | null;
    destroyState(): void;
    destroySession(): void;
    _updateStateAndTokensInternal(stateDiff: StateWithTokensDiff<T>): void;
    updateStateAndTokens(stateDiff: StateWithTokensDiff<T>): void;
    updateState(state: T | null, fromExternalSource?: boolean): void;
    updateTokens(tokens: SessionTokensUpdate): void;
    subscribeToState(callback: SubscriberFunction<T>): UnsubscribeFunction;
    getState(): T | null;
    destroy(): void;
    syncFromDeviceStorage(): null;
    getFromCache(): boolean;
    setCacheRefreshed(): void;
}
export declare class ConsumerSubscriptionService extends BaseSubscriptionService<ConsumerState> implements IConsumerSubscriptionService {
    updateUser: (user: User) => void;
    getUser: () => User | null;
    getSession: () => import("@stytch/core/public").Session | null;
}
export declare class B2BSubscriptionService extends BaseSubscriptionService<B2BState> implements IB2BSubscriptionService {
    updateMember: (member: Member) => void;
    getMember: () => Member | null;
    updateOrganization: (organization: Organization) => void;
    getOrganization: () => Organization | null;
    getSession: () => import("@stytch/core/public").MemberSession | null;
}
export {};
