import { IHeadlessOAuthClient } from '@stytch/core/public';
import { HeadlessOAuthClient as BaseHeadlessOAuthClient, INetworkClient, IPKCEManager, IConsumerSubscriptionService } from '@stytch/core';
import { OneTapProvider } from './oneTap/OneTapProvider';
import { OneTapRenderResult } from './oneTap/OneTapClient';
export type GoogleOneTapOAuthOptions = {
    /**
     * The URL that Stytch redirects to after the OAuth flow is completed for a user that already exists.
     * This URL should be an endpoint in the backend server that verifies the request by querying Stytch's /oauth/authenticate endpoint and finishes the login.
     * The URL should be configured as a Login URL in the Stytch Dashboard's Redirect URL page.
     * If the field is not specified, the default in the Dashboard is used.
     */
    login_redirect_url?: string;
    /**
     * The URL that Stytch redirects to after the OAuth flow is completed for a user that does not yet exist.
     * This URL should be an endpoint in the backend server that verifies the request by querying Stytch's /oauth/authenticate endpoint and finishes the login.
     * The URL should be configured as a Sign Up URL in the Stytch Dashboard's Redirect URL page.
     * If the field is not specified, the default in the Dashboard is used.
     */
    signup_redirect_url?: string;
    /**
     * An optional callback function that runs when a user explicitly cancels out of the one tap flow.
     * This callback may not be invoked immediately or at all depending on the behavior of the browser and Google's SDK.
     */
    onOneTapCancelled?: () => void;
};
interface IGoogleOneTapOAuthProvider {
    /**
     * Start an OAuth flow by showing the Google one tap prompt in the top right corner of the user's browser.
     * You can configure this to be started by a user action (i.e Button click) or on load/render.
     * @example
     * const showGoogleOneTap = useCallback(()=> {
     *   stytch.oauth.googleOneTap.start({
     *     login_redirect_url: 'https://example.com/oauth/callback',
     *     signup_redirect_url: 'https://example.com/oauth/callback',
     *   })
     * }, [stytch]);
     * return (
     *   <Button onClick={showGoogleOneTap}> Show Google one tap </Button>
     * );
     *
     * @param options - An {@link GoogleOneTapOAuthOptions} object
     *
     * @returns A {@link OneTapRenderResult} object. The result object includes if the one-tap prompt
     * was rendered, and a reason if it couldn't be rendered.
     *
     * @throws An Error if the one tap client cannot be created.
     */
    start(options?: GoogleOneTapOAuthOptions): Promise<OneTapRenderResult>;
}
type DynamicConfig = Promise<{
    cnameDomain: null | string;
    pkceRequiredForOAuth: boolean;
}>;
type Config = {
    publicToken: string;
    testAPIURL: string;
    liveAPIURL: string;
};
export interface IWebOAuthClient extends IHeadlessOAuthClient {
    googleOneTap: IGoogleOneTapOAuthProvider;
}
export declare class HeadlessOAuthClient extends BaseHeadlessOAuthClient implements IWebOAuthClient {
    private _oneTap;
    constructor(_networkClient: INetworkClient, _subscriptionService: IConsumerSubscriptionService, _pkceManager: IPKCEManager, _dynamicConfig: DynamicConfig, _config: Config, _oneTap: OneTapProvider);
    private startOneTap;
    googleOneTap: IGoogleOneTapOAuthProvider;
}
export {};
