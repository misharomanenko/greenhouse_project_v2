export declare const idpOptions: {
    readonly 'saml:google-workspace': {
        idp: {
            readonly displayName: "Google SAML";
            readonly setupOrder: ["copyFromIdp", "copyToIdp", "attributeMapping"];
            readonly idpValueOrder: ["entityId", "ssoUrl", "certificate"];
            readonly acsUrlLabel: "ACS URL";
            readonly audienceUriLabel: "Entity ID";
            readonly idpSsoUrlLabel: "SSO URL";
            readonly idpEntityIdLabel: "Entity ID";
            readonly x509CertificateLabel: "Certificate";
            readonly metadataUrlLabel: false;
            readonly nameIdFormatLabel: "NameID Format";
            readonly nameIdFormatValue: "EMAIL; Basic Information > Primary email";
            readonly attributeMappingLabel: "Attribute Mapping";
        };
        idpName: "google-workspace";
        type: "saml";
    };
    readonly 'saml:okta': {
        idp: {
            readonly displayName: "Okta SAML";
            readonly setupOrder: ["copyToIdp", "attributeMapping", "copyFromIdp"];
            readonly idpValueOrder: ["ssoUrl", "entityId", "certificate"];
            readonly acsUrlLabel: "Single sign-on URL";
            readonly audienceUriLabel: "Audience URI (SP Entity ID)";
            readonly idpSsoUrlLabel: "Sign-on URL";
            readonly idpEntityIdLabel: "Issuer";
            readonly x509CertificateLabel: "Signing Certificate";
            readonly metadataUrlLabel: "Metadata URL";
            readonly nameIdFormatLabel: "Name ID Format";
            readonly nameIdFormatValue: "EmailAddress";
            readonly attributeMappingLabel: "Attribute Statements";
        };
        idpName: "okta";
        type: "saml";
    };
    readonly 'oidc:okta': {
        idp: {
            readonly displayName: "Okta OIDC";
            readonly setupOrder: ["copyToIdp", "copyFromIdp"];
            readonly redirectUrlLabel: "Sign-on Redirect URI";
            readonly clientIdLabel: "Client ID";
            readonly clientSecretLabel: "Client Secret";
            readonly issuerLabel: "Okta URL (Issuer)";
        };
        idpName: "okta";
        type: "oidc";
    };
    readonly 'saml:microsoft-entra': {
        idp: {
            readonly displayName: "Entra SAML";
            readonly setupOrder: ["copyToIdp", "attributeMapping", "copyFromIdp"];
            readonly idpValueOrder: ["ssoUrl", "entityId", "certificate"];
            readonly acsUrlLabel: "Reply URL (Assertion Consumer Service URL)";
            readonly audienceUriLabel: "Identifier (Entity ID)";
            readonly idpSsoUrlLabel: "Login Url";
            readonly idpEntityIdLabel: "Microsoft Entra Identifier";
            readonly x509CertificateLabel: "PEM Certificate";
            readonly metadataUrlLabel: "App Federation Metadata Url";
            readonly nameIdFormatLabel: "Unique User Identifier (Name ID) Format";
            readonly nameIdFormatValue: "user.primaryauthoritativeemail";
            readonly attributeMappingLabel: "Claim Names";
        };
        idpName: "microsoft-entra";
        type: "saml";
    };
    readonly 'oidc:microsoft-entra': {
        idp: {
            readonly displayName: "Entra OIDC";
            readonly setupOrder: ["copyToIdp", "copyFromIdp"];
            readonly redirectUrlLabel: "Redirect URI";
            readonly clientIdLabel: "Application (Client) ID";
            readonly clientSecretLabel: "Client Secret";
            readonly issuerLabel: "Issuer";
            readonly issuerDerivedLabel: "Directory (tenant) ID";
            readonly extractIssuerFromInput: (input: string) => string | undefined;
            readonly transformInputToIssuer: (id: string) => string;
        };
        idpName: "microsoft-entra";
        type: "oidc";
    };
    readonly 'saml:generic': {
        idp: {
            readonly displayName: "Custom SAML";
            readonly setupOrder: ["copyToIdp", "attributeMapping", "copyFromIdp"];
            readonly idpValueOrder: ["ssoUrl", "entityId", "certificate"];
            readonly acsUrlLabel: "ACS URL (Reply URL)";
            readonly audienceUriLabel: "Audience URI (SP Entity ID)";
            readonly idpSsoUrlLabel: "IdP Sign-on URL";
            readonly idpEntityIdLabel: "IdP Entity ID";
            readonly x509CertificateLabel: "x509 Certificate (PEM Format)";
            readonly metadataUrlLabel: "Metadata URL";
            readonly nameIdFormatLabel: "Name ID Format";
            readonly nameIdFormatValue: "Primary Email Address";
            readonly attributeMappingLabel: "Attribute Mapping";
        };
        idpName: "generic";
        type: "saml";
    };
    readonly 'oidc:generic': {
        idp: {
            readonly displayName: "Custom OIDC";
            readonly setupOrder: ["copyToIdp", "copyFromIdp"];
            readonly redirectUrlLabel: "Redirect URI";
            readonly clientIdLabel: "Client ID";
            readonly clientSecretLabel: "Client Secret";
            readonly issuerLabel: "Issuer";
        };
        idpName: "generic";
        type: "oidc";
    };
};
export type IdpSelectValue = keyof typeof idpOptions;
export declare const idpSelectItems: {
    label: "Custom SAML" | "Entra SAML" | "Okta SAML" | "Google SAML" | "Custom OIDC" | "Entra OIDC" | "Okta OIDC";
    value: string;
}[];
export declare const samlIdpSelectItems: {
    label: "Custom SAML" | "Entra SAML" | "Okta SAML" | "Google SAML" | "Custom OIDC" | "Entra OIDC" | "Okta OIDC";
    value: "generic" | "okta" | "microsoft-entra" | "google-workspace";
}[];
export declare const oidcIdpSelectItems: {
    label: "Custom SAML" | "Entra SAML" | "Okta SAML" | "Google SAML" | "Custom OIDC" | "Entra OIDC" | "Okta OIDC";
    value: "generic" | "okta" | "microsoft-entra" | "google-workspace";
}[];
