import React, { ReactNode } from 'react';
import { InjectedComponents } from './componentInjection';
import { EmbeddedTableCoreProps } from './EmbeddedTable';
import { ModalCoreProps } from './Modal';
export declare const ADD_NEW_BUTTON_TEXT = "Add new";
export type AddModalProps = Pick<ModalCoreProps, 'title' | 'description' | 'confirmButtonText' | 'confirm' | 'disableConfirm' | 'noCancelButton' | 'keepOpenOnConfirm'> & {
    close?(): void;
    content?: ReactNode;
};
export type ListEditorCoreProps<T> = EmbeddedTableCoreProps<T> & {
    hideAddButton?: boolean;
    title?: string;
    description?: string;
    limit?: number;
    addModalProps?: AddModalProps;
    addButtonText?: string;
    onAdd?(): void;
};
export declare const ListEditorCore: <T extends string | Record<string, unknown>>({ title, description, limit, addModalProps, hideAddButton, onAdd, addButtonText, ButtonComponent: Button, EmbeddedTableComponent: EmbeddedTable, ModalComponent: Modal, TypographyComponent: Typography, ...embeddedTableProps }: EmbeddedTableCoreProps<T> & {
    hideAddButton?: boolean | undefined;
    title?: string | undefined;
    description?: string | undefined;
    limit?: number | undefined;
    addModalProps?: AddModalProps | undefined;
    addButtonText?: string | undefined;
    onAdd?(): void;
} & InjectedComponents<"Typography" | "Button" | "Modal"> & {
    EmbeddedTableComponent: React.ComponentType<EmbeddedTableCoreProps<T>>;
}) => JSX.Element;
