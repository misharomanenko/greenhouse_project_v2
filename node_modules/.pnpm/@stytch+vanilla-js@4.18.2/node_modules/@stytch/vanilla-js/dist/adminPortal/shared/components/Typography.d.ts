import { TypographyProps as MUITypographyProps } from '@material-ui/core';
import React, { FC, ReactNode } from 'react';
import { Classes } from '../utils/composeStyles';
export declare const makeTypographyStyles: <TProps extends object>(...styles: (Partial<import("@material-ui/core").StyleRules<"disabled" | "typography", TProps>> | ((theme: import("@material-ui/core").Theme) => Partial<import("@material-ui/core").StyleRules<"disabled" | "typography", TProps>>))[]) => keyof TProps extends never ? (props?: any) => import("@material-ui/styles").ClassNameMap<"disabled" | "typography"> : (props: TProps) => import("@material-ui/styles").ClassNameMap<"disabled" | "typography">;
type Color = 'primary' | 'secondary' | 'error';
export type TypographyCoreProps = {
    align?: MUITypographyProps['align'];
    children?: ReactNode;
    color?: Color;
    component?: React.ElementType;
    disabled?: boolean;
    variant?: 'h1' | 'h2' | 'h3' | 'h4' | 'body1' | 'body2' | 'caption';
};
export declare const TypographyCore: FC<TypographyCoreProps & Classes<typeof makeTypographyStyles>>;
export {};
