import { ButtonProps as InternalButtonProps } from '@material-ui/core';
import React, { MouseEventHandler, ReactNode, VFC } from 'react';
import { Classes } from '../utils/composeStyles';
export declare const makeButtonStyles: <TProps extends object>(...styles: (Partial<import("@material-ui/core").StyleRules<"button" | "text" | "primary" | "secondary" | "compact" | "iconOnly" | "ghost" | "warningGhost" | "warningPrimary" | "warningText", TProps>> | ((theme: import("@material-ui/core").Theme) => Partial<import("@material-ui/core").StyleRules<"button" | "text" | "primary" | "secondary" | "compact" | "iconOnly" | "ghost" | "warningGhost" | "warningPrimary" | "warningText", TProps>>))[]) => keyof TProps extends never ? (props?: any) => import("@material-ui/styles").ClassNameMap<"button" | "text" | "primary" | "secondary" | "compact" | "iconOnly" | "ghost" | "warningGhost" | "warningPrimary" | "warningText"> : (props: TProps) => import("@material-ui/styles").ClassNameMap<"button" | "text" | "primary" | "secondary" | "compact" | "iconOnly" | "ghost" | "warningGhost" | "warningPrimary" | "warningText">;
type Variant = 'ghost' | 'primary' | 'secondary' | 'text';
export type ButtonCoreProps = {
    autoFocus?: boolean;
    children?: ReactNode;
    className?: string;
    compact?: boolean;
    component?: React.ElementType;
    disabled?: boolean;
    endIcon?: ReactNode;
    fullWidth?: boolean;
    onClick?: MouseEventHandler<HTMLButtonElement>;
    startIcon?: ReactNode;
    type?: InternalButtonProps['type'];
    variant?: Variant;
    warning?: boolean;
};
export type ButtonCoreCommonProps = ButtonCoreProps & {
    component?: 'span' | 'button' | 'div';
};
export declare const ButtonCore: VFC<ButtonCoreProps & Classes<typeof makeButtonStyles>>;
export {};
