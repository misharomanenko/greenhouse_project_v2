/// <reference types="react" />
import { Classes } from '../utils/composeStyles';
import { InputCoreProps } from './Input';
import { InjectedComponents } from './componentInjection';
export declare const makeSearchBarStyles: <TProps extends object>(...styles: (Partial<import("@material-ui/core").StyleRules<"icon" | "searchBar" | "searchInput" | "searchIcon" | "slashIcon" | "slashIconContainer", TProps>> | ((theme: import("@material-ui/core").Theme) => Partial<import("@material-ui/core").StyleRules<"icon" | "searchBar" | "searchInput" | "searchIcon" | "slashIcon" | "slashIconContainer", TProps>>))[]) => keyof TProps extends never ? (props?: any) => import("@material-ui/styles").ClassNameMap<"icon" | "searchBar" | "searchInput" | "searchIcon" | "slashIcon" | "slashIconContainer"> : (props: TProps) => import("@material-ui/styles").ClassNameMap<"icon" | "searchBar" | "searchInput" | "searchIcon" | "slashIcon" | "slashIconContainer">;
export type SearchBarCoreProps = Pick<InputCoreProps, 'label' | 'id' | 'onChange' | 'placeholder' | 'value'>;
export declare const SearchBarCore: ({ classes, InputComponent: Input, ...inputProps }: SearchBarCoreProps & Classes<typeof makeSearchBarStyles> & InjectedComponents<'Input'>) => JSX.Element;
