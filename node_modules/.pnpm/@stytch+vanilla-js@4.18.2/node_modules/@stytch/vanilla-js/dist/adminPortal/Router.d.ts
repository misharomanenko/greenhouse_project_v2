import React from 'react';
export type RouterStateEntry<TScreenMap> = {
    [K in keyof TScreenMap]: TScreenMap[K] extends never ? {
        screen: K;
        params?: undefined;
    } : {
        screen: K;
        params: TScreenMap[K];
    };
}[keyof TScreenMap];
export type MappedPropsFromRouteMap<TRouteMap extends Record<string, React.ComponentType<any>>> = {
    [K in keyof TRouteMap]: unknown extends React.ComponentProps<TRouteMap[K]> ? never : React.ComponentProps<TRouteMap[K]>;
};
interface RouterState<TScreenMap> {
    currentRoute: RouterStateEntry<TScreenMap>;
    pendingRoute?: RouterStateEntry<TScreenMap> | undefined;
    blockersActive: Set<EnableBlock>;
}
type RouterContextState<TScreenMap> = Pick<RouterState<TScreenMap>, 'currentRoute'>;
type EnableBlock = boolean | (() => boolean);
export type UseBlockNavigation = (enableBlock: EnableBlock) => {
    blocked: boolean;
    allowNavigation: () => void;
    cancelNavigation: () => void;
};
export interface RouterController<TScreenMap> {
    navigate: (destination: RouterStateEntry<TScreenMap>) => void;
    useBlockNavigation: UseBlockNavigation;
}
type RouteMap<TScreenMap> = {
    [K in keyof TScreenMap]: React.ComponentType<TScreenMap[K]>;
};
export declare const createRouter: <TScreenMap extends Record<string, object>>() => {
    RouterProvider: ({ children, initialRoute, }: {
        children: React.ReactNode;
        initialRoute: RouterStateEntry<TScreenMap>;
    }) => React.JSX.Element;
    Router: ({ routeMap }: {
        routeMap: RouteMap<TScreenMap>;
    }) => React.JSX.Element | null;
    useRouterController: () => RouterController<TScreenMap>;
    useRouterState: () => RouterContextState<TScreenMap>;
};
export {};
