import { MouseEvent, ReactNode } from 'react';
import { Classes } from './composeStyles';
export declare const makeClickToCopyStyles: <TProps extends object>(...styles: (Partial<import("@material-ui/core").StyleRules<"checkCircle" | "darkBackground" | "containerHover", TProps>> | ((theme: import("@material-ui/core").Theme) => Partial<import("@material-ui/core").StyleRules<"checkCircle" | "darkBackground" | "containerHover", TProps>>))[]) => keyof TProps extends never ? (props?: any) => import("@material-ui/styles").ClassNameMap<"checkCircle" | "darkBackground" | "containerHover"> : (props: TProps) => import("@material-ui/styles").ClassNameMap<"checkCircle" | "darkBackground" | "containerHover">;
export interface UseClickToCopyCoreParams {
    darkBackground?: boolean;
    iconSize?: 'inherit' | 'small' | 'medium' | 'large';
    text: string;
}
export interface UseClickToCopyCoreReturnType {
    copied: boolean;
    copyToClipboard: (e: MouseEvent<HTMLElement>) => void;
    CopyIcon: ReactNode;
    containerHoverClass: string;
}
export declare const useClickToCopyCore: ({ classes, darkBackground, iconSize, text, }: UseClickToCopyCoreParams & Classes<typeof makeClickToCopyStyles>) => UseClickToCopyCoreReturnType;
