import { AccordionProps, Accordion as MUIAccordion, AccordionDetails as MUIAccordionDetails, AccordionSummary as MUIAccordionSummary } from '@material-ui/core';
import React, { Dispatch, SetStateAction } from 'react';
import { Classes } from '../utils/composeStyles';
export declare const makeAccordionStyles: <TProps extends object>(...styles: (Partial<import("@material-ui/core").StyleRules<"accordion" | "accordionDetails" | "accordionExpanded" | "accordionSummary", TProps>> | ((theme: import("@material-ui/core").Theme) => Partial<import("@material-ui/core").StyleRules<"accordion" | "accordionDetails" | "accordionExpanded" | "accordionSummary", TProps>>))[]) => keyof TProps extends never ? (props?: any) => import("@material-ui/styles").ClassNameMap<"accordion" | "accordionDetails" | "accordionExpanded" | "accordionSummary"> : (props: TProps) => import("@material-ui/styles").ClassNameMap<"accordion" | "accordionDetails" | "accordionExpanded" | "accordionSummary">;
interface useAccordionProps {
    defaultValue: boolean;
}
type AccordionBehavior = Pick<AccordionProps, 'expanded' | 'onChange'> & {
    setExpanded: Dispatch<SetStateAction<boolean>>;
};
export declare const useAccordion: ({ defaultValue }?: useAccordionProps) => AccordionBehavior;
export declare const AccordionCore: (props: React.ComponentProps<typeof MUIAccordion> & Classes<typeof makeAccordionStyles>) => JSX.Element;
export declare const AccordionSummaryCore: ({ classes, ...props }: React.ComponentProps<typeof MUIAccordionSummary> & Classes<typeof makeAccordionStyles>) => JSX.Element;
export declare const AccordionDetailsCore: (props: React.ComponentProps<typeof MUIAccordionDetails> & Classes<typeof makeAccordionStyles>) => JSX.Element;
export {};
