import { ComponentType } from 'react';
import { Classes } from '../utils/composeStyles';
import { TableActionCoreProps } from './TableActions';
import { InjectedComponents } from './componentInjection';
import { TableItemRenderer } from './types';
export declare const makeTableStyles: <TProps extends object>(...styles: (Partial<import("@material-ui/core").StyleRules<"tableCell" | "tableActionsCell" | "tableHeader" | "tableWithExpandedContent" | "tableWithActions" | "cellWithExpandedContent" | "expandMoreCell" | "openChevron" | "expandedRow" | "expandedContentCell" | "expandedContentContainer" | "clickable" | "tableRow", TProps>> | ((theme: import("@material-ui/core").Theme) => Partial<import("@material-ui/core").StyleRules<"tableCell" | "tableActionsCell" | "tableHeader" | "tableWithExpandedContent" | "tableWithActions" | "cellWithExpandedContent" | "expandMoreCell" | "openChevron" | "expandedRow" | "expandedContentCell" | "expandedContentContainer" | "clickable" | "tableRow", TProps>>))[]) => keyof TProps extends never ? (props?: any) => import("@material-ui/styles").ClassNameMap<"tableCell" | "tableActionsCell" | "tableHeader" | "tableWithExpandedContent" | "tableWithActions" | "cellWithExpandedContent" | "expandMoreCell" | "openChevron" | "expandedRow" | "expandedContentCell" | "expandedContentContainer" | "clickable" | "tableRow"> : (props: TProps) => import("@material-ui/styles").ClassNameMap<"tableCell" | "tableActionsCell" | "tableHeader" | "tableWithExpandedContent" | "tableWithActions" | "cellWithExpandedContent" | "expandMoreCell" | "openChevron" | "expandedRow" | "expandedContentCell" | "expandedContentContainer" | "clickable" | "tableRow">;
export type TableCoreProps<T> = {
    ExpandedContent?: ComponentType<{
        data: T;
    }>;
    itemRenderer: TableItemRenderer<T>[];
    items: T[];
    rowKeyExtractor?(item: T): string;
    onRowClick?(id: string): void;
    getItemActionProps?: (item: T) => TableActionCoreProps;
    disableBottomBorder?: boolean;
    titleVariant?: 'h4' | 'body2' | 'caption';
    onOpenChange?: (event: {
        id: string;
        open: boolean;
    }) => void;
    openIds?: Set<string>;
};
export declare const TableCore: <T extends {
    id?: string | undefined;
}>({ ExpandedContent, itemRenderer, items, rowKeyExtractor, onRowClick, getItemActionProps, classes, TableActionsComponent: TableActions, TypographyComponent: Typography, disableBottomBorder, titleVariant, onOpenChange, openIds, }: TableCoreProps<T> & Classes<(<TProps extends object>(...styles: (Partial<import("@material-ui/core").StyleRules<"tableCell" | "tableActionsCell" | "tableHeader" | "tableWithExpandedContent" | "tableWithActions" | "cellWithExpandedContent" | "expandMoreCell" | "openChevron" | "expandedRow" | "expandedContentCell" | "expandedContentContainer" | "clickable" | "tableRow", TProps>> | ((theme: import("@material-ui/core").Theme) => Partial<import("@material-ui/core").StyleRules<"tableCell" | "tableActionsCell" | "tableHeader" | "tableWithExpandedContent" | "tableWithActions" | "cellWithExpandedContent" | "expandMoreCell" | "openChevron" | "expandedRow" | "expandedContentCell" | "expandedContentContainer" | "clickable" | "tableRow", TProps>>))[]) => keyof TProps extends never ? (props?: any) => import("@material-ui/styles").ClassNameMap<"tableCell" | "tableActionsCell" | "tableHeader" | "tableWithExpandedContent" | "tableWithActions" | "cellWithExpandedContent" | "expandMoreCell" | "openChevron" | "expandedRow" | "expandedContentCell" | "expandedContentContainer" | "clickable" | "tableRow"> : (props: TProps) => import("@material-ui/styles").ClassNameMap<"tableCell" | "tableActionsCell" | "tableHeader" | "tableWithExpandedContent" | "tableWithActions" | "cellWithExpandedContent" | "expandMoreCell" | "openChevron" | "expandedRow" | "expandedContentCell" | "expandedContentContainer" | "clickable" | "tableRow">)> & InjectedComponents<"Typography" | "TableActions">) => JSX.Element;
