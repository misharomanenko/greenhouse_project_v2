import React, { FC, PropsWithChildren, ReactNode } from 'react';
import { InjectedComponents } from './componentInjection';
import { Classes } from '../utils/composeStyles';
export declare const makeToastStyles: <TProps extends object>(...styles: (Partial<import("@material-ui/core").StyleRules<"error" | "success" | "snackbar" | "closeButton" | "closeIcon" | "toast" | "errorIcon" | "successIcon", TProps>> | ((theme: import("@material-ui/core").Theme) => Partial<import("@material-ui/core").StyleRules<"error" | "success" | "snackbar" | "closeButton" | "closeIcon" | "toast" | "errorIcon" | "successIcon", TProps>>))[]) => keyof TProps extends never ? (props?: any) => import("@material-ui/styles").ClassNameMap<"error" | "success" | "snackbar" | "closeButton" | "closeIcon" | "toast" | "errorIcon" | "successIcon"> : (props: TProps) => import("@material-ui/styles").ClassNameMap<"error" | "success" | "snackbar" | "closeButton" | "closeIcon" | "toast" | "errorIcon" | "successIcon">;
type ToastType = 'success' | 'error';
type ToastContextType = {
    openToast(options: {
        text: ReactNode;
        type: ToastType;
        openDurationMS?: number;
    }): void;
    closeToast(): void;
};
export declare const ToastContext: React.Context<ToastContextType>;
export declare const useToast: () => ToastContextType;
export type ToastContextProviderCoreProps = PropsWithChildren;
export declare const ToastContextProviderCore: FC<ToastContextProviderCoreProps & Classes<typeof makeToastStyles> & InjectedComponents<'Typography'>>;
export {};
