import React, { MouseEventHandler, ReactNode } from 'react';
import { InjectedComponents } from './componentInjection';
import { OptionItem } from './types';
import { Classes } from '../utils/composeStyles';
export declare const makeSelectStyles: <TProps extends object>(...styles: (Partial<import("@material-ui/core").StyleRules<"select" | "disabled" | "fullWidth" | "readOnlyContainer" | "checkIcon" | "menuPaper" | "selectContainer" | "selectContainerOpen", TProps>> | ((theme: import("@material-ui/core").Theme) => Partial<import("@material-ui/core").StyleRules<"select" | "disabled" | "fullWidth" | "readOnlyContainer" | "checkIcon" | "menuPaper" | "selectContainer" | "selectContainerOpen", TProps>>))[]) => keyof TProps extends never ? (props?: any) => import("@material-ui/styles").ClassNameMap<"select" | "disabled" | "fullWidth" | "readOnlyContainer" | "checkIcon" | "menuPaper" | "selectContainer" | "selectContainerOpen"> : (props: TProps) => import("@material-ui/styles").ClassNameMap<"select" | "disabled" | "fullWidth" | "readOnlyContainer" | "checkIcon" | "menuPaper" | "selectContainer" | "selectContainerOpen">;
type SelectItem = OptionItem & {
    Icon?: ReactNode;
    selected?: boolean;
    onClick?: MouseEventHandler<HTMLLIElement>;
    forceSelected?: boolean;
};
export type SelectCoreProps<U extends string | number | string[] | number[], TSelectItem> = {
    caption?: string;
    disabled?: boolean;
    fullWidth?: boolean;
    id?: string;
    label?: ReactNode;
    menuAnchorHorizontal?: 'left' | 'right' | 'center';
    selectItems: TSelectItem[];
    multiple?: boolean;
    onChange?: (value: U) => void;
    placeholder?: string;
    readOnly?: boolean;
    required?: boolean;
    value?: U | null;
};
export declare const SelectCore: <U extends string | number | string[] | number[], TSelectItem extends SelectItem>({ caption, disabled, fullWidth, id, label, menuAnchorHorizontal, selectItems, multiple, onChange, placeholder, readOnly, required, value, classes, LabelComponent: Label, MenuItemComponent: MenuItem, TypographyComponent: Typography, }: SelectCoreProps<U, TSelectItem> & Classes<(<TProps extends object>(...styles: (Partial<import("@material-ui/core").StyleRules<"select" | "disabled" | "fullWidth" | "readOnlyContainer" | "checkIcon" | "menuPaper" | "selectContainer" | "selectContainerOpen", TProps>> | ((theme: import("@material-ui/core").Theme) => Partial<import("@material-ui/core").StyleRules<"select" | "disabled" | "fullWidth" | "readOnlyContainer" | "checkIcon" | "menuPaper" | "selectContainer" | "selectContainerOpen", TProps>>))[]) => keyof TProps extends never ? (props?: any) => import("@material-ui/styles").ClassNameMap<"select" | "disabled" | "fullWidth" | "readOnlyContainer" | "checkIcon" | "menuPaper" | "selectContainer" | "selectContainerOpen"> : (props: TProps) => import("@material-ui/styles").ClassNameMap<"select" | "disabled" | "fullWidth" | "readOnlyContainer" | "checkIcon" | "menuPaper" | "selectContainer" | "selectContainerOpen">)> & InjectedComponents<"Label" | "Typography"> & {
    MenuItemComponent: React.ComponentType<SelectItem | TSelectItem>;
}) => JSX.Element;
export {};
