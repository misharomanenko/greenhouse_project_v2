/// <reference types="react" />
import { OutlinedInputProps } from '@material-ui/core';
import { WithClasses } from '../utils/composeStyles';
import { InjectedComponents } from './componentInjection';
export declare const makeInputStyles: <TProps extends object>(...styles: (Partial<import("@material-ui/core").StyleRules<"input" | "fullWidth" | "inputContainer" | "multilineContainer" | "readOnlyContainer" | "fileUploadContainer" | "fileUploadHidden", TProps>> | ((theme: import("@material-ui/core").Theme) => Partial<import("@material-ui/core").StyleRules<"input" | "fullWidth" | "inputContainer" | "multilineContainer" | "readOnlyContainer" | "fileUploadContainer" | "fileUploadHidden", TProps>>))[]) => keyof TProps extends never ? (props?: any) => import("@material-ui/styles").ClassNameMap<"input" | "fullWidth" | "inputContainer" | "multilineContainer" | "readOnlyContainer" | "fileUploadContainer" | "fileUploadHidden"> : (props: TProps) => import("@material-ui/styles").ClassNameMap<"input" | "fullWidth" | "inputContainer" | "multilineContainer" | "readOnlyContainer" | "fileUploadContainer" | "fileUploadHidden">;
export type InputCoreProps = {
    caption?: string;
    copyable?: boolean;
    disabled?: boolean;
    error?: string;
    fileUpload?: boolean;
    fullWidth?: boolean;
    id?: string;
    inputProps?: OutlinedInputProps['inputProps'];
    inputRef?: OutlinedInputProps['inputRef'];
    label?: string;
    multiline?: boolean;
    onBlur?: () => void;
    onChange?: (value: string) => void;
    onFocus?: () => void;
    onKeyDown?: OutlinedInputProps['onKeyDown'];
    placeholder?: string;
    readOnly?: boolean;
    readOnlyConcealed?: boolean;
    required?: boolean;
    type?: OutlinedInputProps['type'];
    value?: string;
};
export declare const InputCore: ({ caption, copyable, disabled, error, fileUpload, fullWidth, id, inputProps, inputRef, label, multiline, onBlur, onChange, onFocus, onKeyDown, placeholder, readOnly, readOnlyConcealed, required, type, value, classes, ButtonComponent, CopyableTextComponent: CopyableText, LabelComponent: Label, TypographyComponent: Typography, }: WithClasses<InputCoreProps, typeof makeInputStyles> & InjectedComponents<'Button' | 'CopyableText' | 'Label' | 'Typography'>) => JSX.Element;
