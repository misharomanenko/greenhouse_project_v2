/// <reference types="react" />
import { UseClickToCopyCoreParams, UseClickToCopyCoreReturnType } from '../utils/clickToCopyUtils';
import { ButtonCoreCommonProps } from './Button';
import { CodeCoreProps } from './Code';
import { CopyableTextCoreProps } from './CopyableText';
import { InputCoreProps } from './Input';
import { LabelCoreProps } from './Label';
import { ModalCoreProps } from './Modal';
import { SearchBarCoreProps } from './SearchBar';
import { TableActionCoreProps } from './TableActions';
import { TooltipCoreProps } from './Tooltip';
import { TypographyCoreProps } from './Typography';
/**
 * A map of shared components to their (shared) props. Add new components here
 * so that they may be referenced via dependency injection.
 */
type SharedComponentPropsMap = {
    Button: ButtonCoreCommonProps;
    Code: CodeCoreProps;
    CopyableText: CopyableTextCoreProps;
    Input: InputCoreProps;
    Label: LabelCoreProps;
    Modal: ModalCoreProps;
    SearchBar: SearchBarCoreProps;
    TableActions: TableActionCoreProps;
    Tooltip: TooltipCoreProps;
    Typography: TypographyCoreProps;
};
type SharedHooksMap = {
    useClickToCopy: [[UseClickToCopyCoreParams], UseClickToCopyCoreReturnType];
};
/**
 * Helper type for declaring props to reference other components via dependency
 * injection.
 *
 * @template T The string identifier(s) of the components to reference. To
 * reference multiple components, use a union type.
 *
 * @example
 * ```tsx
 * const MyComponent = ({ ButtonComponent, ...props }: MyComponentProps & InjectedComponents<'Button'>) => {
 *   return <ButtonComponent>...</ButtonComponent>;
 * };
 * ```
 */
export type InjectedComponents<T extends keyof SharedComponentPropsMap | keyof SharedHooksMap> = {
    [K in T as K extends keyof SharedComponentPropsMap ? `${K}Component` : K]: K extends keyof SharedComponentPropsMap ? React.ComponentType<SharedComponentPropsMap[K]> : K extends keyof SharedHooksMap ? (...params: SharedHooksMap[K][0]) => SharedHooksMap[K][1] : never;
};
export {};
