import { GoogleOneTapClient } from '../../oneTap/OneTapClient';
import { INetworkClient, IPKCEManager } from '@stytch/core/src';
import { CredentialResponse } from 'google-one-tap';
type OneTapNotLoadedReason = 'oauth_config_not_found' | 'default_provider_not_allowed' | string;
type OneTapLoadResult = {
    success: true;
    client: GoogleOneTapClient;
} | {
    success: false;
    reason: OneTapNotLoadedReason;
};
type DynamicConfig = Promise<{
    pkceRequiredForOAuth: boolean;
}>;
export declare class B2BOneTapProvider {
    private _networkClient;
    private _pkceManager;
    private _config;
    private googleClientID?;
    constructor(_networkClient: INetworkClient, _pkceManager: IPKCEManager, _config?: DynamicConfig);
    private fetchGoogleStart;
    private submitGoogleOneTapTokenDiscovery;
    private submitGoogleOneTapToken;
    createOneTapClient(): Promise<OneTapLoadResult>;
    createOnDiscoverySuccessHandler: ({ discoveryRedirectUrl, onSuccess, onError, }: {
        discoveryRedirectUrl?: string | undefined;
        onSuccess: (redirect_url: string) => void;
        onError?: ((error: Error) => void) | undefined;
    }) => (response: CredentialResponse) => Promise<void>;
    createOnSuccessHandler: ({ organizationId, signupRedirectUrl, loginRedirectUrl, onSuccess, onError, }: {
        organizationId: string;
        signupRedirectUrl?: string | undefined;
        loginRedirectUrl?: string | undefined;
        onSuccess: (redirect_url: string) => void;
        onError?: ((error: Error) => void) | undefined;
    }) => (response: CredentialResponse) => Promise<void>;
    RedirectOnSuccess: (redirect_url: string) => void;
}
export {};
