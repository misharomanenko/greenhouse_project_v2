import { OneTapRenderResult } from '../oneTap/OneTapClient';
import { IHeadlessB2BOAuthClient } from '@stytch/core/public';
import { HeadlessB2BOAuthClient as BaseHeadlessB2BOAuthClient, INetworkClient, IPKCEManager, IB2BSubscriptionService } from '@stytch/core';
import { B2BOneTapProvider } from './oneTap/B2BOneTapProvider';
import { IDFPProtectedAuthProvider } from '@stytch/core/src';
export type B2BGoogleOneTapDiscoveryOAuthOptions = {
    /**
     * The URL that Stytch redirects to after the Google One Tap discovery flow is completed.
     * This should be a URL that verifies the request by querying Stytch's /oauth/discovery/authenticate endpoint.
     * If this value is not passed, the default discovery redirect URL that you set in your Dashboard is used.
     * If you have not set a default discovery redirect URL, an error is returned.
     */
    discovery_redirect_url?: string;
};
export type B2BGoogleOneTapOAuthOptions = {
    /**
     * The ID of the organization that the end user is logging in to.
     */
    organization_id: string;
    /**
     * The URL that Stytch redirects to after the Google One Tap flow is completed for a member who already exists.
     * This should be a URL that verifies the request by querying Stytch's /oauth/authenticate endpoint.
     * If this value is not passed, the default login redirect URL that you set in your Dashboard is used.
     * If you have not set a default login redirect URL, an error is returned.
     */
    login_redirect_url?: string;
    /**
     * The URL that Stytch redirects to after the Google One Tap flow is completed for a member who does not yet exist.
     * This should be a URL that verifies the request by querying Stytch's /oauth/authenticate endpoint.
     * If this value is not passed, the default signup redirect URL that you set in your Dashboard is used.
     * If you have not set a default signup redirect URL, an error is returned.
     */
    signup_redirect_url?: string;
};
interface IB2BGoogleOneTapOAuthProvider {
    discovery: {
        /**
         * Start a discovery OAuth flow by showing the Google one tap prompt in the top right corner of the user's browser.
         * You can configure this to be started by a user action (i.e Button click) or on load/render.
         * @example
         * const showGoogleOneTap = useCallback(()=> {
         *   stytch.oauth.googleOneTap.discovery.start({
         *     discovery_redirect_url: 'https://example.com/oauth/callback',
         *   })
         * }, [stytch]);
         * return (
         *   <Button onClick={showGoogleOneTap}> Show Google one tap </Button>
         * );
         *
         * @param options - A {@link B2BGoogleOneTapDiscoveryOAuthOptions} object
         *
         * @returns A {@link OneTapRenderResult} object. The result object includes if the one-tap prompt
         * was rendered, and a reason if it couldn't be rendered.
         *
         * @throws An Error if the one tap client cannot be created.
         */
        start(options?: B2BGoogleOneTapDiscoveryOAuthOptions): Promise<OneTapRenderResult>;
    };
    /**
     * Start an OAuth flow by showing the Google one tap prompt in the top right corner of the user's browser.
     * You can configure this to be started by a user action (i.e Button click) or on load/render.
     * @example
     * const showGoogleOneTap = useCallback(()=> {
     *   stytch.oauth.googleOneTap.start({
     *     organization_id: 'organization-test-123',
     *   })
     * }, [stytch]);
     * return (
     *   <Button onClick={showGoogleOneTap}> Show Google one tap </Button>
     * );
     *
     * @param options - A {@link B2BGoogleOneTapOAuthOptions} object
     *
     * @returns A {@link OneTapRenderResult} object. The result object includes if the one-tap prompt
     * was rendered, and a reason if it couldn't be rendered.
     *
     * @throws An Error if the one tap client cannot be created.
     */
    start(options?: B2BGoogleOneTapOAuthOptions): Promise<OneTapRenderResult>;
}
type DynamicConfig = Promise<{
    cnameDomain: null | string;
    pkceRequiredForOAuth: boolean;
}>;
type Config = {
    publicToken: string;
    testAPIURL: string;
    liveAPIURL: string;
};
export interface IWebB2BOAuthClient extends IHeadlessB2BOAuthClient {
    googleOneTap: IB2BGoogleOneTapOAuthProvider;
}
export declare class HeadlessB2BOAuthClient extends BaseHeadlessB2BOAuthClient implements IWebB2BOAuthClient {
    private _oneTap;
    constructor(_networkClient: INetworkClient, _subscriptionService: IB2BSubscriptionService, _pkceManager: IPKCEManager, _dynamicConfig: DynamicConfig, _config: Config, _dfpProtectedAuth: IDFPProtectedAuthProvider | undefined, _oneTap: B2BOneTapProvider);
    private startOneTapDiscovery;
    private startOneTap;
    googleOneTap: IB2BGoogleOneTapOAuthProvider;
}
export {};
