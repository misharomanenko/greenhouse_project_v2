'use strict';

function _typeof2(o) { "@babel/helpers - typeof"; return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof2(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey2(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey2(t) { var i = _toPrimitive2(t, "string"); return "symbol" == _typeof2(i) ? i : String(i); }
function _toPrimitive2(t, r) { if ("object" != _typeof2(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof2(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray2(arr, i) { return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2(); }
function _nonIterableRest2() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen); }
function _arrayLikeToArray2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit2(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles2(arr) { if (Array.isArray(arr)) return arr; }
function _typeof$1(o) {
  "@babel/helpers - typeof";

  return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof$1(o);
}
function _createClass$1(Constructor, protoProps, staticProps) {
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _classCallCheck$1(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _callSuper$1(t, o, e) {
  return o = _getPrototypeOf$1(o), _possibleConstructorReturn$1(t, _isNativeReflectConstruct$1() ? Reflect.construct(o, e || [], _getPrototypeOf$1(t).constructor) : o.apply(t, e));
}
function _possibleConstructorReturn$1(self, call) {
  if (call && (_typeof$1(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized$1(self);
}
function _assertThisInitialized$1(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _inherits$1(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf$1(subClass, superClass);
}
function _wrapNativeSuper$1(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;
  _wrapNativeSuper$1 = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction$1(Class)) return Class;
    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);
      _cache.set(Class, Wrapper);
    }
    function Wrapper() {
      return _construct$1(Class, arguments, _getPrototypeOf$1(this).constructor);
    }
    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf$1(Wrapper, Class);
  };
  return _wrapNativeSuper$1(Class);
}
function _construct$1(t, e, r) {
  if (_isNativeReflectConstruct$1()) return Reflect.construct.apply(null, arguments);
  var o = [null];
  o.push.apply(o, e);
  var p = new (t.bind.apply(t, o))();
  return r && _setPrototypeOf$1(p, r.prototype), p;
}
function _isNativeReflectConstruct$1() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct$1 = function _isNativeReflectConstruct() {
    return !!t;
  })();
}
function _isNativeFunction$1(fn) {
  try {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  } catch (e) {
    return typeof fn === "function";
  }
}
function _setPrototypeOf$1(o, p) {
  _setPrototypeOf$1 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf$1(o, p);
}
function _getPrototypeOf$1(o) {
  _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf$1(o);
}
exports.Products = void 0;
(function (Products) {
  Products["emailMagicLinks"] = "emailMagicLinks";
  Products["oauth"] = "oauth";
  Products["otp"] = "otp";
  Products["crypto"] = "crypto";
  Products["passwords"] = "passwords";
  Products["passkeys"] = "passkeys";
})(exports.Products || (exports.Products = {}));
exports.OAuthProviders = void 0;
(function (OAuthProviders) {
  OAuthProviders["Google"] = "google";
  OAuthProviders["Microsoft"] = "microsoft";
  OAuthProviders["Apple"] = "apple";
  OAuthProviders["Github"] = "github";
  OAuthProviders["GitLab"] = "gitlab";
  OAuthProviders["Facebook"] = "facebook";
  OAuthProviders["Discord"] = "discord";
  OAuthProviders["Salesforce"] = "salesforce";
  OAuthProviders["Slack"] = "slack";
  OAuthProviders["Amazon"] = "amazon";
  OAuthProviders["Bitbucket"] = "bitbucket";
  OAuthProviders["LinkedIn"] = "linkedin";
  OAuthProviders["Coinbase"] = "coinbase";
  OAuthProviders["Twitch"] = "twitch";
  OAuthProviders["Twitter"] = "twitter";
  OAuthProviders["TikTok"] = "tiktok";
  OAuthProviders["Snapchat"] = "snapchat";
  OAuthProviders["Figma"] = "figma";
  OAuthProviders["Yahoo"] = "yahoo";
})(exports.OAuthProviders || (exports.OAuthProviders = {}));
exports.Wallets = void 0;
(function (Wallets) {
  Wallets["Vessel"] = "Vessel";
  Wallets["Phantom"] = "Phantom";
  Wallets["Metamask"] = "Metamask";
  Wallets["Coinbase"] = "Coinbase";
  Wallets["Binance"] = "Binance";
  Wallets["GenericEthereumWallet"] = "Other Ethereum Wallet";
  Wallets["GenericSolanaWallet"] = "Other Solana Wallet";
})(exports.Wallets || (exports.Wallets = {}));
exports.OneTapPositions = void 0;
(function (OneTapPositions) {
  OneTapPositions["embedded"] = "embedded";
  OneTapPositions["floating"] = "floating";
  OneTapPositions["embeddedOnly"] = "embeddedOnly";
  OneTapPositions["floatingOrEmbedded"] = "floatingOrEmbedded";
  OneTapPositions["forceLegacyEmbedded"] = "forceLegacyEmbedded";
})(exports.OneTapPositions || (exports.OneTapPositions = {}));
exports.OTPMethods = void 0;
(function (OTPMethods) {
  OTPMethods["SMS"] = "sms";
  OTPMethods["WhatsApp"] = "whatsapp";
  OTPMethods["Email"] = "email";
})(exports.OTPMethods || (exports.OTPMethods = {}));
exports.StytchEventType = void 0;
(function (StytchEventType) {
  StytchEventType["MagicLinkLoginOrCreateEvent"] = "MAGIC_LINK_LOGIN_OR_CREATE";
  StytchEventType["OTPsLoginOrCreateEvent"] = "OTP_LOGIN_OR_CREATE";
  StytchEventType["OTPsAuthenticate"] = "OTP_AUTHENTICATE";
  StytchEventType["CryptoWalletAuthenticateStart"] = "CRYPTO_WALLET_AUTHENTICATE_START";
  StytchEventType["CryptoWalletAuthenticate"] = "CRYPTO_WALLET_AUTHENTICATE";
  StytchEventType["PasswordCreate"] = "PASSWORD_CREATE";
  StytchEventType["PasswordAuthenticate"] = "PASSWORD_AUTHENTICATE";
  StytchEventType["PasswordResetByEmailStart"] = "PASSWORD_RESET_BY_EMAIL_START";
  StytchEventType["PasswordResetByEmail"] = "PASSWORD_RESET_BY_EMAIL";
  StytchEventType["PasskeyRegister"] = "PASSKEY_REGISTER";
  StytchEventType["PasskeyAuthenticate"] = "PASSKEY_AUTHENTICATE";
  StytchEventType["PasskeySkip"] = "PASSKEY_SKIP";
  StytchEventType["PasskeyDone"] = "PASSKEY_DONE";
  StytchEventType["B2BMagicLinkEmailLoginOrSignup"] = "B2B_MAGIC_LINK_EMAIL_LOGIN_OR_SIGNUP";
  StytchEventType["B2BMagicLinkAuthenticate"] = "B2B_MAGIC_LINK_AUTHENTICATE";
  StytchEventType["B2BMagicLinkEmailDiscoverySend"] = "B2B_MAGIC_LINK_EMAIL_DISCOVERY_SEND";
  StytchEventType["B2BMagicLinkDiscoveryAuthenticate"] = "B2B_MAGIC_LINK_DISCOVERY_AUTHENTICATE";
  StytchEventType["B2BSSOStart"] = "B2B_SSO_START";
  StytchEventType["B2BSSOAuthenticate"] = "B2B_SSO_AUTHENTICATE";
  StytchEventType["B2BOAuthAuthenticate"] = "B2B_OAUTH_AUTHENTICATE";
  StytchEventType["B2BOAuthDiscoveryAuthenticate"] = "B2B_OAUTH_DISCOVERY_AUTHENTICATE";
  StytchEventType["B2BDiscoveryOrganizationsCreate"] = "B2B_DISCOVERY_ORGANIZATIONS_CREATE";
  StytchEventType["B2BDiscoveryIntermediateSessionExchange"] = "B2B_DISCOVERY_INTERMEDIATE_SESSION_EXCHANGE";
  StytchEventType["B2BPasswordAuthenticate"] = "B2B_PASSWORD_AUTHENTICATE";
  StytchEventType["B2BPasswordResetByEmailStart"] = "B2B_PASSWORD_RESET_BY_EMAIL_START";
  StytchEventType["B2BPasswordResetByEmail"] = "B2B_PASSWORD_RESET_BY_EMAIL";
  StytchEventType["B2BPasswordResetBySession"] = "B2B_PASSWORD_RESET_BY_SESSION";
  StytchEventType["B2BSMSOTPSend"] = "B2B_SMS_OTP_SEND";
  StytchEventType["B2BSMSOTPAuthenticate"] = "B2B_SMS_OTP_AUTHENTICATE";
  StytchEventType["B2BTOTPCreate"] = "B2B_TOTP_CREATE";
  StytchEventType["B2BTOTPAuthenticate"] = "B2B_TOTP_AUTHENTICATE";
  StytchEventType["B2BRecoveryCodesRecover"] = "B2B_RECOVERY_CODES_RECOVER";
})(exports.StytchEventType || (exports.StytchEventType = {}));
exports.RNUIProducts = void 0;
(function (RNUIProducts) {
  RNUIProducts[RNUIProducts["emailMagicLinks"] = 0] = "emailMagicLinks";
  RNUIProducts[RNUIProducts["oauth"] = 1] = "oauth";
  RNUIProducts[RNUIProducts["otp"] = 2] = "otp";
  RNUIProducts[RNUIProducts["passwords"] = 3] = "passwords";
})(exports.RNUIProducts || (exports.RNUIProducts = {}));
var SDKAPIUnreachableError = /*#__PURE__*/function (_Error) {
  _inherits$1(SDKAPIUnreachableError, _Error);
  function SDKAPIUnreachableError(message, details) {
    var _this;
    _classCallCheck$1(this, SDKAPIUnreachableError);
    _this = _callSuper$1(this, SDKAPIUnreachableError, [message + '\n' + details]);
    _this.message = message + '\n' + details;
    _this.name = 'SDKAPIUnreachableError';
    _this.details = details;
    Object.setPrototypeOf(_assertThisInitialized$1(_this), SDKAPIUnreachableError.prototype);
    return _this;
  }
  return _createClass$1(SDKAPIUnreachableError);
}( /*#__PURE__*/_wrapNativeSuper$1(Error));
var StytchSDKUsageError = /*#__PURE__*/function (_Error2) {
  _inherits$1(StytchSDKUsageError, _Error2);
  function StytchSDKUsageError(methodName, message) {
    var _this2;
    _classCallCheck$1(this, StytchSDKUsageError);
    _this2 = _callSuper$1(this, StytchSDKUsageError);
    _this2.name = 'StytchSDKUsageError';
    _this2.message = "Invalid call to ".concat(methodName, "\n") + message;
    return _this2;
  }
  return _createClass$1(StytchSDKUsageError);
}( /*#__PURE__*/_wrapNativeSuper$1(Error));
var StytchSDKSchemaError = /*#__PURE__*/function (_Error3) {
  _inherits$1(StytchSDKSchemaError, _Error3);
  function StytchSDKSchemaError(schemaError) {
    var _this3;
    _classCallCheck$1(this, StytchSDKSchemaError);
    var _a;
    _this3 = _callSuper$1(this, StytchSDKSchemaError);
    _this3.name = 'StytchSDKSchemaError';
    var messages = (_a = schemaError.body) === null || _a === void 0 ? void 0 : _a.map(function (err) {
      return "".concat(err.dataPath, ": ").concat(err.message);
    }).join('\n');
    _this3.message = "[400] Request does not match expected schema\n".concat(messages);
    return _this3;
  }
  return _createClass$1(StytchSDKSchemaError);
}( /*#__PURE__*/_wrapNativeSuper$1(Error));
var StytchSDKAPIError = /*#__PURE__*/function (_Error4) {
  _inherits$1(StytchSDKAPIError, _Error4);
  function StytchSDKAPIError(details) {
    var _this4;
    _classCallCheck$1(this, StytchSDKAPIError);
    _this4 = _callSuper$1(this, StytchSDKAPIError);
    _this4.name = 'StytchSDKAPIError';
    var status_code = details.status_code,
      error_type = details.error_type,
      error_message = details.error_message,
      error_url = details.error_url,
      request_id = details.request_id;
    _this4.error_type = error_type;
    _this4.error_message = error_message;
    _this4.error_url = error_url;
    _this4.request_id = request_id;
    _this4.status_code = status_code;
    _this4.message = "[".concat(status_code, "] ").concat(error_type, "\n") + "".concat(error_message, "\n") + "See ".concat(error_url, " for more information.\n") + (request_id ? "request_id: ".concat(request_id, "\n") : '');
    return _this4;
  }
  return _createClass$1(StytchSDKAPIError);
}( /*#__PURE__*/_wrapNativeSuper$1(Error));
var UNRECOVERABLE_ERROR_TYPES = ['unauthorized_credentials', 'user_unauthenticated', 'invalid_secret_authentication', 'session_not_found'];
var StytchError = /*#__PURE__*/function (_Error5) {
  _inherits$1(StytchError, _Error5);
  function StytchError(name, message) {
    var _this5;
    _classCallCheck$1(this, StytchError);
    _this5 = _callSuper$1(this, StytchError, [message]);
    _this5.name = name;
    return _this5;
  }
  return _createClass$1(StytchError);
}( /*#__PURE__*/_wrapNativeSuper$1(Error));
var StytchAPIUnreachableError = /*#__PURE__*/function (_StytchError) {
  _inherits$1(StytchAPIUnreachableError, _StytchError);
  function StytchAPIUnreachableError(details) {
    var _this6;
    _classCallCheck$1(this, StytchAPIUnreachableError);
    _this6 = _callSuper$1(this, StytchAPIUnreachableError, ['StytchAPIUnreachableError', details]);
    Object.setPrototypeOf(_assertThisInitialized$1(_this6), StytchAPIUnreachableError.prototype);
    return _this6;
  }
  return _createClass$1(StytchAPIUnreachableError);
}(StytchError);
var StytchAPISchemaError = /*#__PURE__*/function (_StytchError2) {
  _inherits$1(StytchAPISchemaError, _StytchError2);
  function StytchAPISchemaError(schemaError) {
    _classCallCheck$1(this, StytchAPISchemaError);
    var _a;
    var messages = (_a = schemaError.body) === null || _a === void 0 ? void 0 : _a.map(function (err) {
      return "".concat(err.dataPath, ": ").concat(err.message);
    }).join('\n');
    return _callSuper$1(this, StytchAPISchemaError, ['StytchAPISchemaError', "Request does not match expected schema\n".concat(messages)]);
  }
  return _createClass$1(StytchAPISchemaError);
}(StytchError);
var StytchAPIError = /*#__PURE__*/function (_StytchError3) {
  _inherits$1(StytchAPIError, _StytchError3);
  function StytchAPIError(details) {
    var _this7;
    _classCallCheck$1(this, StytchAPIError);
    var status_code = details.status_code,
      error_type = details.error_type,
      error_message = details.error_message,
      error_url = details.error_url,
      request_id = details.request_id;
    _this7 = _callSuper$1(this, StytchAPIError, ['StytchAPIError', "[".concat(status_code, "] ").concat(error_type, "\n") + "".concat(error_message, "\n") + "See ".concat(error_url, " for more information.\n") + (request_id ? "request_id: ".concat(request_id, "\n") : '')]);
    _this7.error_type = error_type;
    _this7.error_message = error_message;
    _this7.error_url = error_url;
    _this7.request_id = request_id;
    _this7.status_code = status_code;
    return _this7;
  }
  return _createClass$1(StytchAPIError);
}(StytchError);
var StytchSDKError = /*#__PURE__*/function (_StytchError4) {
  _inherits$1(StytchSDKError, _StytchError4);
  function StytchSDKError(name, description, options) {
    var _this8;
    _classCallCheck$1(this, StytchSDKError);
    _this8 = _callSuper$1(this, StytchSDKError, [name, description]);
    _this8.options = options;
    return _this8;
  }
  return _createClass$1(StytchSDKError);
}(StytchError);
var NoCurrentSessionError = /*#__PURE__*/function (_StytchSDKError) {
  _inherits$1(NoCurrentSessionError, _StytchSDKError);
  function NoCurrentSessionError() {
    _classCallCheck$1(this, NoCurrentSessionError);
    return _callSuper$1(this, NoCurrentSessionError, ['NoCurrentSessionError', 'There is no session currently available. Make sure the user is authenticated with a valid session.']);
  }
  return _createClass$1(NoCurrentSessionError);
}(StytchSDKError);
var InternalError = /*#__PURE__*/function (_StytchSDKError2) {
  _inherits$1(InternalError, _StytchSDKError2);
  function InternalError(message) {
    _classCallCheck$1(this, InternalError);
    return _callSuper$1(this, InternalError, ['InternalError', message ? message : 'An internal error has occurred. Please contact Stytch if this occurs.']);
  }
  return _createClass$1(InternalError);
}(StytchSDKError);
var NoBiometricsRegistrationError = /*#__PURE__*/function (_StytchSDKError3) {
  _inherits$1(NoBiometricsRegistrationError, _StytchSDKError3);
  function NoBiometricsRegistrationError() {
    _classCallCheck$1(this, NoBiometricsRegistrationError);
    return _callSuper$1(this, NoBiometricsRegistrationError, ['NoBiometricsRegistrationError', 'There is no biometric registration available. Authenticate with another method and add a new biometric registration first.']);
  }
  return _createClass$1(NoBiometricsRegistrationError);
}(StytchSDKError);
var BiometricsUnavailableError = /*#__PURE__*/function (_StytchSDKError4) {
  _inherits$1(BiometricsUnavailableError, _StytchSDKError4);
  function BiometricsUnavailableError() {
    _classCallCheck$1(this, BiometricsUnavailableError);
    return _callSuper$1(this, BiometricsUnavailableError, ['BiometricsUnavailableError', 'Biometrics is not available on the device.']);
  }
  return _createClass$1(BiometricsUnavailableError);
}(StytchSDKError);
var KeyInvalidatedError = /*#__PURE__*/function (_StytchSDKError5) {
  _inherits$1(KeyInvalidatedError, _StytchSDKError5);
  function KeyInvalidatedError() {
    _classCallCheck$1(this, KeyInvalidatedError);
    return _callSuper$1(this, KeyInvalidatedError, ['KeyInvalidatedError', 'The biometrics enrollment on the device has changed.']);
  }
  return _createClass$1(KeyInvalidatedError);
}(StytchSDKError);
var KeystoreUnavailableError = /*#__PURE__*/function (_StytchSDKError6) {
  _inherits$1(KeystoreUnavailableError, _StytchSDKError6);
  function KeystoreUnavailableError() {
    _classCallCheck$1(this, KeystoreUnavailableError);
    return _callSuper$1(this, KeystoreUnavailableError, ['KeystoreUnavailableError', 'The Android keystore is unavailable on the device. Consider setting allowFallbackToCleartext to true.']);
  }
  return _createClass$1(KeystoreUnavailableError);
}(StytchSDKError);
var NoBiometricsEnrolledError = /*#__PURE__*/function (_StytchSDKError7) {
  _inherits$1(NoBiometricsEnrolledError, _StytchSDKError7);
  function NoBiometricsEnrolledError() {
    _classCallCheck$1(this, NoBiometricsEnrolledError);
    return _callSuper$1(this, NoBiometricsEnrolledError, ['NoBiometricsEnrolledError', 'There is no biometric factor enrolled on the device. Add a biometric factor in the device settings.']);
  }
  return _createClass$1(NoBiometricsEnrolledError);
}(StytchSDKError);
var UserCancellationError = /*#__PURE__*/function (_StytchSDKError8) {
  _inherits$1(UserCancellationError, _StytchSDKError8);
  function UserCancellationError() {
    _classCallCheck$1(this, UserCancellationError);
    return _callSuper$1(this, UserCancellationError, ['UserCancellationError', 'The user canceled the prompt. Ask the user to try again.']);
  }
  return _createClass$1(UserCancellationError);
}(StytchSDKError);
var UserLockedOutError = /*#__PURE__*/function (_StytchSDKError9) {
  _inherits$1(UserLockedOutError, _StytchSDKError9);
  function UserLockedOutError() {
    _classCallCheck$1(this, UserLockedOutError);
    return _callSuper$1(this, UserLockedOutError, ['UserLockedOutError', 'The user has been locked out due to too many failed attempts. Ask the user to try again later.']);
  }
  return _createClass$1(UserLockedOutError);
}(StytchSDKError);
var DeviceCredentialsNotAllowedError = /*#__PURE__*/function (_StytchSDKError10) {
  _inherits$1(DeviceCredentialsNotAllowedError, _StytchSDKError10);
  function DeviceCredentialsNotAllowedError() {
    _classCallCheck$1(this, DeviceCredentialsNotAllowedError);
    return _callSuper$1(this, DeviceCredentialsNotAllowedError, ['DeviceCredentialsNotAllowedError', 'The device credentials allowment is mismatched. Change the allowDeviceCredentials parameter to be the same in both the register and authenticate methods.']);
  }
  return _createClass$1(DeviceCredentialsNotAllowedError);
}(StytchSDKError);
var MissingGoogleClientIDError = /*#__PURE__*/function (_StytchSDKError11) {
  _inherits$1(MissingGoogleClientIDError, _StytchSDKError11);
  function MissingGoogleClientIDError() {
    _classCallCheck$1(this, MissingGoogleClientIDError);
    return _callSuper$1(this, MissingGoogleClientIDError, ['MissingGoogleClientIDError', 'No Google client ID was found in the project.']);
  }
  return _createClass$1(MissingGoogleClientIDError);
}(StytchSDKError);
var MissingPKCEError = /*#__PURE__*/function (_StytchSDKError12) {
  _inherits$1(MissingPKCEError, _StytchSDKError12);
  function MissingPKCEError() {
    _classCallCheck$1(this, MissingPKCEError);
    return _callSuper$1(this, MissingPKCEError, ['MissingPKCEError', 'Make sure this flow is completed on the same device on which it was started.']);
  }
  return _createClass$1(MissingPKCEError);
}(StytchSDKError);
var MissingAuthorizationCredentialIDTokenError = /*#__PURE__*/function (_StytchSDKError13) {
  _inherits$1(MissingAuthorizationCredentialIDTokenError, _StytchSDKError13);
  function MissingAuthorizationCredentialIDTokenError() {
    _classCallCheck$1(this, MissingAuthorizationCredentialIDTokenError);
    return _callSuper$1(this, MissingAuthorizationCredentialIDTokenError, ['MissingAuthorizationCredentialIDTokenError', 'The authorization credential is missing an ID token.']);
  }
  return _createClass$1(MissingAuthorizationCredentialIDTokenError);
}(StytchSDKError);
var InvalidAuthorizationCredentialError = /*#__PURE__*/function (_StytchSDKError14) {
  _inherits$1(InvalidAuthorizationCredentialError, _StytchSDKError14);
  function InvalidAuthorizationCredentialError() {
    _classCallCheck$1(this, InvalidAuthorizationCredentialError);
    return _callSuper$1(this, InvalidAuthorizationCredentialError, ['InvalidAuthorizationCredentialError', 'The authorization credential is invalid. Verify that OAuth is set up correctly in the developer console, and call the start flow method.']);
  }
  return _createClass$1(InvalidAuthorizationCredentialError);
}(StytchSDKError);
var NoCredentialsPresentError = /*#__PURE__*/function (_StytchSDKError15) {
  _inherits$1(NoCredentialsPresentError, _StytchSDKError15);
  function NoCredentialsPresentError() {
    _classCallCheck$1(this, NoCredentialsPresentError);
    return _callSuper$1(this, NoCredentialsPresentError, ['NoCredentialsPresentError', 'The user did not provide credentials for a Google OneTap attempt']);
  }
  return _createClass$1(NoCredentialsPresentError);
}(StytchSDKError);
var MissingPublicKeyError = /*#__PURE__*/function (_StytchSDKError16) {
  _inherits$1(MissingPublicKeyError, _StytchSDKError16);
  function MissingPublicKeyError() {
    _classCallCheck$1(this, MissingPublicKeyError);
    return _callSuper$1(this, MissingPublicKeyError, ['MissingPublicKeyError', 'Failed to retrieve the public key. Add a new biometric registration.']);
  }
  return _createClass$1(MissingPublicKeyError);
}(StytchSDKError);
var ChallengeSigningFailedError = /*#__PURE__*/function (_StytchSDKError17) {
  _inherits$1(ChallengeSigningFailedError, _StytchSDKError17);
  function ChallengeSigningFailedError() {
    _classCallCheck$1(this, ChallengeSigningFailedError);
    return _callSuper$1(this, ChallengeSigningFailedError, ['ChallengeSigningFailedError', 'Failed to sign the challenge with the key.']);
  }
  return _createClass$1(ChallengeSigningFailedError);
}(StytchSDKError);
var SDKNotConfiguredError = /*#__PURE__*/function (_StytchSDKError18) {
  _inherits$1(SDKNotConfiguredError, _StytchSDKError18);
  function SDKNotConfiguredError() {
    _classCallCheck$1(this, SDKNotConfiguredError);
    return _callSuper$1(this, SDKNotConfiguredError, ['SDKNotConfiguredError', 'Stytch client is not confiured. You must call the configure method before using the SDK']);
  }
  return _createClass$1(SDKNotConfiguredError);
}(StytchSDKError);
var FailedCodeChallengeError = /*#__PURE__*/function (_StytchSDKError19) {
  _inherits$1(FailedCodeChallengeError, _StytchSDKError19);
  function FailedCodeChallengeError() {
    _classCallCheck$1(this, FailedCodeChallengeError);
    return _callSuper$1(this, FailedCodeChallengeError, ['FailedCodeChallengeError', 'Failed to create a code challenge']);
  }
  return _createClass$1(FailedCodeChallengeError);
}(StytchSDKError);
var PasskeysUnsupportedError = /*#__PURE__*/function (_StytchSDKError20) {
  _inherits$1(PasskeysUnsupportedError, _StytchSDKError20);
  function PasskeysUnsupportedError() {
    _classCallCheck$1(this, PasskeysUnsupportedError);
    return _callSuper$1(this, PasskeysUnsupportedError, ['PasskeysUnsupportedError', 'Passkeys are not supported on this device']);
  }
  return _createClass$1(PasskeysUnsupportedError);
}(StytchSDKError);
var FailedToDecryptDataError = /*#__PURE__*/function (_StytchSDKError21) {
  _inherits$1(FailedToDecryptDataError, _StytchSDKError21);
  function FailedToDecryptDataError() {
    _classCallCheck$1(this, FailedToDecryptDataError);
    return _callSuper$1(this, FailedToDecryptDataError, ['FailedToDecryptDataError', 'Failed to decrypt user data']);
  }
  return _createClass$1(FailedToDecryptDataError);
}(StytchSDKError);
var BiometricsFailedError = /*#__PURE__*/function (_StytchSDKError22) {
  _inherits$1(BiometricsFailedError, _StytchSDKError22);
  function BiometricsFailedError() {
    _classCallCheck$1(this, BiometricsFailedError);
    return _callSuper$1(this, BiometricsFailedError, ['BiometricsFailedError', 'Biometric authentication failed']);
  }
  return _createClass$1(BiometricsFailedError);
}(StytchSDKError);
var InvalidStartUrlError = /*#__PURE__*/function (_StytchSDKError23) {
  _inherits$1(InvalidStartUrlError, _StytchSDKError23);
  function InvalidStartUrlError() {
    _classCallCheck$1(this, InvalidStartUrlError);
    return _callSuper$1(this, InvalidStartUrlError, ['InvalidStartUrlError', 'The start URL was invalid or improperly formatted.']);
  }
  return _createClass$1(InvalidStartUrlError);
}(StytchSDKError);
var InvalidRedirectSchemeError = /*#__PURE__*/function (_StytchSDKError24) {
  _inherits$1(InvalidRedirectSchemeError, _StytchSDKError24);
  function InvalidRedirectSchemeError() {
    _classCallCheck$1(this, InvalidRedirectSchemeError);
    return _callSuper$1(this, InvalidRedirectSchemeError, ['InvalidRedirectSchemeError', 'The scheme from the given redirect urls was invalid. Possible reasons include: nil scheme, non-custom scheme (using http or https), or differing schemes for login/signup urls.']);
  }
  return _createClass$1(InvalidRedirectSchemeError);
}(StytchSDKError);
var MissingUrlError = /*#__PURE__*/function (_StytchSDKError25) {
  _inherits$1(MissingUrlError, _StytchSDKError25);
  function MissingUrlError() {
    _classCallCheck$1(this, MissingUrlError);
    return _callSuper$1(this, MissingUrlError, ['MissingUrlError', 'The underlying web authentication service failed to return a URL.']);
  }
  return _createClass$1(MissingUrlError);
}(StytchSDKError);
var InvalidCredentialTypeError = /*#__PURE__*/function (_StytchSDKError26) {
  _inherits$1(InvalidCredentialTypeError, _StytchSDKError26);
  function InvalidCredentialTypeError() {
    _classCallCheck$1(this, InvalidCredentialTypeError);
    return _callSuper$1(this, InvalidCredentialTypeError, ['InvalidCredentialTypeError', 'The public key credential type was not of the expected type.']);
  }
  return _createClass$1(InvalidCredentialTypeError);
}(StytchSDKError);
var MissingAttestationObjectError = /*#__PURE__*/function (_StytchSDKError27) {
  _inherits$1(MissingAttestationObjectError, _StytchSDKError27);
  function MissingAttestationObjectError() {
    _classCallCheck$1(this, MissingAttestationObjectError);
    return _callSuper$1(this, MissingAttestationObjectError, ['MissingAttestationObjectError', 'The public key credential is missing the attestation object.']);
  }
  return _createClass$1(MissingAttestationObjectError);
}(StytchSDKError);
var JSONDataNotConvertibleToStringError = /*#__PURE__*/function (_StytchSDKError28) {
  _inherits$1(JSONDataNotConvertibleToStringError, _StytchSDKError28);
  function JSONDataNotConvertibleToStringError() {
    _classCallCheck$1(this, JSONDataNotConvertibleToStringError);
    return _callSuper$1(this, JSONDataNotConvertibleToStringError, ['JSONDataNotConvertibleToStringError', 'JSON data unable to be converted to String type.']);
  }
  return _createClass$1(JSONDataNotConvertibleToStringError);
}(StytchSDKError);
var RandomNumberGenerationFailed = /*#__PURE__*/function (_StytchSDKError29) {
  _inherits$1(RandomNumberGenerationFailed, _StytchSDKError29);
  function RandomNumberGenerationFailed() {
    _classCallCheck$1(this, RandomNumberGenerationFailed);
    return _callSuper$1(this, RandomNumberGenerationFailed, ['RandomNumberGenerationFailed', 'Random number generation failed']);
  }
  return _createClass$1(RandomNumberGenerationFailed);
}(StytchSDKError);
var PasskeysInvalidEncoding = /*#__PURE__*/function (_StytchSDKError30) {
  _inherits$1(PasskeysInvalidEncoding, _StytchSDKError30);
  function PasskeysInvalidEncoding() {
    _classCallCheck$1(this, PasskeysInvalidEncoding);
    return _callSuper$1(this, PasskeysInvalidEncoding, ['PasskeysInvalidEncoding', 'Invalid passkey encoding']);
  }
  return _createClass$1(PasskeysInvalidEncoding);
}(StytchSDKError);
var PasskeysMisconfigured = /*#__PURE__*/function (_StytchSDKError31) {
  _inherits$1(PasskeysMisconfigured, _StytchSDKError31);
  function PasskeysMisconfigured() {
    _classCallCheck$1(this, PasskeysMisconfigured);
    return _callSuper$1(this, PasskeysMisconfigured, ['PasskeysMisconfigured', 'Passkeys are misconfigured. Verify that you have added the correct associated domain for your application, and that the signing information is correct.']);
  }
  return _createClass$1(PasskeysMisconfigured);
}(StytchSDKError);
var SignInWithAppleMisconfigured = /*#__PURE__*/function (_StytchSDKError32) {
  _inherits$1(SignInWithAppleMisconfigured, _StytchSDKError32);
  function SignInWithAppleMisconfigured() {
    _classCallCheck$1(this, SignInWithAppleMisconfigured);
    return _callSuper$1(this, SignInWithAppleMisconfigured, ['SignInWithAppleMisconfigured', 'Sign In With Apple is misconfigured. Verify that you have correctly configured Apple OAuth in the Stytch Dashboard and added the Sign In With Apple capability to your project.']);
  }
  return _createClass$1(SignInWithAppleMisconfigured);
}(StytchSDKError);
function errorToStytchError(error) {
  switch (error.message) {
    case 'internal_error':
      return new InternalError(error.message);
    case 'no_current_session':
      return new NoCurrentSessionError();
    case 'no_biometrics_registration':
      return new NoBiometricsRegistrationError();
    case 'biometrics_unavailable':
      return new BiometricsUnavailableError();
    case 'key_invalidated':
      return new KeyInvalidatedError();
    case 'device_hardware_error':
      return new BiometricsUnavailableError();
    case 'biometrics_not_available':
      return new BiometricsUnavailableError();
    case 'no_biometrics_enrolled':
      return new NoBiometricsEnrolledError();
    case 'keystore_unavailable':
      return new KeystoreUnavailableError();
    case 'no_biometric_key':
      return new KeyInvalidatedError();
    case 'device_credentials_not_allowed':
      return new DeviceCredentialsNotAllowedError();
    case 'user_cancellation':
      return new UserCancellationError();
    case 'user_locked_out':
      return new UserLockedOutError();
    case 'google_onetap_missing_id_token':
      return new MissingAuthorizationCredentialIDTokenError();
    case 'google_onetap_missing_member':
      return new InvalidAuthorizationCredentialError();
    case 'oauth_apple_missing_id_token':
      return new MissingAuthorizationCredentialIDTokenError();
    case 'oauth_apple_credential_invalid':
      return new InvalidAuthorizationCredentialError();
    case 'missing_public_key':
      return new MissingPublicKeyError();
    case 'challenge_signing_failed':
      return new ChallengeSigningFailedError();
    case 'missing_authorization_credential_id_token':
      return new MissingAuthorizationCredentialIDTokenError();
    case 'invalid_authorization_credential':
      return new InvalidAuthorizationCredentialError();
    case 'no_credentials_present':
      return new NoCredentialsPresentError();
    case 'sdk_not_configured':
      return new SDKNotConfiguredError();
    case 'failed_code_challenge':
      return new FailedCodeChallengeError();
    case 'passkeys_unsupported':
      return new PasskeysUnsupportedError();
    case 'failed_to_decrypt_data':
      return new FailedToDecryptDataError();
    case 'biometrics_failed':
      return new BiometricsFailedError();
    case 'invalid_start_url':
      return new InvalidStartUrlError();
    case 'invalid_redirect_scheme':
      return new InvalidRedirectSchemeError();
    case 'missing_url':
      return new MissingUrlError();
    case 'invalid_credential_type':
      return new InvalidCredentialTypeError();
    case 'missing_attestation_object':
      return new MissingAttestationObjectError();
    case 'json_data_not_convertible_to_string':
      return new JSONDataNotConvertibleToStringError();
    case 'random_number_generation_failed':
      return new RandomNumberGenerationFailed();
    case 'passkeys_invalid_encoding':
      return new PasskeysInvalidEncoding();
    case 'passkeys_misconfigured':
      return new PasskeysMisconfigured();
    case 'signinwithapple_misconfigured':
      return new SignInWithAppleMisconfigured();
    default:
      return new StytchSDKError(error.name, error.message);
  }
}
exports.B2BProducts = void 0;
(function (B2BProducts) {
  B2BProducts["emailMagicLinks"] = "emailMagicLinks";
  B2BProducts["sso"] = "sso";
  B2BProducts["passwords"] = "passwords";
  B2BProducts["oauth"] = "oauth";
})(exports.B2BProducts || (exports.B2BProducts = {}));
exports.AuthFlowType = void 0;
(function (AuthFlowType) {
  AuthFlowType["Discovery"] = "Discovery";
  AuthFlowType["Organization"] = "Organization";
  AuthFlowType["PasswordReset"] = "PasswordReset";
})(exports.AuthFlowType || (exports.AuthFlowType = {}));
exports.B2BMFAProducts = void 0;
(function (B2BMFAProducts) {
  B2BMFAProducts["smsOtp"] = "smsOtp";
  B2BMFAProducts["totp"] = "totp";
})(exports.B2BMFAProducts || (exports.B2BMFAProducts = {}));
exports.B2BOAuthProviders = void 0;
(function (B2BOAuthProviders) {
  B2BOAuthProviders["Google"] = "google";
  B2BOAuthProviders["Microsoft"] = "microsoft";
})(exports.B2BOAuthProviders || (exports.B2BOAuthProviders = {}));
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike) {
      if (it) o = it;
      var i = 0;
      var F = function F() {};
      return {
        s: F,
        n: function n() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function s() {
      it = it.call(o);
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it["return"] != null) it["return"]();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}
function _regeneratorRuntime() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
  _regeneratorRuntime = function _regeneratorRuntime() {
    return e;
  };
  var t,
    e = {},
    r = Object.prototype,
    n = r.hasOwnProperty,
    o = Object.defineProperty || function (t, e, r) {
      t[e] = r.value;
    },
    i = "function" == typeof Symbol ? Symbol : {},
    a = i.iterator || "@@iterator",
    c = i.asyncIterator || "@@asyncIterator",
    u = i.toStringTag || "@@toStringTag";
  function define(t, e, r) {
    return Object.defineProperty(t, e, {
      value: r,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), t[e];
  }
  try {
    define({}, "");
  } catch (t) {
    define = function define(t, e, r) {
      return t[e] = r;
    };
  }
  function wrap(t, e, r, n) {
    var i = e && e.prototype instanceof Generator ? e : Generator,
      a = Object.create(i.prototype),
      c = new Context(n || []);
    return o(a, "_invoke", {
      value: makeInvokeMethod(t, r, c)
    }), a;
  }
  function tryCatch(t, e, r) {
    try {
      return {
        type: "normal",
        arg: t.call(e, r)
      };
    } catch (t) {
      return {
        type: "throw",
        arg: t
      };
    }
  }
  e.wrap = wrap;
  var h = "suspendedStart",
    l = "suspendedYield",
    f = "executing",
    s = "completed",
    y = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var p = {};
  define(p, a, function () {
    return this;
  });
  var d = Object.getPrototypeOf,
    v = d && d(d(values([])));
  v && v !== r && n.call(v, a) && (p = v);
  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
  function defineIteratorMethods(t) {
    ["next", "throw", "return"].forEach(function (e) {
      define(t, e, function (t) {
        return this._invoke(e, t);
      });
    });
  }
  function AsyncIterator(t, e) {
    function invoke(r, o, i, a) {
      var c = tryCatch(t[r], t, o);
      if ("throw" !== c.type) {
        var u = c.arg,
          h = u.value;
        return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
          invoke("next", t, i, a);
        }, function (t) {
          invoke("throw", t, i, a);
        }) : e.resolve(h).then(function (t) {
          u.value = t, i(u);
        }, function (t) {
          return invoke("throw", t, i, a);
        });
      }
      a(c.arg);
    }
    var r;
    o(this, "_invoke", {
      value: function value(t, n) {
        function callInvokeWithMethodAndArg() {
          return new e(function (e, r) {
            invoke(t, n, e, r);
          });
        }
        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(e, r, n) {
    var o = h;
    return function (i, a) {
      if (o === f) throw new Error("Generator is already running");
      if (o === s) {
        if ("throw" === i) throw a;
        return {
          value: t,
          done: !0
        };
      }
      for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
          var u = maybeInvokeDelegate(c, n);
          if (u) {
            if (u === y) continue;
            return u;
          }
        }
        if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
          if (o === h) throw o = s, n.arg;
          n.dispatchException(n.arg);
        } else "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
          if (o = n.done ? s : l, p.arg === y) continue;
          return {
            value: p.arg,
            done: n.done
          };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
      }
    };
  }
  function maybeInvokeDelegate(e, r) {
    var n = r.method,
      o = e.iterator[n];
    if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
    var i = tryCatch(o, e.iterator, r.arg);
    if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
    var a = i.arg;
    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
  }
  function pushTryEntry(t) {
    var e = {
      tryLoc: t[0]
    };
    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
  }
  function resetTryEntry(t) {
    var e = t.completion || {};
    e.type = "normal", delete e.arg, t.completion = e;
  }
  function Context(t) {
    this.tryEntries = [{
      tryLoc: "root"
    }], t.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(e) {
    if (e || "" === e) {
      var r = e[a];
      if (r) return r.call(e);
      if ("function" == typeof e.next) return e;
      if (!isNaN(e.length)) {
        var o = -1,
          i = function next() {
            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
            return next.value = t, next.done = !0, next;
          };
        return i.next = i;
      }
    }
    throw new TypeError(_typeof(e) + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), o(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
    var e = "function" == typeof t && t.constructor;
    return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
  }, e.mark = function (t) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
  }, e.awrap = function (t) {
    return {
      __await: t
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
    return this;
  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
    void 0 === i && (i = Promise);
    var a = new AsyncIterator(wrap(t, r, n, o), i);
    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
      return t.done ? t.value : a.next();
    });
  }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
    return this;
  }), define(g, "toString", function () {
    return "[object Generator]";
  }), e.keys = function (t) {
    var e = Object(t),
      r = [];
    for (var n in e) r.push(n);
    return r.reverse(), function next() {
      for (; r.length;) {
        var t = r.pop();
        if (t in e) return next.value = t, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, e.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(e) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
    },
    stop: function stop() {
      this.done = !0;
      var t = this.tryEntries[0].completion;
      if ("throw" === t.type) throw t.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(e) {
      if (this.done) throw e;
      var r = this;
      function handle(n, o) {
        return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
      }
      for (var o = this.tryEntries.length - 1; o >= 0; --o) {
        var i = this.tryEntries[o],
          a = i.completion;
        if ("root" === i.tryLoc) return handle("end");
        if (i.tryLoc <= this.prev) {
          var c = n.call(i, "catchLoc"),
            u = n.call(i, "finallyLoc");
          if (c && u) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          } else if (c) {
            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
          } else {
            if (!u) throw new Error("try statement without catch or finally");
            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(t, e) {
      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
        var o = this.tryEntries[r];
        if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
          var i = o;
          break;
        }
      }
      i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
      var a = i ? i.completion : {};
      return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
    },
    complete: function complete(t, e) {
      if ("throw" === t.type) throw t.arg;
      return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
    },
    finish: function finish(t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
      }
    },
    "catch": function _catch(t) {
      for (var e = this.tryEntries.length - 1; e >= 0; --e) {
        var r = this.tryEntries[e];
        if (r.tryLoc === t) {
          var n = r.completion;
          if ("throw" === n.type) {
            var o = n.arg;
            resetTryEntry(r);
          }
          return o;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(e, r, n) {
      return this.delegate = {
        iterator: values(e),
        resultName: r,
        nextLoc: n
      }, "next" === this.method && (this.arg = t), y;
    }
  }, e;
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : String(i);
}
function _toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r);
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return String(t);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _callSuper(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;
  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !_isNativeFunction(Class)) return Class;
    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);
      _cache.set(Class, Wrapper);
    }
    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class);
  };
  return _wrapNativeSuper(Class);
}
function _construct(t, e, r) {
  if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
  var o = [null];
  o.push.apply(o, e);
  var p = new (t.bind.apply(t, o))();
  return r && _setPrototypeOf(p, r.prototype), p;
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
    return !!t;
  })();
}
function _isNativeFunction(fn) {
  try {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  } catch (e) {
    return typeof fn === "function";
  }
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };
  return _setPrototypeOf(o, p);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}
var TEST_API_URL = 'https://test.stytch.com';
var LIVE_API_URL = 'https://api.stytch.com';
var CLIENTSIDE_SERVICES_IFRAME_URL = 'https://js.stytch.com/clientside-services/index.html';
var STYTCH_WEB_BACKEND_URL = "https://web.stytch.com";
var STYTCH_DFP_BACKEND_URL = "https://telemetry.stytch.com";
var STYTCH_DFP_CDN_URL = "https://elements.stytch.com";
var GOOGLE_ONE_TAP_HOST = 'https://accounts.google.com/gsi';
var GOOGLE_ONE_TAP_SCRIPT_URL = "".concat(GOOGLE_ONE_TAP_HOST, "/client");
var DEFAULT_SESSION_DURATION_MINUTES = 30;
function __rest$1(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __awaiter$1(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, [])).next());
  });
}
typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
var RetriableErrorType;
(function (RetriableErrorType) {
  RetriableErrorType["RequiredCatcha"] = "Catcha Required";
})(RetriableErrorType || (RetriableErrorType = {}));
var RetriableError = /*#__PURE__*/function (_Error) {
  _inherits(RetriableError, _Error);
  function RetriableError(type) {
    var _this;
    _classCallCheck(this, RetriableError);
    _this = _callSuper(this, RetriableError, [type]);
    _this.type = type;
    return _this;
  }
  return _createClass(RetriableError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
function retriableFetchSDK(_ref) {
  var method = _ref.method,
    errorMessage = _ref.errorMessage,
    finalURL = _ref.finalURL,
    basicAuthHeader = _ref.basicAuthHeader,
    xSDKClientHeader = _ref.xSDKClientHeader,
    xSDKParentHostHeader = _ref.xSDKParentHostHeader,
    body = _ref.body,
    retryCallback = _ref.retryCallback;
  return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var req;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          req = {
            method: method,
            errorMessage: errorMessage,
            finalURL: finalURL,
            basicAuthHeader: basicAuthHeader,
            xSDKClientHeader: xSDKClientHeader,
            xSDKParentHostHeader: xSDKParentHostHeader,
            body: body
          };
          _context.prev = 1;
          _context.next = 4;
          return baseFetchSDK(req);
        case 4:
          return _context.abrupt("return", _context.sent);
        case 7:
          _context.prev = 7;
          _context.t0 = _context["catch"](1);
          if (!(_context.t0 instanceof RetriableError)) {
            _context.next = 16;
            break;
          }
          _context.next = 12;
          return retryCallback(_context.t0, req);
        case 12:
          req = _context.sent;
          _context.next = 15;
          return baseFetchSDK(req);
        case 15:
          return _context.abrupt("return", _context.sent);
        case 16:
          throw _context.t0;
        case 17:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[1, 7]]);
  }));
}
function baseFetchSDK(_ref2) {
  var method = _ref2.method,
    finalURL = _ref2.finalURL,
    basicAuthHeader = _ref2.basicAuthHeader,
    xSDKClientHeader = _ref2.xSDKClientHeader,
    xSDKParentHostHeader = _ref2.xSDKParentHostHeader,
    body = _ref2.body;
  var _a;
  return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var headers, fetchOpts, resp, _respData, respError, respData;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          headers = {
            Authorization: basicAuthHeader,
            'Content-Type': 'application/json',
            'X-SDK-Client': xSDKClientHeader
          };
          if (xSDKParentHostHeader) {
            headers['X-SDK-Parent-Host'] = xSDKParentHostHeader;
          }
          fetchOpts = {
            method: method,
            headers: headers,
            body: body && JSON.stringify(body)
          };
          _context2.prev = 3;
          _context2.next = 6;
          return fetch(finalURL, fetchOpts);
        case 6:
          resp = _context2.sent;
          _context2.next = 14;
          break;
        case 9:
          _context2.prev = 9;
          _context2.t0 = _context2["catch"](3);
          if (!(_context2.t0.message === 'Failed to fetch')) {
            _context2.next = 13;
            break;
          }
          throw new StytchAPIUnreachableError('Unable to contact the Stytch servers. Are you online?');
        case 13:
          throw _context2.t0;
        case 14:
          if (!(resp.status <= 299)) {
            _context2.next = 25;
            break;
          }
          _context2.prev = 15;
          _context2.next = 18;
          return resp.json();
        case 18:
          _respData = _context2.sent;
          return _context2.abrupt("return", _respData.data);
        case 22:
          _context2.prev = 22;
          _context2.t1 = _context2["catch"](15);
          throw new StytchAPIUnreachableError('Invalid JSON response from the Stytch servers.');
        case 25:
          if (!(resp.status !== 200 && ((_a = resp.headers.get('content-type')) === null || _a === void 0 ? void 0 : _a.includes('application/json')))) {
            _context2.next = 38;
            break;
          }
          _context2.prev = 26;
          _context2.next = 29;
          return resp.json();
        case 29:
          respError = _context2.sent;
          _context2.next = 35;
          break;
        case 32:
          _context2.prev = 32;
          _context2.t2 = _context2["catch"](26);
          throw new StytchAPIUnreachableError('Invalid or no response from server');
        case 35:
          if (!('body' in respError || 'params' in respError || 'query' in respError)) {
            _context2.next = 37;
            break;
          }
          throw new StytchAPISchemaError(respError);
        case 37:
          throw new StytchAPIError(respError);
        case 38:
          _context2.prev = 38;
          _context2.next = 41;
          return resp.text();
        case 41:
          respData = _context2.sent;
          _context2.next = 47;
          break;
        case 44:
          _context2.prev = 44;
          _context2.t3 = _context2["catch"](38);
          throw new StytchAPIUnreachableError('Invalid response from the Stytch servers.');
        case 47:
          if (!respData.includes('Captcha required')) {
            _context2.next = 49;
            break;
          }
          throw new RetriableError(RetriableErrorType.RequiredCatcha);
        case 49:
          throw new StytchAPIUnreachableError('Invalid response from the Stytch servers.');
        case 50:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[3, 9], [15, 22], [26, 32], [38, 44]]);
  }));
}
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }
  return getRandomValues(rnds8);
}
var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
function validate$1(uuid) {
  return typeof uuid === 'string' && REGEX.test(uuid);
}
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate$1(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }
  return uuid;
}
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80;
  return stringify(rnds);
}
var ModulePromiseCache = {};
function loadESModule(url, moduleFromGlobalScope) {
  return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          if (!(ModulePromiseCache[url] !== undefined)) {
            _context3.next = 2;
            break;
          }
          return _context3.abrupt("return", ModulePromiseCache[url]);
        case 2:
          ModulePromiseCache[url] = loadESModuleFromNetwork(url, moduleFromGlobalScope);
          return _context3.abrupt("return", ModulePromiseCache[url]);
        case 4:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
}
function loadESModuleFromNetwork(url, moduleFromGlobalScope) {
  return new Promise(function (resolve, reject) {
    var maybeScript = findScript(url);
    if (maybeScript && maybeScript.dataset.loaded === 'true') {
      try {
        resolve(moduleFromGlobalScope());
      } catch (err) {
        return reject(new Error("".concat(url, " already loaded, but module was not found in global scope: ").concat(err)));
      }
    }
    var script = createScript(url);
    script.addEventListener('load', function () {
      script.dataset.loaded = 'true';
      try {
        resolve(moduleFromGlobalScope());
      } catch (err) {
        reject(new Error("".concat(url, " was loaded, but module was not found in global scope: ").concat(err)));
      }
    });
    script.addEventListener('error', function (err) {
      reject(new Error("".concat(url, " could not be loaded: ").concat(err)));
    });
  });
}
var findScriptsInDom = function findScriptsInDom(url) {
  return document.querySelectorAll("script[src=\"".concat(url, "\"]"));
};
function findScript(url) {
  var scripts = findScriptsInDom(url);
  if (scripts[0]) {
    return scripts[0];
  }
}
function createScript(url) {
  var script = document.createElement('script');
  script.setAttribute('src', url);
  script.setAttribute('async', 'true');
  script.setAttribute('defer', 'true');
  document.head.appendChild(script);
  return script;
}
var STYTCH_BADGE = ['[Stytch]'];
var DEBUG = false;
var logger = {
  debug: function debug() {
    return DEBUG;
  },
  log: function log() {
    var _console;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return (_console = console).log.apply(_console, STYTCH_BADGE.concat(args));
  },
  warn: function warn() {
    var _console2;
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return (_console2 = console).warn.apply(_console2, STYTCH_BADGE.concat(args));
  },
  error: function error() {
    var _console3;
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return (_console3 = console).error.apply(_console3, STYTCH_BADGE.concat(args));
  }
};
var trailer = "\nYou can find your public token at https://stytch.com/dashboard/api-keys.";
var checkPublicToken = function checkPublicToken(publicToken) {
  if (typeof publicToken !== 'string') {
    logger.warn("Public token is malformed. Expected a string, got ".concat(_typeof(publicToken), ".").concat(trailer));
  } else if (publicToken === '') {
    logger.warn("Public token is malformed. Expected \"public-token-...\", got an empty string.".concat(trailer));
  } else if (!publicToken.startsWith('public-token-')) {
    logger.warn("Public token is malformed. Expected \"public-token-...\", got ".concat(publicToken, ".").concat(trailer));
  }
};
var checkNotSSR = function checkNotSSR(clientName) {
  var codeSample = "import { createStytchUIClient } from '@stytch/nextjs/ui';\n    \nconst stytch = createStytchUIClient('public-token-...');\n";
  if (typeof window === 'undefined') {
    throw new Error("The ".concat(clientName, " is not compatible with server-side environments.\nIf using nextjs, use the create").concat(clientName, " method instead.\n```\n").concat(codeSample, "\n```\n"));
  }
};
var checkB2BNotSSR = function checkB2BNotSSR(clientName) {
  var codeSample = "import { createStytchB2BHeadlessClient } from '@stytch/nextjs/b2b';\n    \n  const stytch = createStytchB2BHeadlessClient('public-token-...');\n  ";
  if (typeof window === 'undefined') {
    throw new Error("The ".concat(clientName, " is not compatible with server-side environments.\nIf using nextjs, use the create").concat(clientName, " method instead.\n```\n").concat(codeSample, "\n```\n"));
  }
};
var COUNTRIES_LIST = {
  US: '1',
  AX: '358',
  AS: '1684',
  AG: '1268',
  AI: '1264',
  AR: '54',
  AT: '43',
  AU: '61',
  BE: '32',
  BJ: '229',
  BO: '591',
  BR: '55',
  IO: '246',
  BN: '673',
  BG: '359',
  BF: '226',
  CM: '237',
  CA: '1',
  BQ: '599',
  CF: '236',
  CL: '56',
  CX: '61',
  CC: '61',
  CO: '57',
  CD: '243',
  CK: '682',
  CR: '506',
  HR: '385',
  CZ: '420',
  DK: '45',
  DO: '1829',
  EC: '593',
  SV: '503',
  EE: '372',
  SZ: '268',
  FK: '500',
  FI: '358',
  FR: '33',
  GF: '594',
  DE: '49',
  GH: '233',
  GR: '30',
  GD: '1473',
  GT: '502',
  GG: '44',
  GW: '245',
  GY: '592',
  HU: '36',
  IS: '354',
  IN: '91',
  IE: '353',
  IM: '44',
  IT: '39',
  JM: '1876',
  JP: '81',
  KZ: '7',
  KE: '254',
  KI: '686',
  KR: '82',
  LV: '371',
  LT: '370',
  LU: '352',
  MO: '853',
  MT: '356',
  MH: '692',
  MR: '222',
  MU: '230',
  YT: '262',
  MX: '52',
  MC: '377',
  ME: '382',
  NR: '674',
  NL: '31',
  NZ: '64',
  NI: '505',
  NF: '672',
  NO: '47',
  PA: '507',
  PY: '595',
  PE: '51',
  PN: '870',
  PL: '48',
  PT: '351',
  PR: '1',
  RO: '40',
  BL: '590',
  SH: '290',
  KN: '1869',
  LC: '1758',
  MF: '590',
  PM: '508',
  SM: '378',
  ST: '239',
  SC: '248',
  SX: '599',
  SK: '421',
  SI: '386',
  ZA: '27',
  SS: '211',
  ES: '34',
  SR: '597',
  SJ: '47',
  SE: '46',
  CH: '41',
  TW: '886',
  TZ: '255',
  TK: '690',
  TO: '676',
  TT: '1868',
  TR: '90',
  UA: '380',
  GB: '44',
  UM: '1',
  UY: '598',
  VA: '379',
  EH: '212'
};
var getDFPBackendURL = function getDFPBackendURL(opts) {
  var _a, _b;
  if ((_a = opts === null || opts === void 0 ? void 0 : opts.endpointOptions) === null || _a === void 0 ? void 0 : _a.dfppaDomain) {
    return 'https://' + opts.endpointOptions.dfppaDomain;
  }
  if ((_b = opts === null || opts === void 0 ? void 0 : opts.endpoints) === null || _b === void 0 ? void 0 : _b.dfpBackendURL) {
    return opts.endpoints.dfpBackendURL;
  }
  return STYTCH_DFP_BACKEND_URL;
};
var isTestPublicToken = function isTestPublicToken(token) {
  return token.includes('public-token-test');
};
var createEventId = function createEventId() {
  return "event-id-".concat(v4());
};
var createAppSessionId = function createAppSessionId() {
  return "app-session-id-".concat(v4());
};
var createPersistentId = function createPersistentId() {
  return "persistent-id-".concat(v4());
};
var validate = function validate(methodName) {
  var validator = {
    isObject: function isObject(fieldName, value) {
      var isObject = _typeof(value) === 'object' && !Array.isArray(value) && value !== null;
      if (!isObject) {
        throw new StytchSDKUsageError(methodName, fieldName + ' must be an object.');
      }
      return validator;
    },
    isOptionalObject: function isOptionalObject(fieldName, value) {
      if (typeof value === 'undefined') {
        return validator;
      }
      return validator.isObject(fieldName, value);
    },
    isString: function isString(fieldName, value) {
      if (typeof value !== 'string') {
        throw new StytchSDKUsageError(methodName, fieldName + ' must be a string.');
      }
      return validator;
    },
    isOptionalString: function isOptionalString(fieldName, value) {
      if (typeof value === 'undefined') {
        return validator;
      }
      return validator.isString(fieldName, value);
    },
    isStringArray: function isStringArray(fieldName, value) {
      if (!Array.isArray(value)) {
        throw new StytchSDKUsageError(methodName, fieldName + ' must be an array of strings.');
      }
      var _iterator = _createForOfIteratorHelper(value),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var str = _step.value;
          if (typeof str !== 'string') {
            throw new StytchSDKUsageError(methodName, fieldName + ' must be an array of strings.');
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return validator;
    },
    isOptionalStringArray: function isOptionalStringArray(fieldName, value) {
      if (typeof value === 'undefined') {
        return validator;
      }
      return validator.isStringArray(fieldName, value);
    },
    isNumber: function isNumber(fieldName, value) {
      if (typeof value !== 'number') {
        throw new StytchSDKUsageError(methodName, fieldName + ' must be a number.');
      }
      return validator;
    },
    isOptionalNumber: function isOptionalNumber(fieldName, value) {
      if (typeof value === 'undefined') {
        return validator;
      }
      return validator.isNumber(fieldName, value);
    },
    isBoolean: function isBoolean(fieldName, value) {
      if (typeof value !== 'boolean') {
        throw new StytchSDKUsageError(methodName, fieldName + ' must be a boolean.');
      }
      return validator;
    },
    isOptionalBoolean: function isOptionalBoolean(fieldName, value) {
      if (typeof value === 'undefined') {
        return validator;
      }
      return validator.isBoolean(fieldName, value);
    }
  };
  return validator;
};
var loadTelemetryJS = function loadTelemetryJS() {
  return loadESModule("".concat(STYTCH_DFP_CDN_URL, "/telemetry.js"), function () {
    return window.GetTelemetryID;
  });
};
var DFPProtectedAuthProvider = /*#__PURE__*/_createClass(function DFPProtectedAuthProvider(publicToken, dfpBackendURL, bootstrapPromise) {
  var _this2 = this;
  var executeRecaptcha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {
    return Promise.resolve(undefined);
  };
  _classCallCheck(this, DFPProtectedAuthProvider);
  this.bootstrapPromise = bootstrapPromise;
  this.isEnabled = function () {
    return __awaiter$1(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", this.state.then(function (state) {
              return state.enabled;
            }));
          case 1:
          case "end":
            return _context4.stop();
        }
      }, _callee4, this);
    }));
  };
  this.getTelemetryID = function () {
    return __awaiter$1(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
      var _yield$this$state, publicToken, enabled, dfpBackendURL;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return this.state;
          case 2:
            _yield$this$state = _context5.sent;
            publicToken = _yield$this$state.publicToken;
            enabled = _yield$this$state.enabled;
            dfpBackendURL = _yield$this$state.dfpBackendURL;
            if (enabled) {
              _context5.next = 8;
              break;
            }
            return _context5.abrupt("return", undefined);
          case 8:
            _context5.next = 10;
            return window.GetTelemetryID(publicToken, "".concat(dfpBackendURL, "/submit"));
          case 10:
            return _context5.abrupt("return", _context5.sent);
          case 11:
          case "end":
            return _context5.stop();
        }
      }, _callee5, this);
    }));
  };
  this.getDFPTelemetryIDAndCaptcha = function () {
    return __awaiter$1(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      var _yield$this$state2, enabled, executeRecaptcha, mode, dfp_telemetry_id, captcha_token;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return this.state;
          case 2:
            _yield$this$state2 = _context6.sent;
            enabled = _yield$this$state2.enabled;
            executeRecaptcha = _yield$this$state2.executeRecaptcha;
            mode = _yield$this$state2.mode;
            dfp_telemetry_id = undefined;
            captcha_token = undefined;
            if (enabled) {
              _context6.next = 12;
              break;
            }
            _context6.next = 11;
            return executeRecaptcha();
          case 11:
            captcha_token = _context6.sent;
          case 12:
            if (!(mode === 'DECISIONING')) {
              _context6.next = 18;
              break;
            }
            _context6.next = 15;
            return this.getTelemetryID();
          case 15:
            dfp_telemetry_id = _context6.sent;
            _context6.next = 25;
            break;
          case 18:
            if (!(mode === 'OBSERVATION')) {
              _context6.next = 25;
              break;
            }
            _context6.next = 21;
            return this.getTelemetryID();
          case 21:
            dfp_telemetry_id = _context6.sent;
            _context6.next = 24;
            return executeRecaptcha();
          case 24:
            captcha_token = _context6.sent;
          case 25:
            return _context6.abrupt("return", {
              dfp_telemetry_id: dfp_telemetry_id,
              captcha_token: captcha_token
            });
          case 26:
          case "end":
            return _context6.stop();
        }
      }, _callee6, this);
    }));
  };
  this.retryWithCaptchaAndDFP = function (e, req) {
    return __awaiter$1(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {
      var _yield$this$state3, enabled, executeRecaptcha;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return this.state;
          case 2:
            _yield$this$state3 = _context7.sent;
            enabled = _yield$this$state3.enabled;
            executeRecaptcha = _yield$this$state3.executeRecaptcha;
            if (!(e.type === RetriableErrorType.RequiredCatcha && enabled)) {
              _context7.next = 14;
              break;
            }
            if (!req.body) {
              _context7.next = 13;
              break;
            }
            _context7.next = 9;
            return this.getTelemetryID();
          case 9:
            req.body.dfp_telemetry_id = _context7.sent;
            _context7.next = 12;
            return executeRecaptcha();
          case 12:
            req.body.captcha_token = _context7.sent;
          case 13:
            return _context7.abrupt("return", req);
          case 14:
            throw new Error('Unable to query captcha and/or dfp telemetry ID');
          case 15:
          case "end":
            return _context7.stop();
        }
      }, _callee7, this);
    }));
  };
  this.state = bootstrapPromise.then(function (bootstrapData) {
    return __awaiter$1(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            if (bootstrapData.runDFPProtectedAuth) {
              _context8.next = 2;
              break;
            }
            return _context8.abrupt("return", {
              publicToken: publicToken,
              dfpBackendURL: dfpBackendURL,
              enabled: false,
              loaded: false,
              executeRecaptcha: executeRecaptcha
            });
          case 2:
            _context8.next = 4;
            return loadTelemetryJS();
          case 4:
            return _context8.abrupt("return", {
              publicToken: publicToken,
              dfpBackendURL: dfpBackendURL,
              enabled: true,
              mode: bootstrapData.dfpProtectedAuthMode || 'OBSERVATION',
              loaded: true,
              executeRecaptcha: executeRecaptcha
            });
          case 5:
          case "end":
            return _context8.stop();
        }
      }, _callee8);
    }));
  });
});
var DisabledDFPProtectedAuthProvider = function DisabledDFPProtectedAuthProvider() {
  return {
    isEnabled: function isEnabled() {
      return __awaiter$1(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) switch (_context9.prev = _context9.next) {
            case 0:
              return _context9.abrupt("return", false);
            case 1:
            case "end":
              return _context9.stop();
          }
        }, _callee9);
      }));
    },
    getTelemetryID: function getTelemetryID() {
      return __awaiter$1(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) switch (_context10.prev = _context10.next) {
            case 0:
              return _context10.abrupt("return", undefined);
            case 1:
            case "end":
              return _context10.stop();
          }
        }, _callee10);
      }));
    },
    getDFPTelemetryIDAndCaptcha: function getDFPTelemetryIDAndCaptcha() {
      return __awaiter$1(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {
        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) switch (_context11.prev = _context11.next) {
            case 0:
              return _context11.abrupt("return", {
                dfp_telemetry_id: undefined,
                captcha_token: undefined
              });
            case 1:
            case "end":
              return _context11.stop();
          }
        }, _callee11);
      }));
    },
    retryWithCaptchaAndDFP: function retryWithCaptchaAndDFP() {
      return __awaiter$1(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) switch (_context12.prev = _context12.next) {
            case 0:
              throw new Error('DFP protected auth is disabled');
            case 1:
            case "end":
              return _context12.stop();
          }
        }, _callee12);
      }));
    }
  };
};
var ErrorMarshaller = /*#__PURE__*/function () {
  function ErrorMarshaller() {
    _classCallCheck(this, ErrorMarshaller);
  }
  _createClass(ErrorMarshaller, null, [{
    key: "marshall",
    value: function marshall(error) {
      return Object.assign(Object.assign({}, error), {
        name: error.name,
        message: error.message,
        stack: error.stack
      });
    }
  }, {
    key: "inflate",
    value: function inflate(ErrorClass, ErrorData) {
      var err = new ErrorClass(ErrorData);
      Object.assign(err, ErrorData);
      Object.setPrototypeOf(err, ErrorClass.prototype);
      return err;
    }
  }, {
    key: "unmarshall",
    value: function unmarshall(error) {
      if ('name' in error) {
        switch (error.name) {
          case 'SDKAPIUnreachableError':
            return ErrorMarshaller.inflate(SDKAPIUnreachableError, error);
          case 'StytchSDKSchemaError':
            return ErrorMarshaller.inflate(StytchSDKSchemaError, error);
          case 'StytchAPIUnreachableError':
            return ErrorMarshaller.inflate(StytchAPIUnreachableError, error);
          case 'StytchAPISchemaError':
            return ErrorMarshaller.inflate(StytchAPISchemaError, error);
          case 'StytchSDKAPIError':
            return ErrorMarshaller.inflate(StytchSDKAPIError, error);
          case 'StytchAPIError':
            return ErrorMarshaller.inflate(StytchAPIError, error);
          case 'TypeError':
            return ErrorMarshaller.inflate(TypeError, error);
          case 'SyntaxError':
            return ErrorMarshaller.inflate(SyntaxError, error);
          case 'ReferenceError':
            return ErrorMarshaller.inflate(ReferenceError, error);
          case 'RangeError':
            return ErrorMarshaller.inflate(RangeError, error);
          case 'EvalError':
            return ErrorMarshaller.inflate(EvalError, error);
          case 'URIError':
            return ErrorMarshaller.inflate(URIError, error);
        }
      }
      return ErrorMarshaller.inflate(Error, error);
    }
  }]);
  return ErrorMarshaller;
}();
var DEFAULT_MAX_BATCH_SIZE = 15;
var DEFAULT_INTERVAL_DURATION_MS = 800;
var EventLogger = /*#__PURE__*/function () {
  function EventLogger(args) {
    _classCallCheck(this, EventLogger);
    this.maxBatchSize = args.maxBatchSize;
    this.logEventURL = args.logEventURL;
    setInterval(this.flush.bind(this), args.intervalDurationMs);
    this.batch = [];
  }
  _createClass(EventLogger, [{
    key: "logEvent",
    value: function logEvent(telemetry, event) {
      this.batch.push({
        telemetry: telemetry,
        event: event
      });
      if (this.batch.length >= this.maxBatchSize) {
        this.flush();
      }
    }
  }, {
    key: "flush",
    value: function flush() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
        var batchToSubmit;
        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1) switch (_context13.prev = _context13.next) {
            case 0:
              if (this.batch.length) {
                _context13.next = 2;
                break;
              }
              return _context13.abrupt("return");
            case 2:
              batchToSubmit = this.batch;
              this.batch = [];
              _context13.prev = 4;
              _context13.next = 7;
              return fetch(this.logEventURL, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(batchToSubmit)
              });
            case 7:
              _context13.next = 11;
              break;
            case 9:
              _context13.prev = 9;
              _context13.t0 = _context13["catch"](4);
            case 11:
            case "end":
              return _context13.stop();
          }
        }, _callee13, this, [[4, 9]]);
      }));
    }
  }]);
  return EventLogger;
}();
var EmailSentType;
(function (EmailSentType) {
  EmailSentType["LoginOrCreateEML"] = "login_or_create_eml";
  EmailSentType["LoginOrCreateOTP"] = "login_or_create_otp";
  EmailSentType["ResetPassword"] = "reset_password";
})(EmailSentType || (EmailSentType = {}));
Promise.resolve({
  pkceRequiredForEmailMagicLinks: false
});
Promise.resolve({
  siweRequiredForCryptoWallets: false
});
Promise.resolve({
  pkceRequiredForPasswordResets: false
});
var DefaultDynamicConfig$1 = Promise.resolve({
  pkceRequiredForEmailMagicLinks: false
});
var HeadlessB2BMagicLinksClient = /*#__PURE__*/function () {
  function HeadlessB2BMagicLinksClient(_networkClient, _subscriptionService, _pkceManager, _passwordResetPKCEManager) {
    var _this9 = this;
    var _config = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DefaultDynamicConfig$1;
    var dfpProtectedAuth = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : DisabledDFPProtectedAuthProvider();
    _classCallCheck(this, HeadlessB2BMagicLinksClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this._pkceManager = _pkceManager;
    this._passwordResetPKCEManager = _passwordResetPKCEManager;
    this._config = _config;
    this.dfpProtectedAuth = dfpProtectedAuth;
    this.email = {
      invite: function invite(data) {
        return __awaiter$1(_this9, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee59() {
          return _regeneratorRuntime().wrap(function _callee59$(_context59) {
            while (1) switch (_context59.prev = _context59.next) {
              case 0:
                validate('stytch.magicLinks.email.loginOrSignup').isString('email_address', data.email_address).isOptionalString('invite_redirect_url', data.invite_redirect_url).isOptionalString('invite_template_id', data.invite_template_id).isOptionalString('name', data.name).isOptionalString('locale', data.locale).isOptionalStringArray('roles', data.roles);
                return _context59.abrupt("return", this._networkClient.fetchSDK({
                  url: '/b2b/magic_links/email/invite',
                  body: data,
                  errorMessage: 'Failed to send invite.',
                  method: 'POST'
                }));
              case 2:
              case "end":
                return _context59.stop();
            }
          }, _callee59, this);
        }));
      },
      loginOrSignup: function loginOrSignup(data) {
        return __awaiter$1(_this9, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee60() {
          var pkce_code_challenge, requestBody;
          return _regeneratorRuntime().wrap(function _callee60$(_context60) {
            while (1) switch (_context60.prev = _context60.next) {
              case 0:
                validate('stytch.magicLinks.email.loginOrSignup').isString('email_address', data.email_address).isString('organization_id', data.organization_id).isOptionalString('login_redirect_url', data.login_redirect_url).isOptionalString('login_template_id', data.login_template_id).isOptionalString('signup_redirect_url', data.signup_redirect_url).isOptionalString('signup_template_id', data.signup_template_id).isOptionalString('locale', data.locale);
                _context60.next = 3;
                return this.getCodeChallenge();
              case 3:
                pkce_code_challenge = _context60.sent;
                requestBody = Object.assign(Object.assign({}, data), {
                  pkce_code_challenge: pkce_code_challenge
                });
                return _context60.abrupt("return", this._networkClient.fetchSDK({
                  url: '/b2b/magic_links/email/login_or_signup',
                  body: requestBody,
                  errorMessage: 'Failed to send magic link',
                  method: 'POST'
                }));
              case 6:
              case "end":
                return _context60.stop();
            }
          }, _callee60, this);
        }));
      },
      discovery: {
        send: function send(data) {
          return __awaiter$1(_this9, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee61() {
            var _yield$this$dfpProtec18, dfp_telemetry_id, captcha_token, pkce_code_challenge, requestBody;
            return _regeneratorRuntime().wrap(function _callee61$(_context61) {
              while (1) switch (_context61.prev = _context61.next) {
                case 0:
                  validate('stytch.magicLinks.email.discovery.send').isString('email_address', data.email_address).isOptionalString('discovery_redirect_url', data.discovery_redirect_url).isOptionalString('login_template_id', data.login_template_id).isOptionalString('locale', data.locale);
                  _context61.next = 3;
                  return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
                case 3:
                  _yield$this$dfpProtec18 = _context61.sent;
                  dfp_telemetry_id = _yield$this$dfpProtec18.dfp_telemetry_id;
                  captcha_token = _yield$this$dfpProtec18.captcha_token;
                  _context61.next = 8;
                  return this.getCodeChallenge();
                case 8:
                  pkce_code_challenge = _context61.sent;
                  requestBody = Object.assign(Object.assign({}, data), {
                    pkce_code_challenge: pkce_code_challenge,
                    dfp_telemetry_id: dfp_telemetry_id,
                    captcha_token: captcha_token
                  });
                  return _context61.abrupt("return", this._networkClient.retriableFetchSDK({
                    url: '/b2b/magic_links/email/discovery/send',
                    body: requestBody,
                    errorMessage: 'Failed to send discovery magic link',
                    method: 'POST',
                    retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                  }));
                case 11:
                case "end":
                  return _context61.stop();
              }
            }, _callee61, this);
          }));
        }
      }
    };
    this.authenticate = function (data) {
      return __awaiter$1(_this9, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee62() {
        var passwordResetPKPair, resp;
        return _regeneratorRuntime().wrap(function _callee62$(_context62) {
          while (1) switch (_context62.prev = _context62.next) {
            case 0:
              validate('stytch.magicLinks.authenticate').isString('magic_links_token', data.magic_links_token).isNumber('session_duration_minutes', data.session_duration_minutes).isOptionalString('locale', data.locale);
              _context62.next = 3;
              return this._passwordResetPKCEManager.getPKPair();
            case 3:
              passwordResetPKPair = _context62.sent;
              resp = null;
              if (!(passwordResetPKPair === null || passwordResetPKPair === void 0 ? void 0 : passwordResetPKPair.code_verifier)) {
                _context62.next = 19;
                break;
              }
              _context62.prev = 6;
              _context62.next = 9;
              return this.handlePKCEForAuthenticate(this._passwordResetPKCEManager, data);
            case 9:
              resp = _context62.sent;
              _context62.next = 19;
              break;
            case 12:
              _context62.prev = 12;
              _context62.t0 = _context62["catch"](6);
              if (!_context62.t0.message.includes('pkce')) {
                _context62.next = 18;
                break;
              }
              console.log('Authenticate with passwords pkce namespace failed. Falling back to authenticate with magic_links namespace.');
              _context62.next = 19;
              break;
            case 18:
              throw _context62.t0;
            case 19:
              if (resp) {
                _context62.next = 23;
                break;
              }
              _context62.next = 22;
              return this.handlePKCEForAuthenticate(this._pkceManager, data);
            case 22:
              resp = _context62.sent;
            case 23:
              if (resp.member_session) {
                this._subscriptionService.updateStateAndTokens({
                  state: {
                    session: resp.member_session,
                    member: resp.member,
                    organization: resp.organization
                  },
                  session_token: resp.session_token,
                  session_jwt: resp.session_jwt,
                  intermediate_session_token: null
                });
              } else {
                this._subscriptionService.updateStateAndTokens({
                  state: null,
                  session_token: null,
                  session_jwt: null,
                  intermediate_session_token: resp.intermediate_session_token
                });
              }
              return _context62.abrupt("return", resp);
            case 25:
            case "end":
              return _context62.stop();
          }
        }, _callee62, this, [[6, 12]]);
      }));
    };
    this.discovery = {
      authenticate: function authenticate(data) {
        return __awaiter$1(_this9, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee63() {
          var pkPair, _yield$this$dfpProtec19, dfp_telemetry_id, captcha_token, requestBody, resp;
          return _regeneratorRuntime().wrap(function _callee63$(_context63) {
            while (1) switch (_context63.prev = _context63.next) {
              case 0:
                validate('stytch.magicLinks.discovery.authenticate').isString('discovery_magic_links_token', data.discovery_magic_links_token);
                _context63.next = 3;
                return this._pkceManager.getPKPair();
              case 3:
                pkPair = _context63.sent;
                _context63.next = 6;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 6:
                _yield$this$dfpProtec19 = _context63.sent;
                dfp_telemetry_id = _yield$this$dfpProtec19.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec19.captcha_token;
                requestBody = Object.assign({
                  pkce_code_verifier: pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier,
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                }, data);
                _context63.next = 12;
                return this._networkClient.retriableFetchSDK({
                  url: '/b2b/magic_links/discovery/authenticate',
                  body: requestBody,
                  errorMessage: 'Failed to authenticate intermediate magic link token',
                  method: 'POST',
                  retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                });
              case 12:
                resp = _context63.sent;
                this._pkceManager.clearPKPair();
                this._subscriptionService.updateStateAndTokens({
                  state: null,
                  session_token: null,
                  session_jwt: null,
                  intermediate_session_token: resp.intermediate_session_token
                });
                return _context63.abrupt("return", resp);
              case 16:
              case "end":
                return _context63.stop();
            }
          }, _callee63, this);
        }));
      }
    };
  }
  _createClass(HeadlessB2BMagicLinksClient, [{
    key: "getCodeChallenge",
    value: function getCodeChallenge() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee64() {
        var _yield$this$_config5, pkceRequiredForEmailMagicLinks, keyPair;
        return _regeneratorRuntime().wrap(function _callee64$(_context64) {
          while (1) switch (_context64.prev = _context64.next) {
            case 0:
              _context64.next = 2;
              return this._config;
            case 2:
              _yield$this$_config5 = _context64.sent;
              pkceRequiredForEmailMagicLinks = _yield$this$_config5.pkceRequiredForEmailMagicLinks;
              if (pkceRequiredForEmailMagicLinks) {
                _context64.next = 6;
                break;
              }
              return _context64.abrupt("return", undefined);
            case 6:
              _context64.next = 8;
              return this._pkceManager.getPKPair();
            case 8:
              keyPair = _context64.sent;
              if (!keyPair) {
                _context64.next = 11;
                break;
              }
              return _context64.abrupt("return", keyPair.code_challenge);
            case 11:
              _context64.next = 13;
              return this._pkceManager.startPKCETransaction();
            case 13:
              keyPair = _context64.sent;
              return _context64.abrupt("return", keyPair.code_challenge);
            case 15:
            case "end":
              return _context64.stop();
          }
        }, _callee64, this);
      }));
    }
  }, {
    key: "handlePKCEForAuthenticate",
    value: function handlePKCEForAuthenticate(pkceManager, data) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee65() {
        var pkPair, _yield$this$dfpProtec20, dfp_telemetry_id, captcha_token, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee65$(_context65) {
          while (1) switch (_context65.prev = _context65.next) {
            case 0:
              _context65.next = 2;
              return pkceManager.getPKPair();
            case 2:
              pkPair = _context65.sent;
              _context65.next = 5;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 5:
              _yield$this$dfpProtec20 = _context65.sent;
              dfp_telemetry_id = _yield$this$dfpProtec20.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec20.captcha_token;
              _context65.t0 = Object;
              _context65.t1 = pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier;
              _context65.t2 = dfp_telemetry_id;
              _context65.t3 = captcha_token;
              _context65.next = 14;
              return this._subscriptionService.getIntermediateSessionToken();
            case 14:
              _context65.t4 = _context65.sent;
              if (_context65.t4) {
                _context65.next = 17;
                break;
              }
              _context65.t4 = undefined;
            case 17:
              _context65.t5 = _context65.t4;
              _context65.t6 = {
                pkce_code_verifier: _context65.t1,
                dfp_telemetry_id: _context65.t2,
                captcha_token: _context65.t3,
                intermediate_session_token: _context65.t5
              };
              _context65.t7 = data;
              requestBody = _context65.t0.assign.call(_context65.t0, _context65.t6, _context65.t7);
              _context65.next = 23;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/magic_links/authenticate',
                body: requestBody,
                errorMessage: 'Failed to authenticate token',
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 23:
              resp = _context65.sent;
              pkceManager.clearPKPair();
              return _context65.abrupt("return", resp);
            case 26:
            case "end":
              return _context65.stop();
          }
        }, _callee65, this);
      }));
    }
  }]);
  return HeadlessB2BMagicLinksClient;
}();
var HeadlessB2BSelfClient = /*#__PURE__*/_createClass(function HeadlessB2BSelfClient(_networkClient, _apiNetworkClient, _subscriptionService) {
  var _this10 = this;
  _classCallCheck(this, HeadlessB2BSelfClient);
  this._networkClient = _networkClient;
  this._apiNetworkClient = _apiNetworkClient;
  this._subscriptionService = _subscriptionService;
  this.get = function () {
    return __awaiter$1(_this10, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee66() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee66$(_context66) {
        while (1) switch (_context66.prev = _context66.next) {
          case 0:
            _context66.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/members/me",
              errorMessage: 'Failed to retrieve member info.',
              method: 'GET'
            });
          case 2:
            resp = _context66.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context66.abrupt("return", resp.member);
          case 5:
          case "end":
            return _context66.stop();
        }
      }, _callee66, this);
    }));
  };
  this.getSync = function () {
    return _this10._subscriptionService.getMember();
  };
  this.getInfo = function () {
    return {
      member: _this10.getSync(),
      fromCache: _this10._subscriptionService.getFromCache()
    };
  };
  this.onChange = function (callback) {
    return _this10._subscriptionService.subscribeToState(function (state) {
      var _a;
      return callback((_a = state === null || state === void 0 ? void 0 : state.member) !== null && _a !== void 0 ? _a : null);
    });
  };
  this.update = function (data) {
    return __awaiter$1(_this10, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee67() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee67$(_context67) {
        while (1) switch (_context67.prev = _context67.next) {
          case 0:
            validate('stytch.self.update').isOptionalString('name', data.name).isOptionalObject('untrusted_metadata', data.untrusted_metadata).isOptionalBoolean('mfa_enrolled', data.mfa_enrolled).isOptionalString('mfa_phone_number', data.mfa_phone_number).isOptionalString('default_mfa_method', data.default_mfa_method);
            _context67.next = 3;
            return this._networkClient.fetchSDK({
              url: '/b2b/organizations/members/update',
              body: data,
              errorMessage: 'Failed to update member.',
              method: 'PUT'
            });
          case 3:
            resp = _context67.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context67.abrupt("return", resp);
          case 6:
          case "end":
            return _context67.stop();
        }
      }, _callee67, this);
    }));
  };
  this.deleteMFAPhoneNumber = function () {
    return __awaiter$1(_this10, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee68() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee68$(_context68) {
        while (1) switch (_context68.prev = _context68.next) {
          case 0:
            _context68.next = 2;
            return this._networkClient.fetchSDK({
              url: '/b2b/organizations/members/deletePhoneNumber',
              errorMessage: 'Failed to delete member phone number.',
              method: 'DELETE'
            });
          case 2:
            resp = _context68.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context68.abrupt("return", resp);
          case 5:
          case "end":
            return _context68.stop();
        }
      }, _callee68, this);
    }));
  };
  this.deleteMFATOTP = function () {
    return __awaiter$1(_this10, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee69() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee69$(_context69) {
        while (1) switch (_context69.prev = _context69.next) {
          case 0:
            _context69.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/members/deleteTOTP",
              errorMessage: 'Failed to delete member totp.',
              method: 'DELETE'
            });
          case 2:
            resp = _context69.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context69.abrupt("return", resp);
          case 5:
          case "end":
            return _context69.stop();
        }
      }, _callee69, this);
    }));
  };
  this.deletePassword = function (passwordId) {
    return __awaiter$1(_this10, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee70() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee70$(_context70) {
        while (1) switch (_context70.prev = _context70.next) {
          case 0:
            _context70.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/members/passwords/".concat(passwordId),
              errorMessage: 'Failed to delete member password.',
              method: 'DELETE'
            });
          case 2:
            resp = _context70.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context70.abrupt("return", resp);
          case 5:
          case "end":
            return _context70.stop();
        }
      }, _callee70, this);
    }));
  };
  this.unlinkRetiredEmail = function (data) {
    return __awaiter$1(_this10, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee71() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee71$(_context71) {
        while (1) switch (_context71.prev = _context71.next) {
          case 0:
            _context71.next = 2;
            return this._apiNetworkClient.fetchSDK({
              url: '/b2b/organizations/members/unlink_retired_email',
              errorMessage: 'Failed to unlink retired email.',
              method: 'POST',
              body: data
            });
          case 2:
            resp = _context71.sent;
            this._subscriptionService.updateMember(resp.member);
            return _context71.abrupt("return", resp);
          case 5:
          case "end":
            return _context71.stop();
        }
      }, _callee71, this);
    }));
  };
});
var HeadlessB2BSSOClient = /*#__PURE__*/function () {
  function HeadlessB2BSSOClient(_networkClient, _subscriptionService, _pkceManager, _dynamicConfig, _config, dfpProtectedAuth) {
    var _this11 = this;
    _classCallCheck(this, HeadlessB2BSSOClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this._pkceManager = _pkceManager;
    this._dynamicConfig = _dynamicConfig;
    this._config = _config;
    this.dfpProtectedAuth = dfpProtectedAuth;
    this.saml = {
      createConnection: function createConnection(data) {
        return __awaiter$1(_this11, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee72() {
          return _regeneratorRuntime().wrap(function _callee72$(_context72) {
            while (1) switch (_context72.prev = _context72.next) {
              case 0:
                _context72.next = 2;
                return this._networkClient.fetchSDK({
                  url: '/b2b/sso/saml',
                  method: 'POST',
                  body: data,
                  errorMessage: 'Failed to create SAML Connection.'
                });
              case 2:
                return _context72.abrupt("return", _context72.sent);
              case 3:
              case "end":
                return _context72.stop();
            }
          }, _callee72, this);
        }));
      },
      updateConnection: function updateConnection(data) {
        return __awaiter$1(_this11, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee73() {
          return _regeneratorRuntime().wrap(function _callee73$(_context73) {
            while (1) switch (_context73.prev = _context73.next) {
              case 0:
                _context73.next = 2;
                return this._networkClient.fetchSDK({
                  url: "/b2b/sso/saml/".concat(data.connection_id),
                  method: 'PUT',
                  body: data,
                  errorMessage: 'Failed to update SAML Connection.'
                });
              case 2:
                return _context73.abrupt("return", _context73.sent);
              case 3:
              case "end":
                return _context73.stop();
            }
          }, _callee73, this);
        }));
      },
      updateConnectionByURL: function updateConnectionByURL(data) {
        return __awaiter$1(_this11, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee74() {
          return _regeneratorRuntime().wrap(function _callee74$(_context74) {
            while (1) switch (_context74.prev = _context74.next) {
              case 0:
                _context74.next = 2;
                return this._networkClient.fetchSDK({
                  url: "/b2b/sso/saml/".concat(data.connection_id, "/url"),
                  method: 'PUT',
                  body: data,
                  errorMessage: 'Failed to update SAML Connection.'
                });
              case 2:
                return _context74.abrupt("return", _context74.sent);
              case 3:
              case "end":
                return _context74.stop();
            }
          }, _callee74, this);
        }));
      },
      deleteVerificationCertificate: function deleteVerificationCertificate(data) {
        return __awaiter$1(_this11, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee75() {
          return _regeneratorRuntime().wrap(function _callee75$(_context75) {
            while (1) switch (_context75.prev = _context75.next) {
              case 0:
                _context75.next = 2;
                return this._networkClient.fetchSDK({
                  url: "/b2b/sso/saml/".concat(data.connection_id, "/verification_certificates/").concat(data.certificate_id),
                  method: 'DELETE',
                  errorMessage: 'Failed to delete SAML Verification Certificate.'
                });
              case 2:
                return _context75.abrupt("return", _context75.sent);
              case 3:
              case "end":
                return _context75.stop();
            }
          }, _callee75, this);
        }));
      }
    };
    this.oidc = {
      createConnection: function createConnection(data) {
        return __awaiter$1(_this11, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee76() {
          return _regeneratorRuntime().wrap(function _callee76$(_context76) {
            while (1) switch (_context76.prev = _context76.next) {
              case 0:
                _context76.next = 2;
                return this._networkClient.fetchSDK({
                  url: '/b2b/sso/oidc',
                  method: 'POST',
                  body: data,
                  errorMessage: 'Failed to create OIDC Connection.'
                });
              case 2:
                return _context76.abrupt("return", _context76.sent);
              case 3:
              case "end":
                return _context76.stop();
            }
          }, _callee76, this);
        }));
      },
      updateConnection: function updateConnection(data) {
        return __awaiter$1(_this11, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee77() {
          return _regeneratorRuntime().wrap(function _callee77$(_context77) {
            while (1) switch (_context77.prev = _context77.next) {
              case 0:
                _context77.next = 2;
                return this._networkClient.fetchSDK({
                  url: "/b2b/sso/oidc/".concat(data.connection_id),
                  method: 'PUT',
                  body: data,
                  errorMessage: 'Failed to update OIDC Connection.'
                });
              case 2:
                return _context77.abrupt("return", _context77.sent);
              case 3:
              case "end":
                return _context77.stop();
            }
          }, _callee77, this);
        }));
      }
    };
  }
  _createClass(HeadlessB2BSSOClient, [{
    key: "authenticate",
    value: function authenticate(options) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee78() {
        var keyPair, _yield$this$dfpProtec21, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee78$(_context78) {
          while (1) switch (_context78.prev = _context78.next) {
            case 0:
              validate('stytch.sso.authenticate').isString('sso_token', options.sso_token).isNumber('session_duration_minutes', options.session_duration_minutes).isOptionalString('locale', options.locale);
              _context78.next = 3;
              return this._pkceManager.getPKPair();
            case 3:
              keyPair = _context78.sent;
              if (!keyPair) {
                logger.warn('No code verifier found in local storage for SSO flow.\n' + 'Consider using stytch.sso.start() to add PKCE to your SSO flows for added security.\n' + 'See https://stytch.com/docs/oauth#guides_pkce for more information.');
              }
              _context78.next = 7;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 7:
              _yield$this$dfpProtec21 = _context78.sent;
              dfp_telemetry_id = _yield$this$dfpProtec21.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec21.captcha_token;
              _context78.t0 = this._networkClient;
              _context78.t1 = Object;
              _context78.t2 = Object.assign({
                pkce_code_verifier: keyPair === null || keyPair === void 0 ? void 0 : keyPair.code_verifier
              }, options);
              _context78.t3 = dfp_telemetry_id;
              _context78.t4 = captcha_token;
              _context78.next = 17;
              return this._subscriptionService.getIntermediateSessionToken();
            case 17:
              _context78.t5 = _context78.sent;
              if (_context78.t5) {
                _context78.next = 20;
                break;
              }
              _context78.t5 = undefined;
            case 20:
              _context78.t6 = _context78.t5;
              _context78.t7 = {
                dfp_telemetry_id: _context78.t3,
                captcha_token: _context78.t4,
                intermediate_session_token: _context78.t6
              };
              _context78.t8 = _context78.t1.assign.call(_context78.t1, _context78.t2, _context78.t7);
              _context78.t9 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context78.t10 = {
                url: '/b2b/sso/authenticate',
                method: 'POST',
                body: _context78.t8,
                errorMessage: 'Failed to authenticate token',
                retryCallback: _context78.t9
              };
              _context78.next = 27;
              return _context78.t0.retriableFetchSDK.call(_context78.t0, _context78.t10);
            case 27:
              resp = _context78.sent;
              this._pkceManager.clearPKPair();
              if (resp.member_session) {
                this._subscriptionService.updateStateAndTokens({
                  state: {
                    session: resp.member_session,
                    member: resp.member,
                    organization: resp.organization
                  },
                  session_token: resp.session_token,
                  session_jwt: resp.session_jwt,
                  intermediate_session_token: null
                });
              } else {
                this._subscriptionService.updateStateAndTokens({
                  state: null,
                  session_token: null,
                  session_jwt: null,
                  intermediate_session_token: resp.intermediate_session_token
                });
              }
              return _context78.abrupt("return", resp);
            case 31:
            case "end":
              return _context78.stop();
          }
        }, _callee78, this);
      }));
    }
  }, {
    key: "getBaseApiUrl",
    value: function getBaseApiUrl() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee79() {
        return _regeneratorRuntime().wrap(function _callee79$(_context79) {
          while (1) switch (_context79.prev = _context79.next) {
            case 0:
              if (!isTestPublicToken(this._config.publicToken)) {
                _context79.next = 2;
                break;
              }
              return _context79.abrupt("return", this._config.testAPIURL);
            case 2:
              return _context79.abrupt("return", this._config.liveAPIURL);
            case 3:
            case "end":
              return _context79.stop();
          }
        }, _callee79, this);
      }));
    }
  }, {
    key: "start",
    value: function start(_ref4) {
      var connection_id = _ref4.connection_id,
        login_redirect_url = _ref4.login_redirect_url,
        signup_redirect_url = _ref4.signup_redirect_url;
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee80() {
        var _yield$this$_dynamicC3, pkceRequiredForSso, baseURL, startUrl, keyPair;
        return _regeneratorRuntime().wrap(function _callee80$(_context80) {
          while (1) switch (_context80.prev = _context80.next) {
            case 0:
              _context80.next = 2;
              return this._dynamicConfig;
            case 2:
              _yield$this$_dynamicC3 = _context80.sent;
              pkceRequiredForSso = _yield$this$_dynamicC3.pkceRequiredForSso;
              _context80.next = 6;
              return this.getBaseApiUrl();
            case 6:
              baseURL = _context80.sent;
              startUrl = new URL("".concat(baseURL, "/v1/public/sso/start"));
              startUrl.searchParams.set('public_token', this._config.publicToken);
              startUrl.searchParams.set('connection_id', connection_id);
              if (!pkceRequiredForSso) {
                _context80.next = 17;
                break;
              }
              _context80.next = 13;
              return this._pkceManager.startPKCETransaction();
            case 13:
              keyPair = _context80.sent;
              startUrl.searchParams.set('pkce_code_challenge', keyPair.code_challenge);
              _context80.next = 18;
              break;
            case 17:
              this._pkceManager.clearPKPair();
            case 18:
              login_redirect_url && startUrl.searchParams.set('login_redirect_url', login_redirect_url);
              signup_redirect_url && startUrl.searchParams.set('signup_redirect_url', signup_redirect_url);
              window.location.href = startUrl.toString();
            case 21:
            case "end":
              return _context80.stop();
          }
        }, _callee80, this);
      }));
    }
  }, {
    key: "getConnections",
    value: function getConnections() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee81() {
        return _regeneratorRuntime().wrap(function _callee81$(_context81) {
          while (1) switch (_context81.prev = _context81.next) {
            case 0:
              _context81.next = 2;
              return this._networkClient.fetchSDK({
                url: '/b2b/sso',
                method: 'GET',
                errorMessage: 'Failed to get SSO Connections.'
              });
            case 2:
              return _context81.abrupt("return", _context81.sent);
            case 3:
            case "end":
              return _context81.stop();
          }
        }, _callee81, this);
      }));
    }
  }, {
    key: "deleteConnection",
    value: function deleteConnection(connectionId) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee82() {
        return _regeneratorRuntime().wrap(function _callee82$(_context82) {
          while (1) switch (_context82.prev = _context82.next) {
            case 0:
              return _context82.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/sso/".concat(connectionId),
                method: 'DELETE',
                errorMessage: 'Failed to delete SSO Connection.'
              }));
            case 1:
            case "end":
              return _context82.stop();
          }
        }, _callee82, this);
      }));
    }
  }]);
  return HeadlessB2BSSOClient;
}();
var HeadlessB2BSCIMClient = /*#__PURE__*/function () {
  function HeadlessB2BSCIMClient(_networkClient, _subscriptionService) {
    _classCallCheck(this, HeadlessB2BSCIMClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
  }
  _createClass(HeadlessB2BSCIMClient, [{
    key: "createConnection",
    value: function createConnection(data) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee83() {
        return _regeneratorRuntime().wrap(function _callee83$(_context83) {
          while (1) switch (_context83.prev = _context83.next) {
            case 0:
              validate('stytch.scim.createConnection').isOptionalString('display_name', data.display_name).isOptionalString('identity_provider', data.identity_provider);
              _context83.next = 3;
              return this._networkClient.fetchSDK({
                url: '/b2b/scim',
                method: 'POST',
                body: data,
                errorMessage: 'Failed to create SCIM Connection.'
              });
            case 3:
              return _context83.abrupt("return", _context83.sent);
            case 4:
            case "end":
              return _context83.stop();
          }
        }, _callee83, this);
      }));
    }
  }, {
    key: "updateConnection",
    value: function updateConnection(data) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee84() {
        return _regeneratorRuntime().wrap(function _callee84$(_context84) {
          while (1) switch (_context84.prev = _context84.next) {
            case 0:
              validate('stytch.scim.updateConnection').isString('connection_id', data.connection_id).isOptionalString('display_name', data.display_name).isOptionalString('identity_provider', data.identity_provider);
              _context84.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/scim/".concat(data.connection_id),
                method: 'PUT',
                body: data,
                errorMessage: 'Failed to update SCIM Connection.'
              });
            case 3:
              return _context84.abrupt("return", _context84.sent);
            case 4:
            case "end":
              return _context84.stop();
          }
        }, _callee84, this);
      }));
    }
  }, {
    key: "deleteConnection",
    value: function deleteConnection(connectionId) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee85() {
        return _regeneratorRuntime().wrap(function _callee85$(_context85) {
          while (1) switch (_context85.prev = _context85.next) {
            case 0:
              validate('stytch.scim.deleteConnection').isString('connection_id', connectionId);
              _context85.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/scim/".concat(connectionId),
                method: 'DELETE',
                errorMessage: 'Failed to delete SCIM Connection.'
              });
            case 3:
              return _context85.abrupt("return", _context85.sent);
            case 4:
            case "end":
              return _context85.stop();
          }
        }, _callee85, this);
      }));
    }
  }, {
    key: "getConnection",
    value: function getConnection() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee86() {
        return _regeneratorRuntime().wrap(function _callee86$(_context86) {
          while (1) switch (_context86.prev = _context86.next) {
            case 0:
              _context86.next = 2;
              return this._networkClient.fetchSDK({
                url: '/b2b/scim',
                method: 'GET',
                errorMessage: 'Failed to get SCIM Connection.'
              });
            case 2:
              return _context86.abrupt("return", _context86.sent);
            case 3:
            case "end":
              return _context86.stop();
          }
        }, _callee86, this);
      }));
    }
  }, {
    key: "getConnectionGroups",
    value: function getConnectionGroups(data) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee87() {
        return _regeneratorRuntime().wrap(function _callee87$(_context87) {
          while (1) switch (_context87.prev = _context87.next) {
            case 0:
              validate('stytch.scim.getConnectionGroups').isOptionalNumber('limit', data.limit).isOptionalString('cursor', data.cursor);
              _context87.next = 3;
              return this._networkClient.fetchSDK({
                url: '/b2b/scim/groups',
                method: 'POST',
                body: data,
                errorMessage: 'Failed to get SCIM Connection groups.'
              });
            case 3:
              return _context87.abrupt("return", _context87.sent);
            case 4:
            case "end":
              return _context87.stop();
          }
        }, _callee87, this);
      }));
    }
  }, {
    key: "rotateStart",
    value: function rotateStart(connectionId) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee88() {
        return _regeneratorRuntime().wrap(function _callee88$(_context88) {
          while (1) switch (_context88.prev = _context88.next) {
            case 0:
              validate('stytch.scim.rotateStart').isString('connectionId', connectionId);
              _context88.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/scim/rotate/start",
                method: 'POST',
                errorMessage: 'Failed to start SCIM token rotation.'
              });
            case 3:
              return _context88.abrupt("return", _context88.sent);
            case 4:
            case "end":
              return _context88.stop();
          }
        }, _callee88, this);
      }));
    }
  }, {
    key: "rotateComplete",
    value: function rotateComplete(connectionId) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee89() {
        return _regeneratorRuntime().wrap(function _callee89$(_context89) {
          while (1) switch (_context89.prev = _context89.next) {
            case 0:
              validate('stytch.scim.rotateComplete').isString('connectionId', connectionId);
              _context89.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/scim/rotate/complete",
                method: 'POST',
                errorMessage: 'Failed to complete SCIM token rotation.'
              });
            case 3:
              return _context89.abrupt("return", _context89.sent);
            case 4:
            case "end":
              return _context89.stop();
          }
        }, _callee89, this);
      }));
    }
  }, {
    key: "rotateCancel",
    value: function rotateCancel(connectionId) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee90() {
        return _regeneratorRuntime().wrap(function _callee90$(_context90) {
          while (1) switch (_context90.prev = _context90.next) {
            case 0:
              validate('stytch.scim.rotateCancel').isString('connectionId', connectionId);
              _context90.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/scim/rotate/cancel",
                method: 'POST',
                errorMessage: 'Failed to cancel SCIM token rotation.'
              });
            case 3:
              return _context90.abrupt("return", _context90.sent);
            case 4:
            case "end":
              return _context90.stop();
          }
        }, _callee90, this);
      }));
    }
  }]);
  return HeadlessB2BSCIMClient;
}();
var HeadlessB2BOrganizationClient = /*#__PURE__*/_createClass(function HeadlessB2BOrganizationClient(_networkClient, _apiNetworkClient, _subscriptionService) {
  var _this12 = this;
  _classCallCheck(this, HeadlessB2BOrganizationClient);
  this._networkClient = _networkClient;
  this._apiNetworkClient = _apiNetworkClient;
  this._subscriptionService = _subscriptionService;
  this.get = function () {
    return __awaiter$1(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee91() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee91$(_context91) {
        while (1) switch (_context91.prev = _context91.next) {
          case 0:
            _context91.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/me",
              errorMessage: 'Failed to retrieve organization info.',
              method: 'GET'
            });
          case 2:
            resp = _context91.sent;
            this._subscriptionService.updateOrganization(resp.organization);
            return _context91.abrupt("return", resp.organization);
          case 5:
          case "end":
            return _context91.stop();
        }
      }, _callee91, this);
    }));
  };
  this.getSync = function () {
    return _this12._subscriptionService.getOrganization();
  };
  this.getInfo = function () {
    return {
      organization: _this12.getSync(),
      fromCache: _this12._subscriptionService.getFromCache()
    };
  };
  this.onChange = function (callback) {
    return _this12._subscriptionService.subscribeToState(function (state) {
      var _a;
      return callback((_a = state === null || state === void 0 ? void 0 : state.organization) !== null && _a !== void 0 ? _a : null);
    });
  };
  this.update = function (data) {
    return __awaiter$1(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee92() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee92$(_context92) {
        while (1) switch (_context92.prev = _context92.next) {
          case 0:
            _context92.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/me",
              errorMessage: 'Failed to update organization info.',
              method: 'PUT',
              body: data
            });
          case 2:
            resp = _context92.sent;
            return _context92.abrupt("return", resp);
          case 4:
          case "end":
            return _context92.stop();
        }
      }, _callee92, this);
    }));
  };
  this["delete"] = function () {
    return __awaiter$1(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee93() {
      var resp;
      return _regeneratorRuntime().wrap(function _callee93$(_context93) {
        while (1) switch (_context93.prev = _context93.next) {
          case 0:
            _context93.next = 2;
            return this._networkClient.fetchSDK({
              url: "/b2b/organizations/me",
              errorMessage: 'Failed to delete organization.',
              method: 'DELETE'
            });
          case 2:
            resp = _context93.sent;
            this._subscriptionService.destroyState();
            return _context93.abrupt("return", resp);
          case 5:
          case "end":
            return _context93.stop();
        }
      }, _callee93, this);
    }));
  };
  this.getBySlug = function (data) {
    return __awaiter$1(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee94() {
      return _regeneratorRuntime().wrap(function _callee94$(_context94) {
        while (1) switch (_context94.prev = _context94.next) {
          case 0:
            validate('stytch.organization.getBySlug').isString('organization_slug', data.organization_slug);
            return _context94.abrupt("return", this._networkClient.fetchSDK({
              url: "/b2b/organizations/search",
              errorMessage: 'Failed to get organization by slug.',
              method: 'POST',
              body: data
            }));
          case 2:
          case "end":
            return _context94.stop();
        }
      }, _callee94, this);
    }));
  };
  this.members = {
    create: function create(data) {
      return __awaiter$1(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee95() {
        return _regeneratorRuntime().wrap(function _callee95$(_context95) {
          while (1) switch (_context95.prev = _context95.next) {
            case 0:
              return _context95.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/organizations/members",
                errorMessage: 'Failed to create member.',
                method: 'POST',
                body: data
              }));
            case 1:
            case "end":
              return _context95.stop();
          }
        }, _callee95, this);
      }));
    },
    search: function search(data) {
      return __awaiter$1(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee96() {
        return _regeneratorRuntime().wrap(function _callee96$(_context96) {
          while (1) switch (_context96.prev = _context96.next) {
            case 0:
              return _context96.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/organizations/me/members/search",
                errorMessage: 'Failed to search members.',
                method: 'POST',
                body: data
              }));
            case 1:
            case "end":
              return _context96.stop();
          }
        }, _callee96, this);
      }));
    },
    update: function update(data) {
      return __awaiter$1(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee97() {
        return _regeneratorRuntime().wrap(function _callee97$(_context97) {
          while (1) switch (_context97.prev = _context97.next) {
            case 0:
              return _context97.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/".concat(data.member_id),
                errorMessage: 'Failed to update member.',
                method: 'PUT',
                body: data
              }));
            case 1:
            case "end":
              return _context97.stop();
          }
        }, _callee97, this);
      }));
    },
    deletePassword: function deletePassword(passwordId) {
      return __awaiter$1(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee98() {
        return _regeneratorRuntime().wrap(function _callee98$(_context98) {
          while (1) switch (_context98.prev = _context98.next) {
            case 0:
              return _context98.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/passwords/".concat(passwordId),
                errorMessage: 'Failed to delete member password.',
                method: 'DELETE'
              }));
            case 1:
            case "end":
              return _context98.stop();
          }
        }, _callee98, this);
      }));
    },
    deleteMFAPhoneNumber: function deleteMFAPhoneNumber(memberId) {
      return __awaiter$1(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee99() {
        return _regeneratorRuntime().wrap(function _callee99$(_context99) {
          while (1) switch (_context99.prev = _context99.next) {
            case 0:
              return _context99.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/mfa_phone_numbers/".concat(memberId),
                errorMessage: 'Failed to delete member MFA Phone number.',
                method: 'DELETE'
              }));
            case 1:
            case "end":
              return _context99.stop();
          }
        }, _callee99, this);
      }));
    },
    deleteMFATOTP: function deleteMFATOTP(memberId) {
      return __awaiter$1(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee100() {
        return _regeneratorRuntime().wrap(function _callee100$(_context100) {
          while (1) switch (_context100.prev = _context100.next) {
            case 0:
              return _context100.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/totp/".concat(memberId),
                errorMessage: 'Failed to delete member totp.',
                method: 'DELETE'
              }));
            case 1:
            case "end":
              return _context100.stop();
          }
        }, _callee100, this);
      }));
    },
    "delete": function _delete(memberId) {
      return __awaiter$1(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee101() {
        return _regeneratorRuntime().wrap(function _callee101$(_context101) {
          while (1) switch (_context101.prev = _context101.next) {
            case 0:
              return _context101.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/".concat(memberId),
                errorMessage: 'Failed to delete member.',
                method: 'DELETE'
              }));
            case 1:
            case "end":
              return _context101.stop();
          }
        }, _callee101, this);
      }));
    },
    reactivate: function reactivate(memberId) {
      return __awaiter$1(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee102() {
        return _regeneratorRuntime().wrap(function _callee102$(_context102) {
          while (1) switch (_context102.prev = _context102.next) {
            case 0:
              return _context102.abrupt("return", this._networkClient.fetchSDK({
                url: "/b2b/organizations/members/".concat(memberId, "/reactivate"),
                errorMessage: 'Failed to reactivate member.',
                method: 'PUT'
              }));
            case 1:
            case "end":
              return _context102.stop();
          }
        }, _callee102, this);
      }));
    },
    unlinkRetiredEmail: function unlinkRetiredEmail(data) {
      return __awaiter$1(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee103() {
        var member_id, body;
        return _regeneratorRuntime().wrap(function _callee103$(_context103) {
          while (1) switch (_context103.prev = _context103.next) {
            case 0:
              member_id = data.member_id, body = __rest$1(data, ["member_id"]);
              return _context103.abrupt("return", this._apiNetworkClient.fetchSDK({
                url: "/b2b/organizations/members/".concat(member_id, "/unlink_retired_email"),
                errorMessage: 'Failed to unlink retired email.',
                method: 'POST',
                body: body
              }));
            case 2:
            case "end":
              return _context103.stop();
          }
        }, _callee103, this);
      }));
    }
  };
});
var HeadlessB2BOAuthClient$1 = /*#__PURE__*/function () {
  function HeadlessB2BOAuthClient(_networkClient, _subscriptionService, _pkceManager, _dynamicConfig, _config, dfpProtectedAuth) {
    var _this13 = this;
    _classCallCheck(this, HeadlessB2BOAuthClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this._pkceManager = _pkceManager;
    this._dynamicConfig = _dynamicConfig;
    this._config = _config;
    this.dfpProtectedAuth = dfpProtectedAuth;
    this.discovery = {
      authenticate: function authenticate(data) {
        return __awaiter$1(_this13, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee104() {
          var pkPair, _yield$this$dfpProtec22, dfp_telemetry_id, captcha_token, requestBody, resp;
          return _regeneratorRuntime().wrap(function _callee104$(_context104) {
            while (1) switch (_context104.prev = _context104.next) {
              case 0:
                validate('stytch.oauth.discovery.authenticate').isString('discovery_oauth_token', data.discovery_oauth_token);
                _context104.next = 3;
                return this._pkceManager.getPKPair();
              case 3:
                pkPair = _context104.sent;
                _context104.next = 6;
                return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
              case 6:
                _yield$this$dfpProtec22 = _context104.sent;
                dfp_telemetry_id = _yield$this$dfpProtec22.dfp_telemetry_id;
                captcha_token = _yield$this$dfpProtec22.captcha_token;
                requestBody = Object.assign({
                  pkce_code_verifier: pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier,
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                }, data);
                _context104.next = 12;
                return this._networkClient.retriableFetchSDK({
                  url: '/b2b/oauth/discovery/authenticate',
                  body: requestBody,
                  errorMessage: 'Failed to authenticate discovery oauth token',
                  method: 'POST',
                  retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
                });
              case 12:
                resp = _context104.sent;
                this._pkceManager.clearPKPair();
                this._subscriptionService.updateStateAndTokens({
                  state: null,
                  session_token: null,
                  session_jwt: null,
                  intermediate_session_token: resp.intermediate_session_token
                });
                return _context104.abrupt("return", resp);
              case 16:
              case "end":
                return _context104.stop();
            }
          }, _callee104, this);
        }));
      }
    };
    this.google = {
      start: this.startOAuthFlow(exports.B2BOAuthProviders.Google),
      discovery: {
        start: this.startDiscoveryOAuthFlow(exports.B2BOAuthProviders.Google)
      }
    };
    this.microsoft = {
      start: this.startOAuthFlow(exports.B2BOAuthProviders.Microsoft),
      discovery: {
        start: this.startDiscoveryOAuthFlow(exports.B2BOAuthProviders.Microsoft)
      }
    };
  }
  _createClass(HeadlessB2BOAuthClient, [{
    key: "authenticate",
    value: function authenticate(options) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee105() {
        var keyPair, _yield$this$dfpProtec23, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee105$(_context105) {
          while (1) switch (_context105.prev = _context105.next) {
            case 0:
              validate('stytch.oauth.authenticate').isString('oauth_token', options.oauth_token).isNumber('session_duration_minutes', options.session_duration_minutes).isOptionalString('locale', options.locale);
              _context105.next = 3;
              return this._pkceManager.getPKPair();
            case 3:
              keyPair = _context105.sent;
              if (!keyPair) {
                logger.warn('No code verifier found in local storage for OAuth flow.\n' + 'Consider using stytch.oauth.$provider.start() to add PKCE to your OAuth flows for added security.\n' + 'See https://stytch.com/docs/oauth#guides_pkce for more information.');
              }
              _context105.next = 7;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 7:
              _yield$this$dfpProtec23 = _context105.sent;
              dfp_telemetry_id = _yield$this$dfpProtec23.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec23.captcha_token;
              _context105.t0 = this._networkClient;
              _context105.t1 = Object;
              _context105.t2 = keyPair === null || keyPair === void 0 ? void 0 : keyPair.code_verifier;
              _context105.t3 = dfp_telemetry_id;
              _context105.t4 = captcha_token;
              _context105.next = 17;
              return this._subscriptionService.getIntermediateSessionToken();
            case 17:
              _context105.t5 = _context105.sent;
              if (_context105.t5) {
                _context105.next = 20;
                break;
              }
              _context105.t5 = undefined;
            case 20:
              _context105.t6 = _context105.t5;
              _context105.t7 = {
                pkce_code_verifier: _context105.t2,
                dfp_telemetry_id: _context105.t3,
                captcha_token: _context105.t4,
                intermediate_session_token: _context105.t6
              };
              _context105.t8 = options;
              _context105.t9 = _context105.t1.assign.call(_context105.t1, _context105.t7, _context105.t8);
              _context105.t10 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context105.t11 = {
                url: '/b2b/oauth/authenticate',
                method: 'POST',
                body: _context105.t9,
                errorMessage: 'Failed to authenticate token',
                retryCallback: _context105.t10
              };
              _context105.next = 28;
              return _context105.t0.retriableFetchSDK.call(_context105.t0, _context105.t11);
            case 28:
              resp = _context105.sent;
              this._pkceManager.clearPKPair();
              if (resp.member_session) {
                this._subscriptionService.updateStateAndTokens({
                  state: {
                    session: resp.member_session,
                    member: resp.member,
                    organization: resp.organization
                  },
                  session_token: resp.session_token,
                  session_jwt: resp.session_jwt,
                  intermediate_session_token: null
                });
              } else {
                this._subscriptionService.updateStateAndTokens({
                  state: null,
                  session_token: null,
                  session_jwt: null,
                  intermediate_session_token: resp.intermediate_session_token
                });
              }
              return _context105.abrupt("return", resp);
            case 32:
            case "end":
              return _context105.stop();
          }
        }, _callee105, this);
      }));
    }
  }, {
    key: "getBaseApiUrl",
    value: function getBaseApiUrl() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee106() {
        var _yield$this$_dynamicC4, cnameDomain;
        return _regeneratorRuntime().wrap(function _callee106$(_context106) {
          while (1) switch (_context106.prev = _context106.next) {
            case 0:
              _context106.next = 2;
              return this._dynamicConfig;
            case 2:
              _yield$this$_dynamicC4 = _context106.sent;
              cnameDomain = _yield$this$_dynamicC4.cnameDomain;
              if (!cnameDomain) {
                _context106.next = 6;
                break;
              }
              return _context106.abrupt("return", "https://".concat(cnameDomain));
            case 6:
              if (!isTestPublicToken(this._config.publicToken)) {
                _context106.next = 8;
                break;
              }
              return _context106.abrupt("return", this._config.testAPIURL);
            case 8:
              return _context106.abrupt("return", this._config.liveAPIURL);
            case 9:
            case "end":
              return _context106.stop();
          }
        }, _callee106, this);
      }));
    }
  }, {
    key: "startOAuthFlow",
    value: function startOAuthFlow(providerType) {
      var _this14 = this;
      return function (_ref5) {
        var organization_id = _ref5.organization_id,
          organization_slug = _ref5.organization_slug,
          login_redirect_url = _ref5.login_redirect_url,
          signup_redirect_url = _ref5.signup_redirect_url,
          custom_scopes = _ref5.custom_scopes,
          provider_params = _ref5.provider_params;
        return __awaiter$1(_this14, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee107() {
          var _yield$this$_dynamicC5, pkceRequiredForOAuth, baseURL, startUrl, key, keyPair;
          return _regeneratorRuntime().wrap(function _callee107$(_context107) {
            while (1) switch (_context107.prev = _context107.next) {
              case 0:
                _context107.next = 2;
                return this._dynamicConfig;
              case 2:
                _yield$this$_dynamicC5 = _context107.sent;
                pkceRequiredForOAuth = _yield$this$_dynamicC5.pkceRequiredForOAuth;
                _context107.next = 6;
                return this.getBaseApiUrl();
              case 6:
                baseURL = _context107.sent;
                startUrl = new URL("".concat(baseURL, "/v1/b2b/public/oauth/").concat(providerType, "/start"));
                startUrl.searchParams.set('public_token', this._config.publicToken);
                if (organization_id && organization_id != '') {
                  startUrl.searchParams.set('organization_id', organization_id);
                }
                if (organization_slug && organization_slug != '') {
                  startUrl.searchParams.set('slug', organization_slug);
                }
                if (custom_scopes) {
                  validate('startOAuthFlow').isStringArray('custom_scopes', custom_scopes);
                  startUrl.searchParams.set('custom_scopes', custom_scopes.join(' '));
                }
                if (provider_params) {
                  validate('startOAuthFlow').isOptionalObject('provider_params', provider_params);
                  for (key in provider_params) {
                    startUrl.searchParams.set('provider_' + key, provider_params[key]);
                  }
                }
                if (!pkceRequiredForOAuth) {
                  _context107.next = 20;
                  break;
                }
                _context107.next = 16;
                return this._pkceManager.startPKCETransaction();
              case 16:
                keyPair = _context107.sent;
                startUrl.searchParams.set('pkce_code_challenge', keyPair.code_challenge);
                _context107.next = 21;
                break;
              case 20:
                this._pkceManager.clearPKPair();
              case 21:
                login_redirect_url && startUrl.searchParams.set('login_redirect_url', login_redirect_url);
                signup_redirect_url && startUrl.searchParams.set('signup_redirect_url', signup_redirect_url);
                window.location.href = startUrl.toString();
              case 24:
              case "end":
                return _context107.stop();
            }
          }, _callee107, this);
        }));
      };
    }
  }, {
    key: "startDiscoveryOAuthFlow",
    value: function startDiscoveryOAuthFlow(providerType) {
      var _this15 = this;
      return function (_ref6) {
        var discovery_redirect_url = _ref6.discovery_redirect_url,
          custom_scopes = _ref6.custom_scopes,
          provider_params = _ref6.provider_params;
        return __awaiter$1(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee108() {
          var _yield$this$_dynamicC6, pkceRequiredForOAuth, baseURL, startUrl, key, keyPair;
          return _regeneratorRuntime().wrap(function _callee108$(_context108) {
            while (1) switch (_context108.prev = _context108.next) {
              case 0:
                _context108.next = 2;
                return this._dynamicConfig;
              case 2:
                _yield$this$_dynamicC6 = _context108.sent;
                pkceRequiredForOAuth = _yield$this$_dynamicC6.pkceRequiredForOAuth;
                _context108.next = 6;
                return this.getBaseApiUrl();
              case 6:
                baseURL = _context108.sent;
                startUrl = new URL("".concat(baseURL, "/v1/b2b/public/oauth/").concat(providerType, "/discovery/start"));
                startUrl.searchParams.set('public_token', this._config.publicToken);
                if (custom_scopes) {
                  validate('startOAuthFlow').isStringArray('custom_scopes', custom_scopes);
                  startUrl.searchParams.set('custom_scopes', custom_scopes.join(' '));
                }
                if (provider_params) {
                  validate('startOAuthFlow').isOptionalObject('provider_params', provider_params);
                  for (key in provider_params) {
                    startUrl.searchParams.set('provider_' + key, provider_params[key]);
                  }
                }
                if (!pkceRequiredForOAuth) {
                  _context108.next = 18;
                  break;
                }
                _context108.next = 14;
                return this._pkceManager.startPKCETransaction();
              case 14:
                keyPair = _context108.sent;
                startUrl.searchParams.set('pkce_code_challenge', keyPair.code_challenge);
                _context108.next = 19;
                break;
              case 18:
                this._pkceManager.clearPKPair();
              case 19:
                discovery_redirect_url && startUrl.searchParams.set('discovery_redirect_url', discovery_redirect_url);
                window.location.href = startUrl.toString();
              case 21:
              case "end":
                return _context108.stop();
            }
          }, _callee108, this);
        }));
      };
    }
  }]);
  return HeadlessB2BOAuthClient;
}();
var HeadlessB2BSessionClient = /*#__PURE__*/function () {
  function HeadlessB2BSessionClient(_networkClient, _subscriptionService) {
    var _this16 = this;
    _classCallCheck(this, HeadlessB2BSessionClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this.getSync = function () {
      return _this16._subscriptionService.getSession();
    };
    this.getInfo = function () {
      return {
        session: _this16.getSync(),
        fromCache: _this16._subscriptionService.getFromCache()
      };
    };
    this.onChange = function (callback) {
      return _this16._subscriptionService.subscribeToState(function (state) {
        var _a;
        return callback((_a = state === null || state === void 0 ? void 0 : state.session) !== null && _a !== void 0 ? _a : null);
      });
    };
    this.revoke = function (options) {
      return __awaiter$1(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee109() {
        var resp;
        return _regeneratorRuntime().wrap(function _callee109$(_context109) {
          while (1) switch (_context109.prev = _context109.next) {
            case 0:
              _context109.prev = 0;
              _context109.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/sessions/revoke",
                errorMessage: 'Error revoking session',
                method: 'POST'
              });
            case 3:
              resp = _context109.sent;
              this._subscriptionService.destroyState();
              return _context109.abrupt("return", resp);
            case 8:
              _context109.prev = 8;
              _context109.t0 = _context109["catch"](0);
              if (!!(options === null || options === void 0 ? void 0 : options.forceClear)) {
                this._subscriptionService.destroyState();
              } else if (UNRECOVERABLE_ERROR_TYPES.includes(_context109.t0.error_type)) {
                this._subscriptionService.destroyState();
              }
              throw _context109.t0;
            case 12:
            case "end":
              return _context109.stop();
          }
        }, _callee109, this, [[0, 8]]);
      }));
    };
    this.revokeForMember = function (options) {
      return __awaiter$1(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee110() {
        return _regeneratorRuntime().wrap(function _callee110$(_context110) {
          while (1) switch (_context110.prev = _context110.next) {
            case 0:
              validate('stytch.sessions.revokeForMember').isString('member_id', options.member_id);
              _context110.next = 3;
              return this._networkClient.fetchSDK({
                url: "/b2b/sessions/revoke/".concat(options.member_id),
                errorMessage: 'Error revoking session',
                method: 'POST'
              });
            case 3:
              return _context110.abrupt("return", _context110.sent);
            case 4:
            case "end":
              return _context110.stop();
          }
        }, _callee110, this);
      }));
    };
    this.authenticate = function (options) {
      return __awaiter$1(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee111() {
        var _this17 = this;
        var initialSession, isSessionStale, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee111$(_context111) {
          while (1) switch (_context111.prev = _context111.next) {
            case 0:
              initialSession = this._subscriptionService.getSession();
              isSessionStale = function isSessionStale() {
                var _a;
                return (initialSession === null || initialSession === void 0 ? void 0 : initialSession.member_session_id) !== ((_a = _this17._subscriptionService.getSession()) === null || _a === void 0 ? void 0 : _a.member_session_id);
              };
              _context111.prev = 2;
              requestBody = {
                session_duration_minutes: options === null || options === void 0 ? void 0 : options.session_duration_minutes
              };
              _context111.next = 6;
              return this._networkClient.fetchSDK({
                url: '/b2b/sessions/authenticate',
                body: requestBody,
                errorMessage: 'Error authenticating session',
                method: 'POST'
              });
            case 6:
              resp = _context111.sent;
              if (!isSessionStale()) {
                _context111.next = 9;
                break;
              }
              return _context111.abrupt("return", this.authenticate(options));
            case 9:
              this._subscriptionService.updateStateAndTokens({
                state: {
                  session: resp.member_session,
                  member: resp.member,
                  organization: resp.organization
                },
                session_token: resp.session_token,
                session_jwt: resp.session_jwt,
                intermediate_session_token: null
              });
              return _context111.abrupt("return", resp);
            case 13:
              _context111.prev = 13;
              _context111.t0 = _context111["catch"](2);
              if (!isSessionStale()) {
                _context111.next = 17;
                break;
              }
              return _context111.abrupt("return", this.authenticate(options));
            case 17:
              if (UNRECOVERABLE_ERROR_TYPES.includes(_context111.t0.error_type)) {
                this._subscriptionService.destroySession();
              }
              throw _context111.t0;
            case 19:
            case "end":
              return _context111.stop();
          }
        }, _callee111, this, [[2, 13]]);
      }));
    };
    this.exchange = function (data) {
      return __awaiter$1(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee112() {
        var resp;
        return _regeneratorRuntime().wrap(function _callee112$(_context112) {
          while (1) switch (_context112.prev = _context112.next) {
            case 0:
              validate('stytch.sessions.exchange').isString('organization_id', data.organization_id).isNumber('session_duration_minutes', data.session_duration_minutes).isOptionalString('locale', data.locale);
              _context112.prev = 1;
              _context112.next = 4;
              return this._networkClient.fetchSDK({
                url: '/b2b/sessions/exchange',
                body: data,
                errorMessage: 'Failed to exchange session',
                method: 'POST'
              });
            case 4:
              resp = _context112.sent;
              if (resp.member_session) {
                this._subscriptionService.updateStateAndTokens({
                  state: {
                    session: resp.member_session,
                    member: resp.member,
                    organization: resp.organization
                  },
                  session_token: resp.session_token,
                  session_jwt: resp.session_jwt,
                  intermediate_session_token: null
                });
              } else {
                this._subscriptionService.updateStateAndTokens({
                  state: null,
                  session_token: null,
                  session_jwt: null,
                  intermediate_session_token: resp.intermediate_session_token
                });
              }
              return _context112.abrupt("return", resp);
            case 9:
              _context112.prev = 9;
              _context112.t0 = _context112["catch"](1);
              throw _context112.t0;
            case 12:
            case "end":
              return _context112.stop();
          }
        }, _callee112, this, [[1, 9]]);
      }));
    };
  }
  _createClass(HeadlessB2BSessionClient, [{
    key: "getTokens",
    value: function getTokens() {
      return this._subscriptionService.getTokens();
    }
  }, {
    key: "updateSession",
    value: function updateSession(tokens) {
      var _a;
      validate('stytch.sessions.updateSession').isString('session_token', tokens.session_token).isOptionalString('session_jwt', (_a = tokens.session_jwt) !== null && _a !== void 0 ? _a : undefined);
      this._subscriptionService.updateTokens(tokens);
    }
  }]);
  return HeadlessB2BSessionClient;
}();
var HeadlessB2BDiscoveryClient = /*#__PURE__*/_createClass(function HeadlessB2BDiscoveryClient(_networkClient, _subscriptionService) {
  var _this18 = this;
  _classCallCheck(this, HeadlessB2BDiscoveryClient);
  this._networkClient = _networkClient;
  this._subscriptionService = _subscriptionService;
  this.organizations = {
    list: function list() {
      return __awaiter$1(_this18, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee113() {
        return _regeneratorRuntime().wrap(function _callee113$(_context113) {
          while (1) switch (_context113.prev = _context113.next) {
            case 0:
              _context113.t0 = this._networkClient;
              _context113.next = 3;
              return this._subscriptionService.getIntermediateSessionToken();
            case 3:
              _context113.t1 = _context113.sent;
              if (_context113.t1) {
                _context113.next = 6;
                break;
              }
              _context113.t1 = undefined;
            case 6:
              _context113.t2 = _context113.t1;
              _context113.t3 = {
                intermediate_session_token: _context113.t2
              };
              _context113.t4 = {
                url: '/b2b/discovery/organizations',
                body: _context113.t3,
                errorMessage: 'Failed to retrieve discovered organizations',
                method: 'POST'
              };
              return _context113.abrupt("return", _context113.t0.fetchSDK.call(_context113.t0, _context113.t4));
            case 10:
            case "end":
              return _context113.stop();
          }
        }, _callee113, this);
      }));
    },
    create: function create(data) {
      return __awaiter$1(_this18, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee114() {
        var requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee114$(_context114) {
          while (1) switch (_context114.prev = _context114.next) {
            case 0:
              validate('stytch.discovery.organizations.create').isNumber('session_duration_minutes', data.session_duration_minutes).isOptionalString('organization_name', data.organization_name).isOptionalString('organization_slug', data.organization_slug).isOptionalString('organization_logo_url', data.organization_logo_url).isOptionalString('sso_jit_provisioning', data.sso_jit_provisioning).isOptionalStringArray('email_allowed_domains', data.email_allowed_domains).isOptionalString('email_invites', data.email_invites).isOptionalString('auth_methods', data.auth_methods).isOptionalStringArray('allowed_auth_methods', data.allowed_auth_methods).isOptionalString('mfa_policy', data.mfa_policy);
              _context114.t0 = Object;
              _context114.t1 = Object.assign({}, data);
              _context114.next = 5;
              return this._subscriptionService.getIntermediateSessionToken();
            case 5:
              _context114.t2 = _context114.sent;
              if (_context114.t2) {
                _context114.next = 8;
                break;
              }
              _context114.t2 = undefined;
            case 8:
              _context114.t3 = _context114.t2;
              _context114.t4 = {
                intermediate_session_token: _context114.t3
              };
              requestBody = _context114.t0.assign.call(_context114.t0, _context114.t1, _context114.t4);
              _context114.next = 13;
              return this._networkClient.fetchSDK({
                url: '/b2b/discovery/organizations/create',
                body: requestBody,
                errorMessage: 'Failed to create organization and member',
                method: 'POST'
              });
            case 13:
              resp = _context114.sent;
              if (resp.member_session) {
                this._subscriptionService.updateStateAndTokens({
                  state: {
                    session: resp.member_session,
                    member: resp.member,
                    organization: resp.organization
                  },
                  session_token: resp.session_token,
                  session_jwt: resp.session_jwt,
                  intermediate_session_token: null
                });
              } else {
                this._subscriptionService.updateStateAndTokens({
                  state: null,
                  session_token: null,
                  session_jwt: null,
                  intermediate_session_token: resp.intermediate_session_token
                });
              }
              return _context114.abrupt("return", resp);
            case 16:
            case "end":
              return _context114.stop();
          }
        }, _callee114, this);
      }));
    }
  };
  this.intermediateSessions = {
    exchange: function exchange(data) {
      return __awaiter$1(_this18, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee115() {
        var requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee115$(_context115) {
          while (1) switch (_context115.prev = _context115.next) {
            case 0:
              validate('stytch.discovery.intermediateSessions.exchange').isString('organization_id', data.organization_id).isNumber('session_duration_minutes', data.session_duration_minutes).isOptionalString('locale', data.locale);
              _context115.t0 = Object;
              _context115.t1 = Object.assign({}, data);
              _context115.next = 5;
              return this._subscriptionService.getIntermediateSessionToken();
            case 5:
              _context115.t2 = _context115.sent;
              if (_context115.t2) {
                _context115.next = 8;
                break;
              }
              _context115.t2 = undefined;
            case 8:
              _context115.t3 = _context115.t2;
              _context115.t4 = {
                intermediate_session_token: _context115.t3
              };
              requestBody = _context115.t0.assign.call(_context115.t0, _context115.t1, _context115.t4);
              _context115.next = 13;
              return this._networkClient.fetchSDK({
                url: '/b2b/discovery/intermediate_sessions/exchange',
                body: requestBody,
                errorMessage: 'Failed to exchange intermediate session',
                method: 'POST'
              });
            case 13:
              resp = _context115.sent;
              if (resp.member_session) {
                this._subscriptionService.updateStateAndTokens({
                  state: {
                    session: resp.member_session,
                    member: resp.member,
                    organization: resp.organization
                  },
                  session_token: resp.session_token,
                  session_jwt: resp.session_jwt,
                  intermediate_session_token: null
                });
              } else {
                this._subscriptionService.updateStateAndTokens({
                  state: null,
                  session_token: null,
                  session_jwt: null,
                  intermediate_session_token: resp.intermediate_session_token
                });
              }
              return _context115.abrupt("return", resp);
            case 16:
            case "end":
              return _context115.stop();
          }
        }, _callee115, this);
      }));
    }
  };
});
var DefaultDynamicConfig = Promise.resolve({
  pkceRequiredForPasswordResets: false
});
var HeadlessB2BPasswordsClient = /*#__PURE__*/function () {
  function HeadlessB2BPasswordsClient(_networkClient, _subscriptionService, _pkceManager) {
    var _config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DefaultDynamicConfig;
    var dfpProtectedAuth = arguments.length > 4 ? arguments[4] : undefined;
    _classCallCheck(this, HeadlessB2BPasswordsClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this._pkceManager = _pkceManager;
    this._config = _config;
    this.dfpProtectedAuth = dfpProtectedAuth;
  }
  _createClass(HeadlessB2BPasswordsClient, [{
    key: "getCodeChallenge",
    value: function getCodeChallenge() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee116() {
        var _yield$this$_config6, pkceRequiredForPasswordResets, keyPair;
        return _regeneratorRuntime().wrap(function _callee116$(_context116) {
          while (1) switch (_context116.prev = _context116.next) {
            case 0:
              _context116.next = 2;
              return this._config;
            case 2:
              _yield$this$_config6 = _context116.sent;
              pkceRequiredForPasswordResets = _yield$this$_config6.pkceRequiredForPasswordResets;
              if (pkceRequiredForPasswordResets) {
                _context116.next = 6;
                break;
              }
              return _context116.abrupt("return", undefined);
            case 6:
              _context116.next = 8;
              return this._pkceManager.getPKPair();
            case 8:
              keyPair = _context116.sent;
              if (!keyPair) {
                _context116.next = 11;
                break;
              }
              return _context116.abrupt("return", keyPair.code_challenge);
            case 11:
              _context116.next = 13;
              return this._pkceManager.startPKCETransaction();
            case 13:
              keyPair = _context116.sent;
              return _context116.abrupt("return", keyPair.code_challenge);
            case 15:
            case "end":
              return _context116.stop();
          }
        }, _callee116, this);
      }));
    }
  }, {
    key: "authenticate",
    value: function authenticate(options) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee117() {
        var pkPair, code_verifier, _yield$this$dfpProtec24, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee117$(_context117) {
          while (1) switch (_context117.prev = _context117.next) {
            case 0:
              validate('stytch.passwords.authenticate').isString('org_id', options.organization_id).isString('password', options.password).isString('email_address', options.email_address).isNumber('session_duration_minutes', options.session_duration_minutes).isOptionalString('locale', options.locale);
              _context117.next = 3;
              return this._pkceManager.getPKPair();
            case 3:
              pkPair = _context117.sent;
              code_verifier = pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier;
              _context117.next = 7;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 7:
              _yield$this$dfpProtec24 = _context117.sent;
              dfp_telemetry_id = _yield$this$dfpProtec24.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec24.captcha_token;
              _context117.t0 = this._networkClient;
              _context117.t1 = options.organization_id;
              _context117.t2 = options.email_address;
              _context117.t3 = options.password;
              _context117.t4 = options.session_duration_minutes;
              _context117.t5 = options.locale;
              _context117.t6 = captcha_token;
              _context117.t7 = dfp_telemetry_id;
              _context117.t8 = code_verifier;
              _context117.next = 21;
              return this._subscriptionService.getIntermediateSessionToken();
            case 21:
              _context117.t9 = _context117.sent;
              if (_context117.t9) {
                _context117.next = 24;
                break;
              }
              _context117.t9 = undefined;
            case 24:
              _context117.t10 = _context117.t9;
              _context117.t11 = {
                organization_id: _context117.t1,
                email_address: _context117.t2,
                password: _context117.t3,
                session_duration_minutes: _context117.t4,
                locale: _context117.t5,
                captcha_token: _context117.t6,
                dfp_telemetry_id: _context117.t7,
                code_verifier: _context117.t8,
                intermediate_session_token: _context117.t10
              };
              _context117.t12 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context117.t13 = {
                url: '/b2b/passwords/authenticate',
                method: 'POST',
                errorMessage: 'Failed to authenticate password.',
                body: _context117.t11,
                retryCallback: _context117.t12
              };
              _context117.next = 30;
              return _context117.t0.retriableFetchSDK.call(_context117.t0, _context117.t13);
            case 30:
              resp = _context117.sent;
              if (resp.member_session) {
                this._subscriptionService.updateStateAndTokens({
                  state: {
                    session: resp.member_session,
                    member: resp.member,
                    organization: resp.organization
                  },
                  session_token: resp.session_token,
                  session_jwt: resp.session_jwt,
                  intermediate_session_token: null
                });
              } else {
                this._subscriptionService.updateStateAndTokens({
                  state: null,
                  session_token: null,
                  session_jwt: null,
                  intermediate_session_token: resp.intermediate_session_token
                });
              }
              return _context117.abrupt("return", resp);
            case 33:
            case "end":
              return _context117.stop();
          }
        }, _callee117, this);
      }));
    }
  }, {
    key: "resetByEmailStart",
    value: function resetByEmailStart(options) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee118() {
        var code_challenge, _yield$this$dfpProtec25, dfp_telemetry_id, captcha_token;
        return _regeneratorRuntime().wrap(function _callee118$(_context118) {
          while (1) switch (_context118.prev = _context118.next) {
            case 0:
              validate('stytch.passwords.resetByEmailStart').isString('email', options.email_address).isOptionalString('login_redirect_url', options.login_redirect_url).isOptionalString('reset_password_redirect_url', options.reset_password_redirect_url).isOptionalString('reset_password_template_id', options.reset_password_template_id).isOptionalNumber('reset_password_expiration_minutes', options.reset_password_expiration_minutes);
              _context118.next = 3;
              return this.getCodeChallenge();
            case 3:
              code_challenge = _context118.sent;
              _context118.next = 6;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 6:
              _yield$this$dfpProtec25 = _context118.sent;
              dfp_telemetry_id = _yield$this$dfpProtec25.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec25.captcha_token;
              return _context118.abrupt("return", this._networkClient.retriableFetchSDK({
                url: '/b2b/passwords/email/reset/start',
                method: 'POST',
                errorMessage: 'Failed to start password reset flow.',
                body: {
                  organization_id: options.organization_id,
                  email_address: options.email_address,
                  login_redirect_url: options.login_redirect_url,
                  reset_password_redirect_url: options.reset_password_redirect_url,
                  reset_password_expiration_minutes: options.reset_password_expiration_minutes,
                  reset_password_template_id: options.reset_password_template_id,
                  code_challenge: code_challenge,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              }));
            case 10:
            case "end":
              return _context118.stop();
          }
        }, _callee118, this);
      }));
    }
  }, {
    key: "resetByEmail",
    value: function resetByEmail(options) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee119() {
        var _yield$this$dfpProtec26, dfp_telemetry_id, captcha_token, pkPair, code_verifier, resp;
        return _regeneratorRuntime().wrap(function _callee119$(_context119) {
          while (1) switch (_context119.prev = _context119.next) {
            case 0:
              validate('stytch.passwords.resetByEmail').isString('password_reset_token', options.password_reset_token).isString('password', options.password).isNumber('session_duration_minutes', options.session_duration_minutes).isOptionalString('locale', options.locale);
              _context119.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec26 = _context119.sent;
              dfp_telemetry_id = _yield$this$dfpProtec26.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec26.captcha_token;
              _context119.next = 8;
              return this._pkceManager.getPKPair();
            case 8:
              pkPair = _context119.sent;
              code_verifier = pkPair === null || pkPair === void 0 ? void 0 : pkPair.code_verifier;
              _context119.t0 = this._networkClient;
              _context119.t1 = options.password_reset_token;
              _context119.t2 = options.password;
              _context119.t3 = options.session_duration_minutes;
              _context119.t4 = options.locale;
              _context119.t5 = captcha_token;
              _context119.t6 = dfp_telemetry_id;
              _context119.t7 = code_verifier;
              _context119.next = 20;
              return this._subscriptionService.getIntermediateSessionToken();
            case 20:
              _context119.t8 = _context119.sent;
              if (_context119.t8) {
                _context119.next = 23;
                break;
              }
              _context119.t8 = undefined;
            case 23:
              _context119.t9 = _context119.t8;
              _context119.t10 = {
                password_reset_token: _context119.t1,
                password: _context119.t2,
                session_duration_minutes: _context119.t3,
                locale: _context119.t4,
                captcha_token: _context119.t5,
                dfp_telemetry_id: _context119.t6,
                code_verifier: _context119.t7,
                intermediate_session_token: _context119.t9
              };
              _context119.t11 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context119.t12 = {
                url: '/b2b/passwords/email/reset',
                method: 'POST',
                errorMessage: 'Failed to reset password.',
                body: _context119.t10,
                retryCallback: _context119.t11
              };
              _context119.next = 29;
              return _context119.t0.retriableFetchSDK.call(_context119.t0, _context119.t12);
            case 29:
              resp = _context119.sent;
              this._pkceManager.clearPKPair();
              if (resp.member_session) {
                this._subscriptionService.updateStateAndTokens({
                  state: {
                    session: resp.member_session,
                    member: resp.member,
                    organization: resp.organization
                  },
                  session_token: resp.session_token,
                  session_jwt: resp.session_jwt,
                  intermediate_session_token: null
                });
              } else {
                this._subscriptionService.updateStateAndTokens({
                  state: null,
                  session_token: null,
                  session_jwt: null,
                  intermediate_session_token: resp.intermediate_session_token
                });
              }
              return _context119.abrupt("return", resp);
            case 33:
            case "end":
              return _context119.stop();
          }
        }, _callee119, this);
      }));
    }
  }, {
    key: "resetByExistingPassword",
    value: function resetByExistingPassword(options) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee120() {
        var _yield$this$dfpProtec27, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee120$(_context120) {
          while (1) switch (_context120.prev = _context120.next) {
            case 0:
              validate('stytch.passwords.resetByExistingPassword').isString('email', options.email_address).isString('existing_password', options.existing_password).isString('new_password', options.new_password).isOptionalString('locale', options.locale);
              _context120.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec27 = _context120.sent;
              dfp_telemetry_id = _yield$this$dfpProtec27.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec27.captcha_token;
              _context120.next = 8;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/passwords/existing_password/reset',
                method: 'POST',
                errorMessage: 'Failed to reset password.',
                body: {
                  organization_id: options.organization_id,
                  email_address: options.email_address,
                  existing_password: options.existing_password,
                  new_password: options.new_password,
                  locale: options.locale,
                  session_duration_minutes: options.session_duration_minutes,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 8:
              resp = _context120.sent;
              if (resp.member_session) {
                this._subscriptionService.updateStateAndTokens({
                  state: {
                    session: resp.member_session,
                    member: resp.member,
                    organization: resp.organization
                  },
                  session_token: resp.session_token,
                  session_jwt: resp.session_jwt,
                  intermediate_session_token: null
                });
              } else {
                this._subscriptionService.updateStateAndTokens({
                  state: null,
                  session_token: null,
                  session_jwt: null,
                  intermediate_session_token: resp.intermediate_session_token
                });
              }
              return _context120.abrupt("return", resp);
            case 11:
            case "end":
              return _context120.stop();
          }
        }, _callee120, this);
      }));
    }
  }, {
    key: "resetBySession",
    value: function resetBySession(options) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee121() {
        var _yield$this$dfpProtec28, dfp_telemetry_id, captcha_token, resp;
        return _regeneratorRuntime().wrap(function _callee121$(_context121) {
          while (1) switch (_context121.prev = _context121.next) {
            case 0:
              validate('stytch.passwords.resetBySession').isString('password', options.password);
              _context121.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec28 = _context121.sent;
              dfp_telemetry_id = _yield$this$dfpProtec28.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec28.captcha_token;
              _context121.next = 8;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/passwords/session/reset',
                method: 'POST',
                errorMessage: 'Failed to reset by session.',
                body: {
                  password: options.password,
                  captcha_token: captcha_token,
                  dfp_telemetry_id: dfp_telemetry_id
                },
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 8:
              resp = _context121.sent;
              this._subscriptionService.updateStateAndTokens({
                state: {
                  session: resp.member_session,
                  member: resp.member,
                  organization: resp.organization
                },
                session_token: resp.session_token,
                session_jwt: resp.session_jwt,
                intermediate_session_token: null
              });
              return _context121.abrupt("return", resp);
            case 11:
            case "end":
              return _context121.stop();
          }
        }, _callee121, this);
      }));
    }
  }, {
    key: "strengthCheck",
    value: function strengthCheck(options) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee122() {
        return _regeneratorRuntime().wrap(function _callee122$(_context122) {
          while (1) switch (_context122.prev = _context122.next) {
            case 0:
              validate('stytch.passwords.strengthCheck').isOptionalString('email', options.email_address).isString('password', options.password);
              return _context122.abrupt("return", this._networkClient.fetchSDK({
                url: '/b2b/passwords/strength_check',
                method: 'POST',
                errorMessage: 'Failed to check password strength.',
                body: {
                  email_address: options.email_address,
                  password: options.password
                }
              }));
            case 2:
            case "end":
              return _context122.stop();
          }
        }, _callee122, this);
      }));
    }
  }]);
  return HeadlessB2BPasswordsClient;
}();
var HeadlessB2BOTPsClient = /*#__PURE__*/_createClass(function HeadlessB2BOTPsClient(_networkClient, _subscriptionService, dfpProtectedAuth) {
  var _this19 = this;
  _classCallCheck(this, HeadlessB2BOTPsClient);
  this._networkClient = _networkClient;
  this._subscriptionService = _subscriptionService;
  this.dfpProtectedAuth = dfpProtectedAuth;
  this.sms = {
    send: function send(data) {
      return __awaiter$1(_this19, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee123() {
        var _yield$this$dfpProtec29, dfp_telemetry_id, captcha_token;
        return _regeneratorRuntime().wrap(function _callee123$(_context123) {
          while (1) switch (_context123.prev = _context123.next) {
            case 0:
              validate('stytch.otps.sms.send').isString('organization_id', data.organization_id).isString('member_id', data.member_id).isOptionalString('mfa_phone_number', data.mfa_phone_number).isOptionalString('locale', data.locale);
              _context123.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec29 = _context123.sent;
              dfp_telemetry_id = _yield$this$dfpProtec29.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec29.captcha_token;
              _context123.t0 = this._networkClient;
              _context123.t1 = Object;
              _context123.t2 = Object.assign({}, data);
              _context123.t3 = dfp_telemetry_id;
              _context123.t4 = captcha_token;
              _context123.next = 13;
              return this._subscriptionService.getIntermediateSessionToken();
            case 13:
              _context123.t5 = _context123.sent;
              if (_context123.t5) {
                _context123.next = 16;
                break;
              }
              _context123.t5 = undefined;
            case 16:
              _context123.t6 = _context123.t5;
              _context123.t7 = {
                dfp_telemetry_id: _context123.t3,
                captcha_token: _context123.t4,
                intermediate_session_token: _context123.t6
              };
              _context123.t8 = _context123.t1.assign.call(_context123.t1, _context123.t2, _context123.t7);
              _context123.t9 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context123.t10 = {
                url: '/b2b/otps/sms/send',
                body: _context123.t8,
                errorMessage: 'Failed to send one time passcode',
                method: 'POST',
                retryCallback: _context123.t9
              };
              return _context123.abrupt("return", _context123.t0.retriableFetchSDK.call(_context123.t0, _context123.t10));
            case 22:
            case "end":
              return _context123.stop();
          }
        }, _callee123, this);
      }));
    },
    authenticate: function authenticate(data) {
      return __awaiter$1(_this19, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee124() {
        var _yield$this$dfpProtec30, dfp_telemetry_id, captcha_token, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee124$(_context124) {
          while (1) switch (_context124.prev = _context124.next) {
            case 0:
              validate('stytch.otps.sms.authenticate').isString('organization_id', data.organization_id).isString('member_id', data.member_id).isString('code', data.code).isOptionalString('set_mfa_enrollment', data.set_mfa_enrollment);
              _context124.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec30 = _context124.sent;
              dfp_telemetry_id = _yield$this$dfpProtec30.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec30.captcha_token;
              _context124.t0 = Object;
              _context124.t1 = Object.assign({}, data);
              _context124.t2 = dfp_telemetry_id;
              _context124.t3 = captcha_token;
              _context124.next = 12;
              return this._subscriptionService.getIntermediateSessionToken();
            case 12:
              _context124.t4 = _context124.sent;
              if (_context124.t4) {
                _context124.next = 15;
                break;
              }
              _context124.t4 = undefined;
            case 15:
              _context124.t5 = _context124.t4;
              _context124.t6 = {
                dfp_telemetry_id: _context124.t2,
                captcha_token: _context124.t3,
                intermediate_session_token: _context124.t5
              };
              requestBody = _context124.t0.assign.call(_context124.t0, _context124.t1, _context124.t6);
              _context124.next = 20;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/otps/sms/authenticate',
                body: requestBody,
                errorMessage: 'Failed to authenticate one time passcode',
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 20:
              resp = _context124.sent;
              this._subscriptionService.updateStateAndTokens({
                state: {
                  session: resp.member_session,
                  member: resp.member,
                  organization: resp.organization
                },
                session_token: resp.session_token,
                session_jwt: resp.session_jwt,
                intermediate_session_token: null
              });
              return _context124.abrupt("return", resp);
            case 23:
            case "end":
              return _context124.stop();
          }
        }, _callee124, this);
      }));
    }
  };
});
var HeadlessB2BTOTPsClient = /*#__PURE__*/function () {
  function HeadlessB2BTOTPsClient(_networkClient, _subscriptionService, dfpProtectedAuth) {
    _classCallCheck(this, HeadlessB2BTOTPsClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this.dfpProtectedAuth = dfpProtectedAuth;
  }
  _createClass(HeadlessB2BTOTPsClient, [{
    key: "create",
    value: function create(data) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee125() {
        var _yield$this$dfpProtec31, dfp_telemetry_id, captcha_token;
        return _regeneratorRuntime().wrap(function _callee125$(_context125) {
          while (1) switch (_context125.prev = _context125.next) {
            case 0:
              validate('stytch.totp.create').isString('organization_id', data.organization_id).isString('member_id', data.member_id).isOptionalNumber('expiration_minutes', data.expiration_minutes);
              _context125.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec31 = _context125.sent;
              dfp_telemetry_id = _yield$this$dfpProtec31.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec31.captcha_token;
              _context125.t0 = this._networkClient;
              _context125.t1 = Object;
              _context125.t2 = Object.assign({}, data);
              _context125.t3 = dfp_telemetry_id;
              _context125.t4 = captcha_token;
              _context125.next = 13;
              return this._subscriptionService.getIntermediateSessionToken();
            case 13:
              _context125.t5 = _context125.sent;
              if (_context125.t5) {
                _context125.next = 16;
                break;
              }
              _context125.t5 = undefined;
            case 16:
              _context125.t6 = _context125.t5;
              _context125.t7 = {
                dfp_telemetry_id: _context125.t3,
                captcha_token: _context125.t4,
                intermediate_session_token: _context125.t6
              };
              _context125.t8 = _context125.t1.assign.call(_context125.t1, _context125.t2, _context125.t7);
              _context125.t9 = this.dfpProtectedAuth.retryWithCaptchaAndDFP;
              _context125.t10 = {
                url: '/b2b/totp',
                body: _context125.t8,
                errorMessage: 'Failed to create TOTP',
                method: 'POST',
                retryCallback: _context125.t9
              };
              return _context125.abrupt("return", _context125.t0.retriableFetchSDK.call(_context125.t0, _context125.t10));
            case 22:
            case "end":
              return _context125.stop();
          }
        }, _callee125, this);
      }));
    }
  }, {
    key: "authenticate",
    value: function authenticate(data) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee126() {
        var _yield$this$dfpProtec32, dfp_telemetry_id, captcha_token, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee126$(_context126) {
          while (1) switch (_context126.prev = _context126.next) {
            case 0:
              validate('stytch.totp.authenticate').isString('organization_id', data.organization_id).isString('member_id', data.member_id).isString('code', data.code).isOptionalString('set_mfa_enrollment', data.set_mfa_enrollment).isOptionalBoolean('set_default_mfa', data.set_default_mfa);
              _context126.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec32 = _context126.sent;
              dfp_telemetry_id = _yield$this$dfpProtec32.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec32.captcha_token;
              _context126.t0 = Object;
              _context126.t1 = Object.assign({}, data);
              _context126.t2 = dfp_telemetry_id;
              _context126.t3 = captcha_token;
              _context126.next = 12;
              return this._subscriptionService.getIntermediateSessionToken();
            case 12:
              _context126.t4 = _context126.sent;
              if (_context126.t4) {
                _context126.next = 15;
                break;
              }
              _context126.t4 = undefined;
            case 15:
              _context126.t5 = _context126.t4;
              _context126.t6 = {
                dfp_telemetry_id: _context126.t2,
                captcha_token: _context126.t3,
                intermediate_session_token: _context126.t5
              };
              requestBody = _context126.t0.assign.call(_context126.t0, _context126.t1, _context126.t6);
              _context126.next = 20;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/totp/authenticate',
                body: requestBody,
                errorMessage: 'Failed to authenticate TOTP',
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 20:
              resp = _context126.sent;
              this._subscriptionService.updateStateAndTokens({
                state: {
                  session: resp.member_session,
                  member: resp.member,
                  organization: resp.organization
                },
                session_token: resp.session_token,
                session_jwt: resp.session_jwt,
                intermediate_session_token: null
              });
              return _context126.abrupt("return", resp);
            case 23:
            case "end":
              return _context126.stop();
          }
        }, _callee126, this);
      }));
    }
  }]);
  return HeadlessB2BTOTPsClient;
}();
var HeadlessB2BRecoveryCodesClient = /*#__PURE__*/function () {
  function HeadlessB2BRecoveryCodesClient(_networkClient, _subscriptionService, dfpProtectedAuth) {
    _classCallCheck(this, HeadlessB2BRecoveryCodesClient);
    this._networkClient = _networkClient;
    this._subscriptionService = _subscriptionService;
    this.dfpProtectedAuth = dfpProtectedAuth;
  }
  _createClass(HeadlessB2BRecoveryCodesClient, [{
    key: "recover",
    value: function recover(data) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee127() {
        var _yield$this$dfpProtec33, dfp_telemetry_id, captcha_token, requestBody, resp;
        return _regeneratorRuntime().wrap(function _callee127$(_context127) {
          while (1) switch (_context127.prev = _context127.next) {
            case 0:
              validate('stytch.recoveryCodes.recover').isString('organization_id', data.organization_id).isString('member_id', data.member_id).isString('recovery_code', data.recovery_code);
              _context127.next = 3;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 3:
              _yield$this$dfpProtec33 = _context127.sent;
              dfp_telemetry_id = _yield$this$dfpProtec33.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec33.captcha_token;
              _context127.t0 = Object;
              _context127.t1 = Object.assign({}, data);
              _context127.t2 = dfp_telemetry_id;
              _context127.t3 = captcha_token;
              _context127.next = 12;
              return this._subscriptionService.getIntermediateSessionToken();
            case 12:
              _context127.t4 = _context127.sent;
              if (_context127.t4) {
                _context127.next = 15;
                break;
              }
              _context127.t4 = undefined;
            case 15:
              _context127.t5 = _context127.t4;
              _context127.t6 = {
                dfp_telemetry_id: _context127.t2,
                captcha_token: _context127.t3,
                intermediate_session_token: _context127.t5
              };
              requestBody = _context127.t0.assign.call(_context127.t0, _context127.t1, _context127.t6);
              _context127.next = 20;
              return this._networkClient.retriableFetchSDK({
                url: '/b2b/recovery_codes/recover',
                body: requestBody,
                errorMessage: 'Failed to recover using recovery code',
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              });
            case 20:
              resp = _context127.sent;
              this._subscriptionService.updateStateAndTokens({
                state: {
                  session: resp.member_session,
                  member: resp.member,
                  organization: resp.organization
                },
                session_token: resp.session_token,
                session_jwt: resp.session_jwt,
                intermediate_session_token: null
              });
              return _context127.abrupt("return", resp);
            case 23:
            case "end":
              return _context127.stop();
          }
        }, _callee127, this);
      }));
    }
  }, {
    key: "rotate",
    value: function rotate() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee128() {
        var _yield$this$dfpProtec34, dfp_telemetry_id, captcha_token;
        return _regeneratorRuntime().wrap(function _callee128$(_context128) {
          while (1) switch (_context128.prev = _context128.next) {
            case 0:
              _context128.next = 2;
              return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha();
            case 2:
              _yield$this$dfpProtec34 = _context128.sent;
              dfp_telemetry_id = _yield$this$dfpProtec34.dfp_telemetry_id;
              captcha_token = _yield$this$dfpProtec34.captcha_token;
              return _context128.abrupt("return", this._networkClient.retriableFetchSDK({
                url: '/b2b/recovery_codes/rotate',
                body: {
                  dfp_telemetry_id: dfp_telemetry_id,
                  captcha_token: captcha_token
                },
                errorMessage: 'Failed to rotate recovery codes',
                method: 'POST',
                retryCallback: this.dfpProtectedAuth.retryWithCaptchaAndDFP
              }));
            case 6:
            case "end":
              return _context128.stop();
          }
        }, _callee128, this);
      }));
    }
  }, {
    key: "get",
    value: function get() {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee129() {
        return _regeneratorRuntime().wrap(function _callee129$(_context129) {
          while (1) switch (_context129.prev = _context129.next) {
            case 0:
              return _context129.abrupt("return", this._networkClient.fetchSDK({
                url: '/b2b/recovery_codes',
                errorMessage: 'Failed to get recovery codes',
                method: 'GET'
              }));
            case 1:
            case "end":
              return _context129.stop();
          }
        }, _callee129, this);
      }));
    }
  }]);
  return HeadlessB2BRecoveryCodesClient;
}();
var HeadlessB2BRBACClient = /*#__PURE__*/function () {
  function HeadlessB2BRBACClient(cachedConfig, dynamicConfig, _subscriptionService) {
    var _this20 = this;
    _classCallCheck(this, HeadlessB2BRBACClient);
    this._subscriptionService = _subscriptionService;
    this.isAuthorizedSync = function (resourceId, action) {
      var _a;
      return !!((_a = _this20.cachedPolicy) === null || _a === void 0 ? void 0 : _a.callerIsAuthorized(_this20.roleIds(), resourceId, action));
    };
    this.isAuthorized = function (resourceId, action) {
      return _this20.policyPromise.then(function (policy) {
        return policy.callerIsAuthorized(_this20.roleIds(), resourceId, action);
      });
    };
    this.cachedPolicy = cachedConfig.rbacPolicy ? RBACPolicy.fromJSON(cachedConfig.rbacPolicy) : null;
    this.policyPromise = dynamicConfig.then(function (data) {
      if (!data.rbacPolicy) {
        logger.error('Unable to retrieve RBAC policy from servers. Assuming caller has no permissions.');
        return new RBACPolicy([], []);
      }
      _this20.cachedPolicy = RBACPolicy.fromJSON(data.rbacPolicy);
      return _this20.cachedPolicy;
    });
  }
  _createClass(HeadlessB2BRBACClient, [{
    key: "allPermissions",
    value: function allPermissions() {
      var _this21 = this;
      return this.policyPromise.then(function (policy) {
        return policy.allPermissionsForCaller(_this21.roleIds());
      });
    }
  }, {
    key: "roleIds",
    value: function roleIds() {
      var _a;
      var session = this._subscriptionService.getSession();
      if (!session) {
        return [];
      }
      return (_a = session.roles) !== null && _a !== void 0 ? _a : [];
    }
  }]);
  return HeadlessB2BRBACClient;
}();
var IframeHostClient = /*#__PURE__*/function () {
  function IframeHostClient(iframeURL) {
    _classCallCheck(this, IframeHostClient);
    this.iframeURL = iframeURL;
    this.createIframe();
  }
  _createClass(IframeHostClient, [{
    key: "createIframe",
    value: function createIframe() {
      var existingIframe = document.querySelector("[src~=\"".concat(this.iframeURL, "\"]"));
      if (!existingIframe) {
        existingIframe = document.createElement('iframe');
        existingIframe.src = this.iframeURL;
        existingIframe.style.position = 'absolute';
        existingIframe.style.width = '0';
        existingIframe.style.height = '0';
        existingIframe.style.border = '0';
        document.body.appendChild(existingIframe);
      } else {
        logger.warn("It looks like you're creating multiple copies of the Stytch client." + ' This behavior is unsupported, and unintended side effects may occur. ' + "Make sure you are creating the Stytch client at the global level, and not inside a component's render function.");
      }
      if (existingIframe.dataset.loaded === 'true') {
        this.frame = Promise.resolve(existingIframe);
        return;
      }
      this.frame = new Promise(function (resolve) {
        existingIframe.addEventListener('load', function () {
          existingIframe.dataset.loaded = 'true';
          resolve(existingIframe);
        }, {
          once: true
        });
      });
    }
  }, {
    key: "call",
    value: function call(method, args) {
      return __awaiter$1(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee130() {
        var _this22 = this;
        var frame, channel;
        return _regeneratorRuntime().wrap(function _callee130$(_context130) {
          while (1) switch (_context130.prev = _context130.next) {
            case 0:
              _context130.next = 2;
              return this.frame;
            case 2:
              frame = _context130.sent;
              channel = new MessageChannel();
              return _context130.abrupt("return", new Promise(function (resolve, reject) {
                var _a;
                channel.port1.onmessage = function (event) {
                  var resp = event.data;
                  channel.port1.close();
                  if (resp.success) {
                    resolve(resp.payload);
                  } else {
                    reject(ErrorMarshaller.unmarshall(resp.error));
                  }
                };
                var message = {
                  method: method,
                  args: args
                };
                (_a = frame.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(message, _this22.iframeURL, [channel.port2]);
              }));
            case 5:
            case "end":
              return _context130.stop();
          }
        }, _callee130, this);
      }));
    }
  }]);
  return IframeHostClient;
}();
var SearchDataManager = /*#__PURE__*/function () {
  function SearchDataManager(_networkClient, dfpProtectedAuth) {
    _classCallCheck(this, SearchDataManager);
    this._networkClient = _networkClient;
    this.dfpProtectedAuth = dfpProtectedAuth;
  }
  _createClass(SearchDataManager, [{
    key: "searchUser",
    value: function searchUser(email) {
      var _this24 = this;
      return this.dfpProtectedAuth.getDFPTelemetryIDAndCaptcha().then(function (_ref7) {
        var dfp_telemetry_id = _ref7.dfp_telemetry_id,
          captcha_token = _ref7.captcha_token;
        return _this24._networkClient.fetchSDK({
          url: "/users/search",
          method: 'POST',
          body: {
            email: email,
            dfp_telemetry_id: dfp_telemetry_id,
            captcha_token: captcha_token
          },
          errorMessage: "Error searching for user ".concat(email)
        });
      });
    }
  }, {
    key: "searchMember",
    value: function searchMember(email, organization_id) {
      return this._networkClient.fetchSDK({
        url: "/b2b/organizations/members/search",
        method: 'POST',
        body: {
          email_address: email,
          organization_id: organization_id
        },
        errorMessage: "Error searching for member ".concat(email)
      });
    }
  }]);
  return SearchDataManager;
}();
var shouldTryRefresh = function shouldTryRefresh(state) {
  return !!(state === null || state === void 0 ? void 0 : state.session);
};
var SessionManager = /*#__PURE__*/function () {
  function SessionManager(_subscriptionService, _headlessSessionClient) {
    var _this25 = this;
    _classCallCheck(this, SessionManager);
    this._subscriptionService = _subscriptionService;
    this._headlessSessionClient = _headlessSessionClient;
    this._onDataChange = function (state) {
      if (shouldTryRefresh(state)) {
        _this25.scheduleBackgroundRefresh();
      } else {
        _this25.cancelBackgroundRefresh();
      }
    };
    this._reauthenticateWithBackoff = function () {
      return __awaiter$1(_this25, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee132() {
        var count;
        return _regeneratorRuntime().wrap(function _callee132$(_context132) {
          while (1) switch (_context132.prev = _context132.next) {
            case 0:
              count = 0;
            case 1:
              _context132.prev = 2;
              _context132.next = 5;
              return this._headlessSessionClient.authenticate();
            case 5:
              return _context132.abrupt("return", _context132.sent);
            case 8:
              _context132.prev = 8;
              _context132.t0 = _context132["catch"](2);
              if (!SessionManager.isUnrecoverableError(_context132.t0)) {
                _context132.next = 12;
                break;
              }
              return _context132.abrupt("return", Promise.reject(_context132.t0));
            case 12:
              count++;
              _context132.next = 15;
              return new Promise(function (done) {
                return setTimeout(done, SessionManager.timeoutForAttempt(count));
              });
            case 15:
              _context132.next = 1;
              break;
            case 17:
            case "end":
              return _context132.stop();
          }
        }, _callee132, this, [[2, 8]]);
      }));
    };
    this.timeout = null;
    this._subscriptionService.subscribeToState(this._onDataChange);
  }
  _createClass(SessionManager, [{
    key: "performBackgroundRefresh",
    value: function performBackgroundRefresh() {
      var _this26 = this;
      this._reauthenticateWithBackoff().then(function () {
        _this26.scheduleBackgroundRefresh();
      })["catch"](function (error) {
        logger.warn('Session background refresh failed. Signalling to app that user is logged out.', {
          error: error
        });
        _this26._subscriptionService.destroySession();
      });
    }
  }, {
    key: "scheduleBackgroundRefresh",
    value: function scheduleBackgroundRefresh() {
      var _this27 = this;
      this.cancelBackgroundRefresh();
      this.timeout = setTimeout(function () {
        _this27.performBackgroundRefresh();
      }, SessionManager.REFRESH_INTERVAL_MS);
    }
  }, {
    key: "cancelBackgroundRefresh",
    value: function cancelBackgroundRefresh() {
      if (this.timeout !== null) {
        clearTimeout(this.timeout);
        this.timeout = null;
      }
    }
  }], [{
    key: "timeoutForAttempt",
    value: function timeoutForAttempt(count) {
      count = Math.min(count, 7);
      var jitter = Math.floor(Math.random() * 350) - 175;
      var delayMS = 2000 * Math.pow(2, count);
      return jitter + delayMS;
    }
  }, {
    key: "isUnrecoverableError",
    value: function isUnrecoverableError(error) {
      return UNRECOVERABLE_ERROR_TYPES.includes(error.error_type);
    }
  }]);
  return SessionManager;
}();
SessionManager.REFRESH_INTERVAL_MS = 1000 * 60 * 3;
var StateChangeClient = /*#__PURE__*/_createClass(function StateChangeClient(_subscriptionService, emptyState) {
  var _this28 = this;
  _classCallCheck(this, StateChangeClient);
  this._subscriptionService = _subscriptionService;
  this.emptyState = emptyState;
  this.onStateChange = function (callback) {
    return _this28._subscriptionService.subscribeToState(function (state) {
      callback(state !== null && state !== void 0 ? state : _this28.emptyState);
    });
  };
});
var WILDCARD_ACTION = '*';
var RBACPolicy = /*#__PURE__*/function () {
  function RBACPolicy(roles, resources) {
    var _this34 = this;
    _classCallCheck(this, RBACPolicy);
    this.roles = roles;
    this.resources = resources;
    this.rolesByID = {};
    roles.forEach(function (role) {
      return _this34.rolesByID[role.role_id] = role;
    });
  }
  _createClass(RBACPolicy, [{
    key: "callerIsAuthorized",
    value: function callerIsAuthorized(memberRoles, resourceId, action) {
      var _this35 = this;
      return !!memberRoles.map(function (roleId) {
        return _this35.rolesByID[roleId];
      }).filter(function (v) {
        return v;
      }).flatMap(function (role) {
        return role.permissions;
      }).filter(function (permission) {
        return permission.resource_id === resourceId;
      }).find(function (permission) {
        return permission.actions.includes(action) || permission.actions.includes(WILDCARD_ACTION);
      });
    }
  }, {
    key: "allPermissionsForCaller",
    value: function allPermissionsForCaller(memberRoles) {
      var _this36 = this;
      var allPermsMap = Object.create(null);
      this.resources.forEach(function (resource) {
        allPermsMap[resource.resource_id] = {};
        resource.actions.forEach(function (action) {
          allPermsMap[resource.resource_id][action] = _this36.callerIsAuthorized(memberRoles, resource.resource_id, action);
        });
      });
      return allPermsMap;
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(input) {
      return new RBACPolicy(input.roles, input.resources);
    }
  }]);
  return RBACPolicy;
}();
var createDeepEqual = function createDeepEqual() {
  var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _ref8$KEYS_TO_EXCLUDE = _ref8.KEYS_TO_EXCLUDE,
    KEYS_TO_EXCLUDE = _ref8$KEYS_TO_EXCLUDE === void 0 ? [] : _ref8$KEYS_TO_EXCLUDE;
  var deepEqual = function deepEqual(a, b) {
    if (_typeof(a) !== _typeof(b)) return false;
    if (a === null || b === null) return a === b;
    if (_typeof(a) === 'object') {
      if (Object.keys(a).length !== Object.keys(b).length || Object.keys(a).some(function (k) {
        return !(k in b);
      })) return false;
      return Object.entries(a).filter(function (_ref9) {
        var _ref10 = _slicedToArray(_ref9, 1),
          k = _ref10[0];
        return !KEYS_TO_EXCLUDE.includes(k);
      }).every(function (_ref11) {
        var _ref12 = _slicedToArray(_ref11, 2),
          k = _ref12[0],
          v = _ref12[1];
        return deepEqual(v, b[k]);
      });
    }
    return a === b;
  };
  return deepEqual;
};
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
var EMAIL_REGEX = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/i;
var debounce = function debounce(func) {
  var waitFor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
  var timeout;
  var debounced = function debounced() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    clearTimeout(timeout);
    timeout = setTimeout(function () {
      return func.apply(void 0, args);
    }, waitFor);
  };
  return debounced;
};
var isLocalhost = function isLocalhost() {
  return Boolean(window.location.hostname === 'localhost' || window.location.hostname === '[::1]' || window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));
};
var buildFinalConfig = function buildFinalConfig(opts) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  return {
    cookieOptions: opts === null || opts === void 0 ? void 0 : opts.cookieOptions,
    endpoints: {
      sdkBackendURL: (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.endpoints) === null || _a === void 0 ? void 0 : _a.sdkBackendURL) !== null && _b !== void 0 ? _b : STYTCH_WEB_BACKEND_URL,
      testAPIURL: (_d = (_c = opts === null || opts === void 0 ? void 0 : opts.endpoints) === null || _c === void 0 ? void 0 : _c.testAPIURL) !== null && _d !== void 0 ? _d : TEST_API_URL,
      liveAPIURL: (_f = (_e = opts === null || opts === void 0 ? void 0 : opts.endpoints) === null || _e === void 0 ? void 0 : _e.liveAPIURL) !== null && _f !== void 0 ? _f : LIVE_API_URL,
      dfpBackendURL: getDFPBackendURL(opts),
      clientsideServicesIframeURL: (_h = (_g = opts === null || opts === void 0 ? void 0 : opts.endpoints) === null || _g === void 0 ? void 0 : _g.clientsideServicesIframeURL) !== null && _h !== void 0 ? _h : CLIENTSIDE_SERVICES_IFRAME_URL
    }
  };
};
var hasMultipleCookies = function hasMultipleCookies(cookieName) {
  var cookiePairs = document.cookie ? document.cookie.split('; ') : [];
  var matchedCookies = cookiePairs.filter(function (pair) {
    var _pair$split = pair.split('='),
      _pair$split2 = _slicedToArray2(_pair$split, 1),
      name = _pair$split2[0];
    return cookieName === name;
  });
  return matchedCookies.length > 1;
};
var PERSISTENT_STORAGE_KEY_PREFIX = 'stytch_sdk_state_';
var getPersistentStorageKey = function getPersistentStorageKey(publicToken) {
  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return "".concat(PERSISTENT_STORAGE_KEY_PREFIX).concat(publicToken).concat(key ? "::".concat(key) : '');
};
var internalSymB2B = Symbol["for"]('stytch__internal_b2b');
var writeB2BInternals = function writeB2BInternals(obj, internals) {
  Object.assign(obj, _defineProperty({}, internalSymB2B, internals));
};
var readB2BInternals = function readB2BInternals(obj) {
  var casted = obj;
  if (!casted[internalSymB2B]) {
    throw Error('Internals not found!');
  }
  return casted[internalSymB2B];
};
exports.BiometricsFailedError = BiometricsFailedError;
exports.BiometricsUnavailableError = BiometricsUnavailableError;
exports.COUNTRIES_LIST = COUNTRIES_LIST;
exports.ChallengeSigningFailedError = ChallengeSigningFailedError;
exports.DEFAULT_INTERVAL_DURATION_MS = DEFAULT_INTERVAL_DURATION_MS;
exports.DEFAULT_MAX_BATCH_SIZE = DEFAULT_MAX_BATCH_SIZE;
exports.DEFAULT_SESSION_DURATION_MINUTES = DEFAULT_SESSION_DURATION_MINUTES;
exports.DFPProtectedAuthProvider = DFPProtectedAuthProvider;
exports.DeviceCredentialsNotAllowedError = DeviceCredentialsNotAllowedError;
exports.EMAIL_REGEX = EMAIL_REGEX;
exports.EventLogger = EventLogger;
exports.FailedCodeChallengeError = FailedCodeChallengeError;
exports.FailedToDecryptDataError = FailedToDecryptDataError;
exports.GOOGLE_ONE_TAP_HOST = GOOGLE_ONE_TAP_HOST;
exports.GOOGLE_ONE_TAP_SCRIPT_URL = GOOGLE_ONE_TAP_SCRIPT_URL;
exports.HeadlessB2BDiscoveryClient = HeadlessB2BDiscoveryClient;
exports.HeadlessB2BMagicLinksClient = HeadlessB2BMagicLinksClient;
exports.HeadlessB2BOAuthClient = HeadlessB2BOAuthClient$1;
exports.HeadlessB2BOTPsClient = HeadlessB2BOTPsClient;
exports.HeadlessB2BOrganizationClient = HeadlessB2BOrganizationClient;
exports.HeadlessB2BPasswordsClient = HeadlessB2BPasswordsClient;
exports.HeadlessB2BRBACClient = HeadlessB2BRBACClient;
exports.HeadlessB2BRecoveryCodesClient = HeadlessB2BRecoveryCodesClient;
exports.HeadlessB2BSCIMClient = HeadlessB2BSCIMClient;
exports.HeadlessB2BSSOClient = HeadlessB2BSSOClient;
exports.HeadlessB2BSelfClient = HeadlessB2BSelfClient;
exports.HeadlessB2BSessionClient = HeadlessB2BSessionClient;
exports.HeadlessB2BTOTPsClient = HeadlessB2BTOTPsClient;
exports.IframeHostClient = IframeHostClient;
exports.InternalError = InternalError;
exports.InvalidAuthorizationCredentialError = InvalidAuthorizationCredentialError;
exports.InvalidCredentialTypeError = InvalidCredentialTypeError;
exports.InvalidRedirectSchemeError = InvalidRedirectSchemeError;
exports.InvalidStartUrlError = InvalidStartUrlError;
exports.JSONDataNotConvertibleToStringError = JSONDataNotConvertibleToStringError;
exports.KeyInvalidatedError = KeyInvalidatedError;
exports.KeystoreUnavailableError = KeystoreUnavailableError;
exports.MissingAttestationObjectError = MissingAttestationObjectError;
exports.MissingAuthorizationCredentialIDTokenError = MissingAuthorizationCredentialIDTokenError;
exports.MissingGoogleClientIDError = MissingGoogleClientIDError;
exports.MissingPKCEError = MissingPKCEError;
exports.MissingPublicKeyError = MissingPublicKeyError;
exports.MissingUrlError = MissingUrlError;
exports.NoBiometricsEnrolledError = NoBiometricsEnrolledError;
exports.NoBiometricsRegistrationError = NoBiometricsRegistrationError;
exports.NoCredentialsPresentError = NoCredentialsPresentError;
exports.NoCurrentSessionError = NoCurrentSessionError;
exports.PasskeysInvalidEncoding = PasskeysInvalidEncoding;
exports.PasskeysMisconfigured = PasskeysMisconfigured;
exports.PasskeysUnsupportedError = PasskeysUnsupportedError;
exports.RandomNumberGenerationFailed = RandomNumberGenerationFailed;
exports.SDKAPIUnreachableError = SDKAPIUnreachableError;
exports.SDKNotConfiguredError = SDKNotConfiguredError;
exports.SearchDataManager = SearchDataManager;
exports.SessionManager = SessionManager;
exports.SignInWithAppleMisconfigured = SignInWithAppleMisconfigured;
exports.StateChangeClient = StateChangeClient;
exports.StytchAPIError = StytchAPIError;
exports.StytchAPISchemaError = StytchAPISchemaError;
exports.StytchAPIUnreachableError = StytchAPIUnreachableError;
exports.StytchError = StytchError;
exports.StytchSDKAPIError = StytchSDKAPIError;
exports.StytchSDKError = StytchSDKError;
exports.StytchSDKSchemaError = StytchSDKSchemaError;
exports.StytchSDKUsageError = StytchSDKUsageError;
exports.UNRECOVERABLE_ERROR_TYPES = UNRECOVERABLE_ERROR_TYPES;
exports.UserCancellationError = UserCancellationError;
exports.UserLockedOutError = UserLockedOutError;
exports.__awaiter = __awaiter;
exports.__rest = __rest;
exports.baseFetchSDK = baseFetchSDK;
exports.buildFinalConfig = buildFinalConfig;
exports.checkB2BNotSSR = checkB2BNotSSR;
exports.checkNotSSR = checkNotSSR;
exports.checkPublicToken = checkPublicToken;
exports.createAppSessionId = createAppSessionId;
exports.createDeepEqual = createDeepEqual;
exports.createEventId = createEventId;
exports.createPersistentId = createPersistentId;
exports.debounce = debounce;
exports.errorToStytchError = errorToStytchError;
exports.getPersistentStorageKey = getPersistentStorageKey;
exports.hasMultipleCookies = hasMultipleCookies;
exports.isLocalhost = isLocalhost;
exports.isTestPublicToken = isTestPublicToken;
exports.loadESModule = loadESModule;
exports.logger = logger;
exports.readB2BInternals = readB2BInternals;
exports.retriableFetchSDK = retriableFetchSDK;
exports.validate = validate;
exports.writeB2BInternals = writeB2BInternals;
