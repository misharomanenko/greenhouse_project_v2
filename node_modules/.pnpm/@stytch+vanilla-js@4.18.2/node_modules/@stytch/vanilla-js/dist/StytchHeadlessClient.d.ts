import { StateChangeRegisterFunction } from '@stytch/core';
import { ConsumerState, IHeadlessCryptoWalletClient, IHeadlessMagicLinksClient, IHeadlessOTPsClient, IHeadlessPasswordClient, IHeadlessSessionClient, IHeadlessTOTPClient, IHeadlessUserClient, IHeadlessWebAuthnClient, StytchClientOptions } from '@stytch/core/public';
import { IWebOAuthClient } from './HeadlessOAuthClient';
/**
 * A headless client used for invoking the Stytch API.
 * The Stytch Headless Client can be used as a drop-in solution for authentication and session management.
 * Full documentation can be found {@link https://stytch.com/docs/sdks/javascript-sdk online}.
 * @example
 * const stytch = new StytchHeadlessClient('public-token-<find yours in the stytch dashboard>');
 * stytch.magicLinks.email.loginOrCreate('sandbox@stytch.com', {
 *   login_magic_link_url: 'https://example.com/authenticate',
 *   login_expiration_minutes: 60,
 *   signup_magic_link_url: 'https://example.com/authenticate',
 *   signup_expiration_minutes: 60,
 * });
 */
export declare class StytchHeadlessClient {
    private readonly _subscriptionService;
    private readonly _sessionManager;
    private readonly _networkClient;
    private readonly _apiNetworkClient;
    private readonly _dataLayer;
    private readonly _stateChangeClient;
    user: IHeadlessUserClient;
    magicLinks: IHeadlessMagicLinksClient;
    session: IHeadlessSessionClient;
    otps: IHeadlessOTPsClient;
    oauth: IWebOAuthClient;
    cryptoWallets: IHeadlessCryptoWalletClient;
    totps: IHeadlessTOTPClient;
    webauthn: IHeadlessWebAuthnClient;
    passwords: IHeadlessPasswordClient;
    /**
     * Register a callback function to be invoked whenever certain state changes
     * occur, like a user or session object being updated.
     *
     * This is an alternative to more specific methods like `user.onChange` and
     * `session.onChange`. It can be helpful if you want to be notified of related
     * changes to different parts of state at once.
     *
     * If you are only interested in specific state changes, consider using more
     * specific methods like `user.onChange` and `session.onChange` instead.
     */
    onStateChange: StateChangeRegisterFunction<ConsumerState>;
    constructor(_PUBLIC_TOKEN: string, options?: StytchClientOptions);
}
