/// <reference types="react" />
import React from "react";
import { ReactNode } from "react";
// We need to import the StytchUIClient type to give the TSDoc parser a hint as to where it is from
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { Callbacks, StytchLoginConfig, StyleConfig, Session, StytchUIClient, User } from "@stytch/vanilla-js";
import { StytchHeadlessClient } from "@stytch/vanilla-js/headless";
interface StytchProps {
    /**
     * A {@link StytchLoginConfig} object. Add products and product-specific config to this object to change the login methods shown.
     *
     * @example
     * {
     *   products: ['crypto', 'otps']
     * }
     *
     * @example
     * {
     *   products: ['emailMagicLinks'>]
     *   emailMagicLinksOptions: {
     *     loginRedirectURL: 'https://example.com/authenticate',
     *     signupRedirectURL: 'https://example.com/authenticate',
     *   }
     * }
     *
     * @example
     * {
     *   products: ['oauth'>]
     *   oauthOptions: {
     *   providers: [
     *       { type: 'google', one_tap: true, position: 'embedded' },
     *       { type: 'microsoft' },
     *       { type: 'apple' },
     *       { type: 'facebook' },
     *     ],
     *   }
     * }
     */
    config: StytchLoginConfig;
    /**
     * An optional {@link StyleConfig} to customize the look and feel of the screen.
     *
     * @example
     * {
     *    fontFamily: 'Arial, Helvetica, sans-serif',
     *    width: '360px',
     *    primaryColor: '#19303D',
     * }
     */
    styles?: StyleConfig;
    /**
     * An optional {@link Callbacks} object.
     *
     * @example
     * {
     *   onError: ({message}) => {
     *      console.error('Stytch login screen error', message)
     *   }
     * }
     *
     * @example
     * {
     *   onEvent: ({type, data}) => {
     *     if(type === StytchEventType.CryptoWalletAuthenticate) {
     *       console.log('Logged in with crypto wallet', data);
     *     }
     *   }
     * }
     */
    callbacks?: Callbacks;
}
/**
 * The Stytch Login Screen component.
 * This component can only be used with a {@link StytchUIClient} client constructor
 * passed into the {@link StytchProvider}
 *
 * See the {@link https://stytch.com/docs/sdks/javascript-sdk online reference}
 * and {@link https://storybook.stytch.com interactive examples} for more.
 *
 * @example
 * <StytchLogin
 *   config={{
 *     products: ['emailMagicLinks', 'oauth'],
 *     emailMagicLinksOptions: {
 *       loginRedirectURL: 'https://example.com/authenticate',
 *       signupRedirectURL: 'https://example.com/authenticate',
 *     },
 *     oauthOptions: {
 *      providers: [{ type: OAuthProviders.Google }, { type: OAuthProviders.Microsoft }],
 *    },
 *   }}
 *   styles={{
 *     fontFamily: '"Helvetica New", Helvetica, sans-serif',
 *     primaryColor: '#0577CA',
 *     width: '321px',
 *   }}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 * @param props {@link StytchProps}
 */
declare const StytchLogin: ({ config, styles, callbacks }: StytchProps) => React.JSX.Element;
interface StytchResetPasswordProps extends StytchProps {
    passwordResetToken: string;
}
/**
 * The Stytch Reset Password component.
 * This component can only be used with a {@link StytchUIClient} client constructor
 * passed into the {@link StytchProvider}
 *
 * See the {@link https://stytch.com/docs/sdks/javascript-sdk online reference}
 * and {@link https://storybook.stytch.com interactive examples} for more.
 *
 * @example
 * <StytchPasswordReset
 *   config={{
 *     products: ['emailMagicLinks', 'oauth'],
 *     emailMagicLinksOptions: {
 *       loginRedirectURL: 'https://example.com/authenticate',
 *       signupRedirectURL: 'https://example.com/authenticate',
 *     },
 *     oauthOptions: {
 *      providers: [{ type: OAuthProviders.Google }, { type: OAuthProviders.Microsoft }],
 *    },
 *   }}
 *   passwordResetToken="PvC5UudZ7TPZbELt95yXAQ-8MeEUCRob8bUQ-g52fIJs"
 *   styles={{
 *     fontFamily: '"Helvetica New", Helvetica, sans-serif',
 *     primaryColor: '#0577CA',
 *     width: '321px',
 *   }}
 *   callbacks={{
 *     onEvent: (event) => console.log(event)
 *   }}
 * />
 *
 * @param config - A {@link StytchLoginConfig} object
 * @param passwordResetToken - A Stytch password reset token
 * @param styles - An optional {@link StyleConfig} to customize the look and feel of the screen.
 * @param callbacks - An optional {@link Callbacks} object
 */
declare const StytchPasswordReset: ({ config, styles, callbacks, passwordResetToken }: StytchResetPasswordProps) => React.JSX.Element;
declare const StytchPasskeyRegistration: ({ config, styles, callbacks }: StytchProps) => React.JSX.Element;
/**
 * The Stytch Client object passed in to <StytchProvider /> in your application root.
 * Either a StytchUIClient or StytchHeadlessClient.
 */
type StytchClient = StytchUIClient | StytchHeadlessClient;
type SWRUser = {
    /**
     * Either the active {@link User} object, or null if the user is not logged in.
     */
    user: User | null;
    /**
     * If true, indicates that the value returned is from the application cache and a state refresh is in progress.
     */
    fromCache: boolean;
};
type SWRSession = {
    /**
     * Either the active {@link Session} object, or null if the user is not logged in.
     */
    session: Session | null;
    /**
     * If true, indicates that the value returned is from the application cache and a state refresh is in progress.
     */
    fromCache: boolean;
};
/**
 * Returns the active User.
 * Check the fromCache property to determine if the user data is from persistent storage.
 * @example
 * const {user} = useStytchUser();
 * return (<h1>Welcome, {user.name.first_name}</h1>);
 * @returns A {@link SWRUser}
 */
declare const useStytchUser: () => SWRUser;
/**
 * Returns the active user's Stytch session.
 * @example
 * const {session} = useStytchSession();
 * useEffect(() => {
 *   if (!session) {
 *     router.replace('/login')
 *   }
 * }, [session]);
 * @returns A {@link SWRSession}
 */
declare const useStytchSession: () => SWRSession;
/**
 * Returns the Stytch client stored in the Stytch context.
 *
 * @example
 * const stytch = useStytch();
 * useEffect(() => {
 *   stytch.magicLinks.authenticate('...')
 * }, [stytch]);
 */
declare const useStytch: () => StytchClient;
declare const withStytch: <T extends object>(Component: React.ComponentType<T & {
    stytch: StytchClient;
}>) => React.ComponentType<T>;
declare const withStytchUser: <T extends object>(Component: React.ComponentType<T & {
    stytchUser: User | null;
    stytchUserIsFromCache: boolean;
}>) => React.ComponentType<T>;
declare const withStytchSession: <T extends object>(Component: React.ComponentType<T & {
    stytchSession: Session | null;
    stytchSessionIsFromCache: boolean;
}>) => React.ComponentType<T>;
type StytchProviderProps = {
    /**
     * A Stytch client instance, either a {@link StytchUIClient} or {@link StytchHeadlessClient}
     */
    stytch: StytchClient;
    children?: ReactNode;
};
/**
 * The Stytch Context Provider.
 * Wrap your application with this component in the root file in order to use Stytch everywhere in your app.
 * @example
 * const stytch = new StytchHeadlessClient('public-token-<find yours in the stytch dashboard>')
 *
 * ReactDOM.render(
 *   <StytchProvider stytch={stytch}>
 *     <App />
 *   </StytchProvider>,
 *   document.getElementById('root'),
 * )
 */
declare const StytchProvider: ({ stytch, children }: StytchProviderProps) => JSX.Element;
export { StytchLogin, StytchPasswordReset, StytchPasskeyRegistration, StytchProvider, useStytch, useStytchSession, useStytchUser, withStytch, withStytchSession, withStytchUser };
export type { StytchProviderProps };
